/*
 * Copyright (C) 2019 The "MysteriumNetwork/payments" Authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AccountantImplementationABI is the input ABI used to generate the binding from.
const AccountantImplementationABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"AccountantClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"validFromBlock\",\"type\":\"uint64\"}],\"name\":\"AccountantFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"}],\"name\":\"AccountantPunishmentActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccountantPunishmentDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"AccountantStakeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"ChannelBalanceDecreaseRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"ChannelBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"ChannelBeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"}],\"name\":\"ChannelOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChannelOpeningActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChannelOpeningPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"DestinationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"FundsWithdrawned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxLoan\",\"type\":\"uint256\"}],\"name\":\"MaxLoanValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"NewAccountantOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"NewLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSettled\",\"type\":\"uint256\"}],\"name\":\"PromiseSettled\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUsedNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFundsDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"punishment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"getChannelId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumAccountantImplementation.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_maxLoan\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToLend\",\"type\":\"uint256\"}],\"name\":\"openChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settlePromise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settleAndRebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_promiseSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settleWithBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"updateChannelBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"}],\"name\":\"rebalanceChannel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"decreaseLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resolveEmergency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setAccountantOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxLoan\",\"type\":\"uint256\"}],\"name\":\"setMaxLoan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setAccountantFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateAccountantFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_additionalStake\",\"type\":\"uint256\"}],\"name\":\"increaseAccountantStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"}],\"name\":\"isOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAccountantActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseChannelOpening\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activateChannelOpening\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalExpectedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeAccountant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getStakeBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newDestination\",\"type\":\"address\"}],\"name\":\"setFundsDestination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AccountantImplementationBin is the compiled bytecode used for deploying new contracts.
var AccountantImplementationBin = "0x60806040819052600080546001600160a01b03191633178082556001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3613dbf806100576000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c80638f32d59b11610151578063eb295b27116100c3578063f733d69d11610087578063f733d69d146109cb578063f7d7636914610a87578063fbb46b9814610a8f578063fc0c546a14610a97578063fc0e3d9014610a9f578063fec8157d14610aa757610274565b8063eb295b271461092e578063efde05ec14610954578063f2fde38b14610971578063f3fef3a314610997578063f58c5b6e146109c357610274565b8063aa606dee11610115578063aa606dee146108e0578063ab2f0e51146108e8578063be02c06c146108f0578063df8de3e7146108f8578063e1c664871461091e578063e7f43c681461092657610274565b80638f32d59b146107b657806394c7915d146107be5780639801134e146107d85780639fe827ed14610807578063a58b2b711461082457610274565b80635ab1bd53116101ea5780636e17b0d7116101ae5780636e17b0d7146106e0578063715018a6146107035780637a7ebd7b1461070b5780637c2be0a314610765578063800d6afb146107885780638da5cb5b146107ae57610274565b80635ab1bd53146105b15780635f5794f1146105d55780635f59def0146105f25780636138dda7146106b25780636931b550146106d857610274565b8063238e130a1161023c578063238e130a14610318578063392e53cd1461033e5780633e206e4d1461035a578063456e182f146104b15780634e69d560146104ce57806354ded42d146104fa57610274565b80630684cd20146102795780630996fcbc1461029a5780630a798f24146102bd57806315c73afd146102f35780631822af6f146102fb575b600080fd5b610281610ae7565b6040805192835260208301919091528051918290030190f35b6102bb600480360360208110156102b057600080fd5b503561ffff16610af0565b005b6102bb600480360360608110156102d357600080fd5b506001600160a01b03813581169160208101359091169060400135610d16565b6102bb61104a565b6102bb6004803603602081101561031157600080fd5b50356112c9565b6102bb6004803603602081101561032e57600080fd5b50356001600160a01b0316611413565b6103466114cb565b604080519115158252519081900360200190f35b6102bb600480360361010081101561037157600080fd5b81359160208101359160408201359160608101359181019060a081016080820135600160201b8111156103a357600080fd5b8201836020820111156103b557600080fd5b803590602001918460018302840111600160201b831117156103d657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092956001600160a01b0385351695602086013595919450925060608101915060400135600160201b81111561043d57600080fd5b82018360208201111561044f57600080fd5b803590602001918460018302840111600160201b8311171561047057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506114dd945050505050565b6102bb600480360360208110156104c757600080fd5b5035611500565b6104d66115cb565b604051808260038111156104e657fe5b60ff16815260200191505060405180910390f35b6102bb6004803603608081101561051057600080fd5b81359160208101359160408201359190810190608081016060820135600160201b81111561053d57600080fd5b82018360208201111561054f57600080fd5b803590602001918460018302840111600160201b8311171561057057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506115d4945050505050565b6105b9611aa0565b604080516001600160a01b039092168252519081900360200190f35b610346600480360360208110156105eb57600080fd5b5035611aaf565b6102bb6004803603608081101561060857600080fd5b8135916001600160a01b036020820135169160408201359190810190608081016060820135600160201b81111561063e57600080fd5b82018360208201111561065057600080fd5b803590602001918460018302840111600160201b8311171561067157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611acc945050505050565b6102bb600480360360208110156106c857600080fd5b50356001600160a01b0316611cb5565b6102bb611ebc565b6102bb600480360360408110156106f657600080fd5b5080359060200135611f0d565b6102bb6121bb565b6107286004803603602081101561072157600080fd5b503561225e565b604080516001600160a01b0390971687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b6102bb6004803603604081101561077b57600080fd5b508035906020013561229d565b6102bb6004803603602081101561079e57600080fd5b50356001600160a01b031661252d565b6105b961261d565b61034661262c565b6107c661263d565b60408051918252519081900360200190f35b6107e061265b565b6040805161ffff909316835267ffffffffffffffff90911660208301528051918290030190f35b6107c66004803603602081101561081d57600080fd5b5035612677565b6102bb600480360360a081101561083a57600080fd5b81359160208101359160408201359160608101359181019060a081016080820135600160201b81111561086c57600080fd5b82018360208201111561087e57600080fd5b803590602001918460018302840111600160201b8311171561089f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506126f4945050505050565b6102bb612a98565b6107c6612b6a565b610346612c63565b6102bb6004803603602081101561090e57600080fd5b50356001600160a01b0316612c9d565b6107e0612dce565b6105b9612dea565b6107c66004803603602081101561094457600080fd5b50356001600160a01b0316612df9565b6102bb6004803603602081101561096a57600080fd5b5035612e38565b6102bb6004803603602081101561098757600080fd5b50356001600160a01b0316613036565b6102bb600480360360408110156109ad57600080fd5b506001600160a01b038135169060200135613098565b6105b9613237565b6102bb600480360360a08110156109e157600080fd5b81359160208101359160408201359160608101359181019060a081016080820135600160201b811115610a1357600080fd5b820183602082011115610a2557600080fd5b803590602001918460018302840111600160201b83111715610a4657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613246945050505050565b6102bb613263565b6102bb613352565b6105b9613421565b6107c6613430565b6102bb60048036036080811015610abd57600080fd5b506001600160a01b03813581169160208101359091169061ffff6040820135169060600135613436565b600e54600f5482565b6004546001600160a01b03163314610b395760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b6003610b436115cb565b6003811115610b4e57fe5b1415610ba1576040805162461bcd60e51b815260206004820152601f60248201527f6163636f756e74616e742073686f756c64206265206e6f7420636c6f73656400604482015290519081900360640190fd5b6113888161ffff161115610bfc576040805162461bcd60e51b815260206004820152601c60248201527f6665652063616e27742062652062696767657220746861742035302500000000604482015290519081900360640190fd5b600b5462010000900467ffffffffffffffff16431015610c63576040805162461bcd60e51b815260206004820152601960248201527f63616e27742075706461746520696e6163746976652066656500000000000000604482015290519081900360640190fd5b6000610c6d613684565b600b8054600c805467ffffffffffffffff620100008085048216810269ffffffffffffffff00001961ffff1994851661ffff80891691909117821692909217909555604080518082018252918b1680835293891660209283018190529283029490961683179094169290921790945582519384529083015280519293507e8b9bffa5c48d8c0b96ce879f8491c5605cc3d7a46a46711b522dbe6d4070ee92918290030190a15050565b6003546001600160a01b03163314610d75576040805162461bcd60e51b815260206004820152601f60248201527f6f6e6c792072656769737472792063616e206f70656e206368616e6e656c7300604482015290519081900360640190fd5b6000610d7f6115cb565b6003811115610d8a57fe5b14610dc65760405162461bcd60e51b8152600401808060200182810382526025815260200180613cf06025913960400191505060405180910390fd5b60408051606085811b6001600160601b0319166020808401919091523090911b60348301528251808303602801815260489092019092528051910120610e0b81611aaf565b15610e475760405162461bcd60e51b8152600401808060200182810382526021815260200180613a4e6021913960400191505060405180910390fd5b6000818152600d6020526040902080546001600160a01b0319166001600160a01b038516178155600101829055811561100957600754821115610ebb5760405162461bcd60e51b8152600401808060200182810382526035815260200180613cbb6035913960400191505060405180910390fd5b600254604080516323b872dd60e01b81523360048201523060248201526044810185905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015610f1557600080fd5b505af1158015610f29573d6000803e3d6000fd5b505050506040513d6020811015610f3f57600080fd5b5051610f92576040805162461bcd60e51b815260206004820152601d60248201527f746f6b656e207472616e736665722073686f756c642073756363656564000000604482015290519081900360640190fd5b600554610fa5908363ffffffff61368c16565b6005556000818152600d60205260409020600301829055600654610fcf908363ffffffff61368c16565b60065560408051838152905182917f9839fd1896801c6864456fe7cbd098b1e4a81dba19536764cea53a1fb07ed239919081900360200190a25b604080518281526020810184905281517fbe2e1f3a6197dfd16fa6830c4870364b618b8b288c21cbcfa4fdb5d7c6a5e45b929181900390910190a150505050565b60026110546115cb565b600381111561105f57fe5b1461109b5760405162461bcd60e51b8152600401808060200182810382526029815260200180613c486029913960400191505060405180910390fd5b60006110ce60646110c26110bb60046005546136ef90919063ffffffff16565b6064613748565b9063ffffffff61376216565b905060006110da6137cc565b600e54909150430360006111086001846110f48582613748565b816110fb57fe5b049063ffffffff6137d216565b9050600061111c828663ffffffff6136ef16565b600f54909150611132908263ffffffff61368c16565b600f8190556008546000916111649161114a9161382f565b61115860055460065461382f565b9063ffffffff61368c16565b600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156111b557600080fd5b505afa1580156111c9573d6000803e3d6000fd5b505050506040513d60208110156111df57600080fd5b5051905060008282106111f3576000611203565b611203838363ffffffff6137d216565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b15801561126057600080fd5b505af1158015611274573d6000803e3d6000fd5b505050506040513d602081101561128a57600080fd5b5050600a805460ff191690556040517f58ef313a2eb2567f3b143ff20930622dd67a0de84902cc93b7ddddd72b7773ef90600090a15050505050505050565b6004546001600160a01b031633146113125760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b8061131b612b6a565b10156113c657600061133b61132e612b6a565b839063ffffffff6137d216565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b15801561139857600080fd5b505af11580156113ac573d6000803e3d6000fd5b505050506040513d60208110156113c257600080fd5b5050505b6008546113d9908263ffffffff61368c16565b600881905560408051918252517f41a5bb80f9c1243f3d450690277c955ff8982168e34ed096457afdc31cefef7f9181900360200190a150565b6004546001600160a01b0316331461145c5760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b6001600160a01b03811661146f57600080fd5b6001546040516001600160a01b038084169216907fe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031615155b90565b6114e988848484611acc565b6114f68888888888613246565b5050505050505050565b6004546001600160a01b031633146115495760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b611551612c63565b611590576040805162461bcd60e51b815260206004820152601c6024820152600080516020613a6f833981519152604482015290519081900360640190fd5b60078190556040805182815290517f2181d8ed90eadf541579998852434d883f30ace513163bbe0e4115b29afb517a9181900360200190a150565b600a5460ff1690565b60006116898260405180604001604052806013815260200172131bd859081c995d1d5c9b881c995c5d595cdd606a1b8152508787876040516020018085805190602001908083835b6020831061163b5780518252601f19909201916020918201910161161c565b51815160209384036101000a60001901801990921691161790529201958652508481019390935250604080840191909152805180840382018152606090930190528151910120919050613845565b90508461169582612df9565b146116d15760405162461bcd60e51b8152600401808060200182810382526022815260200180613c996022913960400191505060405180910390fd5b6116da85611aaf565b611727576040805162461bcd60e51b815260206004820152601960248201527818da185b9b995b081a185d99481d1bc81899481bdc195b9959603a1b604482015290519081900360640190fd5b6000858152600d60205260409020600481015484116117775760405162461bcd60e51b8152600401808060200182810382526029815260200180613b3a6029913960400191505060405180910390fd5b6004810184905560038101548511156117d7576040805162461bcd60e51b815260206004820152601f60248201527f63616e2774207769746864726177206d6f7265207468616e206c656e64656400604482015290519081900360640190fd5b60006117e7826001015487613933565b90506000611803826117f761263d565b9063ffffffff6137d216565b600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d602081101561187e57600080fd5b505190508088118061189e57508161189c828a63ffffffff6137d216565b105b1561190a576118ab612c63565b156118f757600a805460ff1916600217905543600e81905560408051918252517fb3e91d0895882cef621b468a8235043537ca2e4d8d91ee6587801041054107e1916020908290030190a15b611907818363ffffffff6137d216565b97505b6003840154600090611922908a63ffffffff6137d216565b90506007548111156119655760405162461bcd60e51b8152600401808060200182810382526035815260200180613cbb6035913960400191505060405180910390fd5b60025485546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018d90529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156119bd57600080fd5b505af11580156119d1573d6000803e3d6000fd5b505050506040513d60208110156119e757600080fd5b5050600385018190556001850154611a05908563ffffffff6137d216565b6001860155600554611a1d908563ffffffff6137d216565b600555600654611a33908a63ffffffff6137d216565b600655600185015460408051918252518b91600080516020613b63833981519152919081900360200190a26040805182815290518b917f9839fd1896801c6864456fe7cbd098b1e4a81dba19536764cea53a1fb07ed239919081900360200190a250505050505050505050565b6003546001600160a01b031690565b6000908152600d60205260409020546001600160a01b0316151590565b611ad584611aaf565b611b22576040805162461bcd60e51b815260206004820152601960248201527818da185b9b995b081a185d99481d1bc81899481bdc195b9959603a1b604482015290519081900360640190fd5b6001600160a01b038316611b675760405162461bcd60e51b8152600401808060200182810382526021815260200180613ba96021913960400191505060405180910390fd5b6000848152600d6020526040902060048101548311611bb75760405162461bcd60e51b8152600401808060200182810382526029815260200180613b3a6029913960400191505060405180910390fd5b6040805160208082018890526001600160601b0319606088901b168284015260548083018790528351808403909101815260749092019092528051910120600090611c08908463ffffffff61384516565b905085611c1482612df9565b14611c505760405162461bcd60e51b8152600401808060200182810382526022815260200180613c996022913960400191505060405180910390fd5b6004820184905581546001600160a01b0319166001600160a01b038616908117835560408051888152602081019290925280517f8756aa559142225f918d7584303ecfe48e75b454f6614d0fae9f0d6ca0a898cc9281900390910190a1505050505050565b6004546001600160a01b03163314611cfe5760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b6003611d086115cb565b6003811115611d1357fe5b14611d65576040805162461bcd60e51b815260206004820152601c60248201527f6163636f756e74616e74206861766520746f20626520636c6f73656400000000604482015290519081900360640190fd5b6009544311611da55760405162461bcd60e51b8152600401808060200182810382526026815260200180613bca6026913960400191505060405180910390fd5b600f54600254604080516370a0823160e01b81523060048201529051600093611e349390926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015611dfc57600080fd5b505afa158015611e10573d6000803e3d6000fd5b505050506040513d6020811015611e2657600080fd5b50519063ffffffff6137d216565b6002546040805163a9059cbb60e01b81526001600160a01b03868116600483015260248201859052915193945091169163a9059cbb916044808201926020929091908290030181600087803b158015611e8c57600080fd5b505af1158015611ea0573d6000803e3d6000fd5b505050506040513d6020811015611eb657600080fd5b50505050565b6001546001600160a01b0316611ed157600080fd5b6001546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015611f0a573d6000803e3d6000fd5b50565b611f1682611aaf565b611f63576040805162461bcd60e51b815260206004820152601960248201527818da185b9b995b081a185d99481d1bc81899481bdc195b9959603a1b604482015290519081900360640190fd5b6003611f6d6115cb565b6003811115611f7857fe5b1415611fcb576040805162461bcd60e51b815260206004820152601f60248201527f6163636f756e74616e742073686f756c64206265206e6f7420636c6f73656400604482015290519081900360640190fd5b6000828152600d602052604081206003810154909190611ff1908463ffffffff61368c16565b90506007548111156120345760405162461bcd60e51b8152600401808060200182810382526035815260200180613cbb6035913960400191505060405180910390fd5b600254604080516323b872dd60e01b81523360048201523060248201526044810186905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561208e57600080fd5b505af11580156120a2573d6000803e3d6000fd5b505050506040513d60208110156120b857600080fd5b505161210b576040805162461bcd60e51b815260206004820152601f60248201527f7472616e73666572206861766520746f206265207375636365737366756c6c00604482015290519081900360640190fd5b6121346121258360010154836137d290919063ffffffff16565b6005549063ffffffff61368c16565b60055560065461214a908463ffffffff61368c16565b60065560018201819055600382018190556040805182815290518591600080516020613b63833981519152919081900360200190a260408051848152905185917f9839fd1896801c6864456fe7cbd098b1e4a81dba19536764cea53a1fb07ed239919081900360200190a250505050565b6121c361262c565b612214576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600d602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909186565b6004546001600160a01b031633146122e65760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b6122ee612c63565b61232d576040805162461bcd60e51b815260206004820152601c6024820152600080516020613a6f833981519152604482015290519081900360640190fd5b61233682611aaf565b612383576040805162461bcd60e51b815260206004820152601960248201527818da185b9b995b081a185d99481d1bc81899481bdc195b9959603a1b604482015290519081900360640190fd5b6000828152600d60205260409020600301548110156123d35760405162461bcd60e51b8152600401808060200182810382526026815260200180613b836026913960400191505060405180910390fd5b6000828152600d60205260408120600181015490919083111561246957600182015461240690849063ffffffff6137d216565b905080612411612b6a565b101561244e5760405162461bcd60e51b8152600401808060200182810382526022815260200180613a036022913960400191505060405180910390fd5b600554612461908263ffffffff61368c16565b6005556124fb565b60058201546124b15761247a613684565b600583015560405184907faf4c616dc7856b81dbc1346e5547f0a1d4f1553011653f920d1041f21540107590600090a25050612529565b81600501544310156124c4575050612529565b60018201546124d9908463ffffffff6137d216565b6005549091506124ef908263ffffffff6137d216565b60059081556000908301555b600182018390556040805184815290518591600080516020613b63833981519152919081900360200190a250505b5050565b6004546001600160a01b031633146125765760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b6001600160a01b0381166125c9576040805162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b604482015290519081900360640190fd5b600480546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fa326c787c51b80574c7b572d0c9664e64f1107538b902f519a896901b41379189181900360200190a150565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6000612656600554611158600854600e6001015461382f565b905090565b600b5461ffff81169062010000900467ffffffffffffffff1682565b60006126816139eb565b600b5462010000900467ffffffffffffffff164310156126a257600c6126a5565b600b5b60408051808201909152905461ffff81168083526201000090910467ffffffffffffffff1660208301529091506064906126e59082908602046064613748565b816126ec57fe5b049392505050565b6000858152600d6020526040902080546001600160a01b0316612755576040805162461bcd60e51b815260206004820152601460248201527318da185b9b995b081cda1bdd5b1908195e1a5cdd60621b604482015290519081900360640190fd5b6040805160208082018690528251808303820181528284018452805190820120606083018a90526080830189905260a0830188905260c08084018290528451808503909101815260e090930190935281519101206000906127bc908563ffffffff61384516565b6004549091506001600160a01b0380831691161461280b5760405162461bcd60e51b8152600401808060200182810382526025815260200180613d416025913960400191505060405180910390fd5b60006128248460020154896137d290919063ffffffff16565b9050600081116128655760405162461bcd60e51b8152600401808060200182810382526037815260200180613c116037913960400191505060405180910390fd5b808711156128a45760405162461bcd60e51b815260040180806020018281038252603c815260200180613ad9603c913960400191505060405180910390fd5b6001840154808211156128b5578091505b60028501546128ca908363ffffffff61368c16565b600286015560006128da83612677565b60025487549192506001600160a01b039081169163a9059cbb9116612909846117f7888f63ffffffff6137d216565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561295857600080fd5b505af115801561296c573d6000803e3d6000fd5b505050506040513d602081101561298257600080fd5b506129959050828463ffffffff6137d216565b60018701556005546129ad908463ffffffff6137d216565b6005558815612a37576002546040805163a9059cbb60e01b8152336004820152602481018c905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015612a0a57600080fd5b505af1158015612a1e573d6000803e3d6000fd5b505050506040513d6020811015612a3457600080fd5b50505b85546002870154604080516001600160a01b0390931683526020830186905282810191909152518c917fa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668919081900360600190a25050505050505050505050565b6004546001600160a01b03163314612ae15760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b6000612aeb6115cb565b6003811115612af657fe5b14612b325760405162461bcd60e51b8152600401808060200182810382526025815260200180613cf06025913960400191505060405180910390fd5b600a805460ff191660011790556040517f1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e90600090a1565b600080612b8161114a600854600e6001015461382f565b600254604080516370a0823160e01b815230600482015290519293506001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015612bcf57600080fd5b505afa158015612be3573d6000803e3d6000fd5b505050506040513d6020811015612bf957600080fd5b5051811115612c0c5760009150506114da565b600254604080516370a0823160e01b81523060048201529051612c5d9284926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015611dfc57600080fd5b91505090565b600080612c6e6115cb565b90506002816003811115612c7e57fe5b14158015612c5d57506003816003811115612c9557fe5b141591505090565b6001546001600160a01b0316612cb257600080fd5b6002546001600160a01b0382811691161415612cff5760405162461bcd60e51b8152600401808060200182810382526025815260200180613b156025913960400191505060405180910390fd5b604080516370a0823160e01b815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b158015612d4957600080fd5b505afa158015612d5d573d6000803e3d6000fd5b505050506040513d6020811015612d7357600080fd5b50516001546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015611e8c57600080fd5b600c5461ffff81169062010000900467ffffffffffffffff1682565b6004546001600160a01b031690565b60408051606092831b6001600160601b0319166020808301919091523090931b6034820152815180820360280181526048909101909152805191012090565b612e40612c63565b612e7f576040805162461bcd60e51b815260206004820152601c6024820152600080516020613a6f833981519152604482015290519081900360640190fd5b6000818152600d602052604090206001810154600382015411612ed35760405162461bcd60e51b8152600401808060200182810382526029815260200180613a256029913960400191505060405180910390fd5b6000612ef0826001015483600301546137d290919063ffffffff16565b90506000612f008261115861263d565b600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612f5157600080fd5b505afa158015612f65573d6000803e3d6000fd5b505050506040513d6020811015612f7b57600080fd5b5051905081811015612fda57600a805460ff1916600217905543600e55612fa282826137d2565b6040805143815290519194507fb3e91d0895882cef621b468a8235043537ca2e4d8d91ee6587801041054107e1919081900360200190a15b600554612fed908463ffffffff61368c16565b6005556001840154613005908463ffffffff61368c16565b6001850181905560408051918252518691600080516020613b63833981519152919081900360200190a25050505050565b61303e61262c565b61308f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b611f0a81613942565b6004546001600160a01b031633146130e15760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b6130e9612c63565b613128576040805162461bcd60e51b815260206004820152601c6024820152600080516020613a6f833981519152604482015290519081900360640190fd5b80613131612b6a565b101561316e5760405162461bcd60e51b815260040180806020018281038252602c815260200180613d15602c913960400191505060405180910390fd5b6002546040805163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156131c457600080fd5b505af11580156131d8573d6000803e3d6000fd5b505050506040513d60208110156131ee57600080fd5b5050604080518281526001600160a01b038416602082015281517fa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf929181900390910190a15050565b6001546001600160a01b031690565b61325385858585856126f4565b61325c85612e38565b5050505050565b6004546001600160a01b031633146132ac5760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b6132b4612c63565b613305576040805162461bcd60e51b815260206004820152601b60248201527f6163636f756e74616e742073686f756c64206265206163746976650000000000604482015290519081900360640190fd5b600a805460ff1916600317905561331a6139e2565b6009556040805143815290517f888906f0892e56365e679111a6f8ba7d0742bae70d0a532641cbf0da77d5af929181900360200190a1565b6004546001600160a01b0316331461339b5760405162461bcd60e51b8152600401808060200182810382526024815260200180613a8f6024913960400191505060405180910390fd5b60016133a56115cb565b60038111156133b057fe5b146133ec5760405162461bcd60e51b8152600401808060200182810382526025815260200180613d666025913960400191505060405180910390fd5b600a805460ff191690556040517f2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df890600090a1565b6002546001600160a01b031681565b60085490565b61343e6114cb565b15613490576040805162461bcd60e51b815260206004820152601a60248201527f6861766520746f206265206e6f7420696e697469616c697a6564000000000000604482015290519081900360640190fd5b6001600160a01b0383166134eb576040805162461bcd60e51b815260206004820152601760248201527f6f70657261746f72206861766520746f20626520736574000000000000000000604482015290519081900360640190fd5b6001600160a01b0384166135305760405162461bcd60e51b8152600401808060200182810382526028815260200180613c716028913960400191505060405180910390fd5b6113888261ffff16111561358b576040805162461bcd60e51b815260206004820152601c60248201527f6665652063616e277420626520626967676572207468616e2035302500000000604482015290519081900360640190fd5b600280546001600160a01b03199081166001600160a01b03878116919091179283905560038054339084161790556004805490921686821617825560408051808201825261ffff87168082524367ffffffffffffffff166020928301819052600b805461ffff191690921769ffffffffffffffff0000191662010000909102179055600786905581516370a0823160e01b81523094810194909452905193909116926370a08231926024808201939291829003018186803b15801561364f57600080fd5b505afa158015613663573d6000803e3d6000fd5b505050506040513d602081101561367957600080fd5b505160085550505050565b436146500190565b6000828201838110156136e6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826136fe575060006136e9565b8282028284828161370b57fe5b04146136e65760405162461bcd60e51b8152600401808060200182810382526021815260200180613bf06021913960400191505060405180910390fd5b600081826001848601038161375957fe5b04029392505050565b60008082116137b8576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b60008284816137c357fe5b04949350505050565b61010190565b600082821115613829576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600081831161383e57816136e6565b5090919050565b60008151604114613858575060006136e9565b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561389e57600093505050506136e9565b8060ff16601b141580156138b657508060ff16601c14155b156138c757600093505050506136e9565b6040805160008152602080820180845289905260ff8416828401526060820186905260808201859052915160019260a0808401939192601f1981019281900390910190855afa15801561391e573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600081831061383e57816136e6565b6001600160a01b0381166139875760405162461bcd60e51b8152600401808060200182810382526026815260200180613ab36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b43621b77400190565b60408051808201909152600080825260208201529056fe73686f756c6420626520656e6f75676820617661696c61626c652062616c616e63656e65772062616c616e63652073686f756c642062652062696767657220746861742063757272656e746368616e6e656c206861766520746f206265206e6f74206f70656e6564207965746163636f756e74616e74206861766520746f20626520616374697665000000006f6e6c79206f70657261746f722063616e2063616c6c20746869732066756e6374696f6e4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573737472616e736163746f72206665652073686f756c6420626520657175616c20746f206f72206c657373207468616e205f756e70616964416d6f756e746e617469766520746f6b656e2066756e64732063616e2774206265207265636f76657265646e6f6e6365206861766520746f20626520626967676572207468616e20616c726561647920757365642eb87c52e5d2d7395da77618aa1afe310b9cf13fa9f70e3199d100adda3a7aa562616c616e63652063616e2774206265206c657373207468616e206c6f616e20616d6f756e7462656e65666963696172792063616e2774206265207a65726f206164647265737374696d656c6f636b20706572696f64206861766520626520616c726561647920706173736564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77616d6f756e7420746f20736574746c652073686f756c642062652067726561746572207468617420616c726561647920736574746c65646163636f756e74616e742073686f756c6420626520696e2070756e6973686d656e7420737461747573746f6b656e2063616e2774206265206465706c6f796420696e746f207a65726f20616464726573736861766520746f206265207369676e6564206279206368616e6e656c207061727479616d6f756e7420746f206c656e642063616e2774206265206269676765722074686174206d6178696d616c6c7920616c6c6f7765646163636f756e74616e74206861766520746f20626520696e2061637469766520737461746573686f756c6420626520656e6f7567682066756e647320617661696c61626c6520746f2077697468647261776861766520746f206265207369676e6564206279206368616e6e656c206f70657261746f726163636f756e74616e74206861766520746f20626520696e20706175736564207374617465a265627a7a7231582000e6c37a99c8196daaaa3131c0efb70678a2525f03684e6d1d7621f7cff25e7864736f6c63430005110032"

// DeployAccountantImplementation deploys a new Ethereum contract, binding an instance of AccountantImplementation to it.
func DeployAccountantImplementation(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccountantImplementation, error) {
	parsed, err := abi.JSON(strings.NewReader(AccountantImplementationABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AccountantImplementationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccountantImplementation{AccountantImplementationCaller: AccountantImplementationCaller{contract: contract}, AccountantImplementationTransactor: AccountantImplementationTransactor{contract: contract}, AccountantImplementationFilterer: AccountantImplementationFilterer{contract: contract}}, nil
}

// AccountantImplementation is an auto generated Go binding around an Ethereum contract.
type AccountantImplementation struct {
	AccountantImplementationCaller     // Read-only binding to the contract
	AccountantImplementationTransactor // Write-only binding to the contract
	AccountantImplementationFilterer   // Log filterer for contract events
}

// AccountantImplementationCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccountantImplementationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountantImplementationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccountantImplementationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountantImplementationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccountantImplementationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccountantImplementationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AccountantImplementationSession struct {
	Contract     *AccountantImplementation // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// AccountantImplementationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AccountantImplementationCallerSession struct {
	Contract *AccountantImplementationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// AccountantImplementationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AccountantImplementationTransactorSession struct {
	Contract     *AccountantImplementationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// AccountantImplementationRaw is an auto generated low-level Go binding around an Ethereum contract.
type AccountantImplementationRaw struct {
	Contract *AccountantImplementation // Generic contract binding to access the raw methods on
}

// AccountantImplementationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AccountantImplementationCallerRaw struct {
	Contract *AccountantImplementationCaller // Generic read-only contract binding to access the raw methods on
}

// AccountantImplementationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AccountantImplementationTransactorRaw struct {
	Contract *AccountantImplementationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAccountantImplementation creates a new instance of AccountantImplementation, bound to a specific deployed contract.
func NewAccountantImplementation(address common.Address, backend bind.ContractBackend) (*AccountantImplementation, error) {
	contract, err := bindAccountantImplementation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementation{AccountantImplementationCaller: AccountantImplementationCaller{contract: contract}, AccountantImplementationTransactor: AccountantImplementationTransactor{contract: contract}, AccountantImplementationFilterer: AccountantImplementationFilterer{contract: contract}}, nil
}

// NewAccountantImplementationCaller creates a new read-only instance of AccountantImplementation, bound to a specific deployed contract.
func NewAccountantImplementationCaller(address common.Address, caller bind.ContractCaller) (*AccountantImplementationCaller, error) {
	contract, err := bindAccountantImplementation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationCaller{contract: contract}, nil
}

// NewAccountantImplementationTransactor creates a new write-only instance of AccountantImplementation, bound to a specific deployed contract.
func NewAccountantImplementationTransactor(address common.Address, transactor bind.ContractTransactor) (*AccountantImplementationTransactor, error) {
	contract, err := bindAccountantImplementation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationTransactor{contract: contract}, nil
}

// NewAccountantImplementationFilterer creates a new log filterer instance of AccountantImplementation, bound to a specific deployed contract.
func NewAccountantImplementationFilterer(address common.Address, filterer bind.ContractFilterer) (*AccountantImplementationFilterer, error) {
	contract, err := bindAccountantImplementation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationFilterer{contract: contract}, nil
}

// bindAccountantImplementation binds a generic wrapper to an already deployed contract.
func bindAccountantImplementation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AccountantImplementationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccountantImplementation *AccountantImplementationRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccountantImplementation.Contract.AccountantImplementationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccountantImplementation *AccountantImplementationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.AccountantImplementationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccountantImplementation *AccountantImplementationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.AccountantImplementationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AccountantImplementation *AccountantImplementationCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _AccountantImplementation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AccountantImplementation *AccountantImplementationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AccountantImplementation *AccountantImplementationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.contract.Transact(opts, method, params...)
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationCaller) AvailableBalance(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "availableBalance")
	return *ret0, err
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationSession) AvailableBalance() (*big.Int, error) {
	return _AccountantImplementation.Contract.AvailableBalance(&_AccountantImplementation.CallOpts)
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationCallerSession) AvailableBalance() (*big.Int, error) {
	return _AccountantImplementation.Contract.AvailableBalance(&_AccountantImplementation.CallOpts)
}

// CalculateAccountantFee is a free data retrieval call binding the contract method 0x9fe827ed.
//
// Solidity: function calculateAccountantFee(uint256 _amount) constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationCaller) CalculateAccountantFee(opts *bind.CallOpts, _amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "calculateAccountantFee", _amount)
	return *ret0, err
}

// CalculateAccountantFee is a free data retrieval call binding the contract method 0x9fe827ed.
//
// Solidity: function calculateAccountantFee(uint256 _amount) constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationSession) CalculateAccountantFee(_amount *big.Int) (*big.Int, error) {
	return _AccountantImplementation.Contract.CalculateAccountantFee(&_AccountantImplementation.CallOpts, _amount)
}

// CalculateAccountantFee is a free data retrieval call binding the contract method 0x9fe827ed.
//
// Solidity: function calculateAccountantFee(uint256 _amount) constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationCallerSession) CalculateAccountantFee(_amount *big.Int) (*big.Int, error) {
	return _AccountantImplementation.Contract.CalculateAccountantFee(&_AccountantImplementation.CallOpts, _amount)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) constant returns(address beneficiary, uint256 balance, uint256 settled, uint256 loan, uint256 lastUsedNonce, uint256 timelock)
func (_AccountantImplementation *AccountantImplementationCaller) Channels(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Beneficiary   common.Address
	Balance       *big.Int
	Settled       *big.Int
	Loan          *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	ret := new(struct {
		Beneficiary   common.Address
		Balance       *big.Int
		Settled       *big.Int
		Loan          *big.Int
		LastUsedNonce *big.Int
		Timelock      *big.Int
	})
	out := ret
	err := _AccountantImplementation.contract.Call(opts, out, "channels", arg0)
	return *ret, err
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) constant returns(address beneficiary, uint256 balance, uint256 settled, uint256 loan, uint256 lastUsedNonce, uint256 timelock)
func (_AccountantImplementation *AccountantImplementationSession) Channels(arg0 [32]byte) (struct {
	Beneficiary   common.Address
	Balance       *big.Int
	Settled       *big.Int
	Loan          *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	return _AccountantImplementation.Contract.Channels(&_AccountantImplementation.CallOpts, arg0)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) constant returns(address beneficiary, uint256 balance, uint256 settled, uint256 loan, uint256 lastUsedNonce, uint256 timelock)
func (_AccountantImplementation *AccountantImplementationCallerSession) Channels(arg0 [32]byte) (struct {
	Beneficiary   common.Address
	Balance       *big.Int
	Settled       *big.Int
	Loan          *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	return _AccountantImplementation.Contract.Channels(&_AccountantImplementation.CallOpts, arg0)
}

// GetChannelId is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _party) constant returns(bytes32)
func (_AccountantImplementation *AccountantImplementationCaller) GetChannelId(opts *bind.CallOpts, _party common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "getChannelId", _party)
	return *ret0, err
}

// GetChannelId is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _party) constant returns(bytes32)
func (_AccountantImplementation *AccountantImplementationSession) GetChannelId(_party common.Address) ([32]byte, error) {
	return _AccountantImplementation.Contract.GetChannelId(&_AccountantImplementation.CallOpts, _party)
}

// GetChannelId is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _party) constant returns(bytes32)
func (_AccountantImplementation *AccountantImplementationCallerSession) GetChannelId(_party common.Address) ([32]byte, error) {
	return _AccountantImplementation.Contract.GetChannelId(&_AccountantImplementation.CallOpts, _party)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCaller) GetFundsDestination(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "getFundsDestination")
	return *ret0, err
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() constant returns(address)
func (_AccountantImplementation *AccountantImplementationSession) GetFundsDestination() (common.Address, error) {
	return _AccountantImplementation.Contract.GetFundsDestination(&_AccountantImplementation.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCallerSession) GetFundsDestination() (common.Address, error) {
	return _AccountantImplementation.Contract.GetFundsDestination(&_AccountantImplementation.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "getOperator")
	return *ret0, err
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() constant returns(address)
func (_AccountantImplementation *AccountantImplementationSession) GetOperator() (common.Address, error) {
	return _AccountantImplementation.Contract.GetOperator(&_AccountantImplementation.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCallerSession) GetOperator() (common.Address, error) {
	return _AccountantImplementation.Contract.GetOperator(&_AccountantImplementation.CallOpts)
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCaller) GetRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "getRegistry")
	return *ret0, err
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() constant returns(address)
func (_AccountantImplementation *AccountantImplementationSession) GetRegistry() (common.Address, error) {
	return _AccountantImplementation.Contract.GetRegistry(&_AccountantImplementation.CallOpts)
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCallerSession) GetRegistry() (common.Address, error) {
	return _AccountantImplementation.Contract.GetRegistry(&_AccountantImplementation.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationCaller) GetStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "getStake")
	return *ret0, err
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationSession) GetStake() (*big.Int, error) {
	return _AccountantImplementation.Contract.GetStake(&_AccountantImplementation.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationCallerSession) GetStake() (*big.Int, error) {
	return _AccountantImplementation.Contract.GetStake(&_AccountantImplementation.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() constant returns(uint8)
func (_AccountantImplementation *AccountantImplementationCaller) GetStatus(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "getStatus")
	return *ret0, err
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() constant returns(uint8)
func (_AccountantImplementation *AccountantImplementationSession) GetStatus() (uint8, error) {
	return _AccountantImplementation.Contract.GetStatus(&_AccountantImplementation.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() constant returns(uint8)
func (_AccountantImplementation *AccountantImplementationCallerSession) GetStatus() (uint8, error) {
	return _AccountantImplementation.Contract.GetStatus(&_AccountantImplementation.CallOpts)
}

// IsAccountantActive is a free data retrieval call binding the contract method 0xbe02c06c.
//
// Solidity: function isAccountantActive() constant returns(bool)
func (_AccountantImplementation *AccountantImplementationCaller) IsAccountantActive(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "isAccountantActive")
	return *ret0, err
}

// IsAccountantActive is a free data retrieval call binding the contract method 0xbe02c06c.
//
// Solidity: function isAccountantActive() constant returns(bool)
func (_AccountantImplementation *AccountantImplementationSession) IsAccountantActive() (bool, error) {
	return _AccountantImplementation.Contract.IsAccountantActive(&_AccountantImplementation.CallOpts)
}

// IsAccountantActive is a free data retrieval call binding the contract method 0xbe02c06c.
//
// Solidity: function isAccountantActive() constant returns(bool)
func (_AccountantImplementation *AccountantImplementationCallerSession) IsAccountantActive() (bool, error) {
	return _AccountantImplementation.Contract.IsAccountantActive(&_AccountantImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_AccountantImplementation *AccountantImplementationCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "isInitialized")
	return *ret0, err
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_AccountantImplementation *AccountantImplementationSession) IsInitialized() (bool, error) {
	return _AccountantImplementation.Contract.IsInitialized(&_AccountantImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_AccountantImplementation *AccountantImplementationCallerSession) IsInitialized() (bool, error) {
	return _AccountantImplementation.Contract.IsInitialized(&_AccountantImplementation.CallOpts)
}

// IsOpened is a free data retrieval call binding the contract method 0x5f5794f1.
//
// Solidity: function isOpened(bytes32 _channelId) constant returns(bool)
func (_AccountantImplementation *AccountantImplementationCaller) IsOpened(opts *bind.CallOpts, _channelId [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "isOpened", _channelId)
	return *ret0, err
}

// IsOpened is a free data retrieval call binding the contract method 0x5f5794f1.
//
// Solidity: function isOpened(bytes32 _channelId) constant returns(bool)
func (_AccountantImplementation *AccountantImplementationSession) IsOpened(_channelId [32]byte) (bool, error) {
	return _AccountantImplementation.Contract.IsOpened(&_AccountantImplementation.CallOpts, _channelId)
}

// IsOpened is a free data retrieval call binding the contract method 0x5f5794f1.
//
// Solidity: function isOpened(bytes32 _channelId) constant returns(bool)
func (_AccountantImplementation *AccountantImplementationCallerSession) IsOpened(_channelId [32]byte) (bool, error) {
	return _AccountantImplementation.Contract.IsOpened(&_AccountantImplementation.CallOpts, _channelId)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_AccountantImplementation *AccountantImplementationCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_AccountantImplementation *AccountantImplementationSession) IsOwner() (bool, error) {
	return _AccountantImplementation.Contract.IsOwner(&_AccountantImplementation.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_AccountantImplementation *AccountantImplementationCallerSession) IsOwner() (bool, error) {
	return _AccountantImplementation.Contract.IsOwner(&_AccountantImplementation.CallOpts)
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() constant returns(uint16 value, uint64 validFrom)
func (_AccountantImplementation *AccountantImplementationCaller) LastFee(opts *bind.CallOpts) (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	ret := new(struct {
		Value     uint16
		ValidFrom uint64
	})
	out := ret
	err := _AccountantImplementation.contract.Call(opts, out, "lastFee")
	return *ret, err
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() constant returns(uint16 value, uint64 validFrom)
func (_AccountantImplementation *AccountantImplementationSession) LastFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _AccountantImplementation.Contract.LastFee(&_AccountantImplementation.CallOpts)
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() constant returns(uint16 value, uint64 validFrom)
func (_AccountantImplementation *AccountantImplementationCallerSession) LastFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _AccountantImplementation.Contract.LastFee(&_AccountantImplementation.CallOpts)
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationCaller) MinimalExpectedBalance(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "minimalExpectedBalance")
	return *ret0, err
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationSession) MinimalExpectedBalance() (*big.Int, error) {
	return _AccountantImplementation.Contract.MinimalExpectedBalance(&_AccountantImplementation.CallOpts)
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() constant returns(uint256)
func (_AccountantImplementation *AccountantImplementationCallerSession) MinimalExpectedBalance() (*big.Int, error) {
	return _AccountantImplementation.Contract.MinimalExpectedBalance(&_AccountantImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccountantImplementation *AccountantImplementationSession) Owner() (common.Address, error) {
	return _AccountantImplementation.Contract.Owner(&_AccountantImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCallerSession) Owner() (common.Address, error) {
	return _AccountantImplementation.Contract.Owner(&_AccountantImplementation.CallOpts)
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() constant returns(uint16 value, uint64 validFrom)
func (_AccountantImplementation *AccountantImplementationCaller) PreviousFee(opts *bind.CallOpts) (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	ret := new(struct {
		Value     uint16
		ValidFrom uint64
	})
	out := ret
	err := _AccountantImplementation.contract.Call(opts, out, "previousFee")
	return *ret, err
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() constant returns(uint16 value, uint64 validFrom)
func (_AccountantImplementation *AccountantImplementationSession) PreviousFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _AccountantImplementation.Contract.PreviousFee(&_AccountantImplementation.CallOpts)
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() constant returns(uint16 value, uint64 validFrom)
func (_AccountantImplementation *AccountantImplementationCallerSession) PreviousFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _AccountantImplementation.Contract.PreviousFee(&_AccountantImplementation.CallOpts)
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() constant returns(uint256 activationBlock, uint256 amount)
func (_AccountantImplementation *AccountantImplementationCaller) Punishment(opts *bind.CallOpts) (struct {
	ActivationBlock *big.Int
	Amount          *big.Int
}, error) {
	ret := new(struct {
		ActivationBlock *big.Int
		Amount          *big.Int
	})
	out := ret
	err := _AccountantImplementation.contract.Call(opts, out, "punishment")
	return *ret, err
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() constant returns(uint256 activationBlock, uint256 amount)
func (_AccountantImplementation *AccountantImplementationSession) Punishment() (struct {
	ActivationBlock *big.Int
	Amount          *big.Int
}, error) {
	return _AccountantImplementation.Contract.Punishment(&_AccountantImplementation.CallOpts)
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() constant returns(uint256 activationBlock, uint256 amount)
func (_AccountantImplementation *AccountantImplementationCallerSession) Punishment() (struct {
	ActivationBlock *big.Int
	Amount          *big.Int
}, error) {
	return _AccountantImplementation.Contract.Punishment(&_AccountantImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _AccountantImplementation.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_AccountantImplementation *AccountantImplementationSession) Token() (common.Address, error) {
	return _AccountantImplementation.Contract.Token(&_AccountantImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_AccountantImplementation *AccountantImplementationCallerSession) Token() (common.Address, error) {
	return _AccountantImplementation.Contract.Token(&_AccountantImplementation.CallOpts)
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_AccountantImplementation *AccountantImplementationTransactor) ActivateChannelOpening(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "activateChannelOpening")
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_AccountantImplementation *AccountantImplementationSession) ActivateChannelOpening() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.ActivateChannelOpening(&_AccountantImplementation.TransactOpts)
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) ActivateChannelOpening() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.ActivateChannelOpening(&_AccountantImplementation.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_AccountantImplementation *AccountantImplementationTransactor) ClaimEthers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "claimEthers")
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_AccountantImplementation *AccountantImplementationSession) ClaimEthers() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.ClaimEthers(&_AccountantImplementation.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) ClaimEthers() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.ClaimEthers(&_AccountantImplementation.TransactOpts)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) ClaimTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "claimTokens", _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_AccountantImplementation *AccountantImplementationSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.ClaimTokens(&_AccountantImplementation.TransactOpts, _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.ClaimTokens(&_AccountantImplementation.TransactOpts, _token)
}

// CloseAccountant is a paid mutator transaction binding the contract method 0xf7d76369.
//
// Solidity: function closeAccountant() returns()
func (_AccountantImplementation *AccountantImplementationTransactor) CloseAccountant(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "closeAccountant")
}

// CloseAccountant is a paid mutator transaction binding the contract method 0xf7d76369.
//
// Solidity: function closeAccountant() returns()
func (_AccountantImplementation *AccountantImplementationSession) CloseAccountant() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.CloseAccountant(&_AccountantImplementation.TransactOpts)
}

// CloseAccountant is a paid mutator transaction binding the contract method 0xf7d76369.
//
// Solidity: function closeAccountant() returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) CloseAccountant() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.CloseAccountant(&_AccountantImplementation.TransactOpts)
}

// DecreaseLoan is a paid mutator transaction binding the contract method 0x54ded42d.
//
// Solidity: function decreaseLoan(bytes32 _channelId, uint256 _amount, uint256 _nonce, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) DecreaseLoan(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "decreaseLoan", _channelId, _amount, _nonce, _signature)
}

// DecreaseLoan is a paid mutator transaction binding the contract method 0x54ded42d.
//
// Solidity: function decreaseLoan(bytes32 _channelId, uint256 _amount, uint256 _nonce, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationSession) DecreaseLoan(_channelId [32]byte, _amount *big.Int, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.DecreaseLoan(&_AccountantImplementation.TransactOpts, _channelId, _amount, _nonce, _signature)
}

// DecreaseLoan is a paid mutator transaction binding the contract method 0x54ded42d.
//
// Solidity: function decreaseLoan(bytes32 _channelId, uint256 _amount, uint256 _nonce, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) DecreaseLoan(_channelId [32]byte, _amount *big.Int, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.DecreaseLoan(&_AccountantImplementation.TransactOpts, _channelId, _amount, _nonce, _signature)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) GetStakeBack(opts *bind.TransactOpts, _beneficiary common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "getStakeBack", _beneficiary)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_AccountantImplementation *AccountantImplementationSession) GetStakeBack(_beneficiary common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.GetStakeBack(&_AccountantImplementation.TransactOpts, _beneficiary)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) GetStakeBack(_beneficiary common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.GetStakeBack(&_AccountantImplementation.TransactOpts, _beneficiary)
}

// IncreaseAccountantStake is a paid mutator transaction binding the contract method 0x1822af6f.
//
// Solidity: function increaseAccountantStake(uint256 _additionalStake) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) IncreaseAccountantStake(opts *bind.TransactOpts, _additionalStake *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "increaseAccountantStake", _additionalStake)
}

// IncreaseAccountantStake is a paid mutator transaction binding the contract method 0x1822af6f.
//
// Solidity: function increaseAccountantStake(uint256 _additionalStake) returns()
func (_AccountantImplementation *AccountantImplementationSession) IncreaseAccountantStake(_additionalStake *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.IncreaseAccountantStake(&_AccountantImplementation.TransactOpts, _additionalStake)
}

// IncreaseAccountantStake is a paid mutator transaction binding the contract method 0x1822af6f.
//
// Solidity: function increaseAccountantStake(uint256 _additionalStake) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) IncreaseAccountantStake(_additionalStake *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.IncreaseAccountantStake(&_AccountantImplementation.TransactOpts, _additionalStake)
}

// IncreaseLoan is a paid mutator transaction binding the contract method 0x6e17b0d7.
//
// Solidity: function increaseLoan(bytes32 _channelId, uint256 _amount) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) IncreaseLoan(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "increaseLoan", _channelId, _amount)
}

// IncreaseLoan is a paid mutator transaction binding the contract method 0x6e17b0d7.
//
// Solidity: function increaseLoan(bytes32 _channelId, uint256 _amount) returns()
func (_AccountantImplementation *AccountantImplementationSession) IncreaseLoan(_channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.IncreaseLoan(&_AccountantImplementation.TransactOpts, _channelId, _amount)
}

// IncreaseLoan is a paid mutator transaction binding the contract method 0x6e17b0d7.
//
// Solidity: function increaseLoan(bytes32 _channelId, uint256 _amount) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) IncreaseLoan(_channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.IncreaseLoan(&_AccountantImplementation.TransactOpts, _channelId, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0xfec8157d.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _maxLoan) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) Initialize(opts *bind.TransactOpts, _token common.Address, _operator common.Address, _fee uint16, _maxLoan *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "initialize", _token, _operator, _fee, _maxLoan)
}

// Initialize is a paid mutator transaction binding the contract method 0xfec8157d.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _maxLoan) returns()
func (_AccountantImplementation *AccountantImplementationSession) Initialize(_token common.Address, _operator common.Address, _fee uint16, _maxLoan *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.Initialize(&_AccountantImplementation.TransactOpts, _token, _operator, _fee, _maxLoan)
}

// Initialize is a paid mutator transaction binding the contract method 0xfec8157d.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _maxLoan) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) Initialize(_token common.Address, _operator common.Address, _fee uint16, _maxLoan *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.Initialize(&_AccountantImplementation.TransactOpts, _token, _operator, _fee, _maxLoan)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x0a798f24.
//
// Solidity: function openChannel(address _party, address _beneficiary, uint256 _amountToLend) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) OpenChannel(opts *bind.TransactOpts, _party common.Address, _beneficiary common.Address, _amountToLend *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "openChannel", _party, _beneficiary, _amountToLend)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x0a798f24.
//
// Solidity: function openChannel(address _party, address _beneficiary, uint256 _amountToLend) returns()
func (_AccountantImplementation *AccountantImplementationSession) OpenChannel(_party common.Address, _beneficiary common.Address, _amountToLend *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.OpenChannel(&_AccountantImplementation.TransactOpts, _party, _beneficiary, _amountToLend)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x0a798f24.
//
// Solidity: function openChannel(address _party, address _beneficiary, uint256 _amountToLend) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) OpenChannel(_party common.Address, _beneficiary common.Address, _amountToLend *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.OpenChannel(&_AccountantImplementation.TransactOpts, _party, _beneficiary, _amountToLend)
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_AccountantImplementation *AccountantImplementationTransactor) PauseChannelOpening(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "pauseChannelOpening")
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_AccountantImplementation *AccountantImplementationSession) PauseChannelOpening() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.PauseChannelOpening(&_AccountantImplementation.TransactOpts)
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) PauseChannelOpening() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.PauseChannelOpening(&_AccountantImplementation.TransactOpts)
}

// RebalanceChannel is a paid mutator transaction binding the contract method 0xefde05ec.
//
// Solidity: function rebalanceChannel(bytes32 _channelId) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) RebalanceChannel(opts *bind.TransactOpts, _channelId [32]byte) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "rebalanceChannel", _channelId)
}

// RebalanceChannel is a paid mutator transaction binding the contract method 0xefde05ec.
//
// Solidity: function rebalanceChannel(bytes32 _channelId) returns()
func (_AccountantImplementation *AccountantImplementationSession) RebalanceChannel(_channelId [32]byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.RebalanceChannel(&_AccountantImplementation.TransactOpts, _channelId)
}

// RebalanceChannel is a paid mutator transaction binding the contract method 0xefde05ec.
//
// Solidity: function rebalanceChannel(bytes32 _channelId) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) RebalanceChannel(_channelId [32]byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.RebalanceChannel(&_AccountantImplementation.TransactOpts, _channelId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AccountantImplementation *AccountantImplementationTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AccountantImplementation *AccountantImplementationSession) RenounceOwnership() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.RenounceOwnership(&_AccountantImplementation.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.RenounceOwnership(&_AccountantImplementation.TransactOpts)
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_AccountantImplementation *AccountantImplementationTransactor) ResolveEmergency(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "resolveEmergency")
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_AccountantImplementation *AccountantImplementationSession) ResolveEmergency() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.ResolveEmergency(&_AccountantImplementation.TransactOpts)
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) ResolveEmergency() (*types.Transaction, error) {
	return _AccountantImplementation.Contract.ResolveEmergency(&_AccountantImplementation.TransactOpts)
}

// SetAccountantFee is a paid mutator transaction binding the contract method 0x0996fcbc.
//
// Solidity: function setAccountantFee(uint16 _newFee) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) SetAccountantFee(opts *bind.TransactOpts, _newFee uint16) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "setAccountantFee", _newFee)
}

// SetAccountantFee is a paid mutator transaction binding the contract method 0x0996fcbc.
//
// Solidity: function setAccountantFee(uint16 _newFee) returns()
func (_AccountantImplementation *AccountantImplementationSession) SetAccountantFee(_newFee uint16) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetAccountantFee(&_AccountantImplementation.TransactOpts, _newFee)
}

// SetAccountantFee is a paid mutator transaction binding the contract method 0x0996fcbc.
//
// Solidity: function setAccountantFee(uint16 _newFee) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) SetAccountantFee(_newFee uint16) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetAccountantFee(&_AccountantImplementation.TransactOpts, _newFee)
}

// SetAccountantOperator is a paid mutator transaction binding the contract method 0x800d6afb.
//
// Solidity: function setAccountantOperator(address _newOperator) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) SetAccountantOperator(opts *bind.TransactOpts, _newOperator common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "setAccountantOperator", _newOperator)
}

// SetAccountantOperator is a paid mutator transaction binding the contract method 0x800d6afb.
//
// Solidity: function setAccountantOperator(address _newOperator) returns()
func (_AccountantImplementation *AccountantImplementationSession) SetAccountantOperator(_newOperator common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetAccountantOperator(&_AccountantImplementation.TransactOpts, _newOperator)
}

// SetAccountantOperator is a paid mutator transaction binding the contract method 0x800d6afb.
//
// Solidity: function setAccountantOperator(address _newOperator) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) SetAccountantOperator(_newOperator common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetAccountantOperator(&_AccountantImplementation.TransactOpts, _newOperator)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0x5f59def0.
//
// Solidity: function setBeneficiary(bytes32 _channelId, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) SetBeneficiary(opts *bind.TransactOpts, _channelId [32]byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "setBeneficiary", _channelId, _newBeneficiary, _nonce, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0x5f59def0.
//
// Solidity: function setBeneficiary(bytes32 _channelId, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationSession) SetBeneficiary(_channelId [32]byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetBeneficiary(&_AccountantImplementation.TransactOpts, _channelId, _newBeneficiary, _nonce, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0x5f59def0.
//
// Solidity: function setBeneficiary(bytes32 _channelId, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) SetBeneficiary(_channelId [32]byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetBeneficiary(&_AccountantImplementation.TransactOpts, _channelId, _newBeneficiary, _nonce, _signature)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) SetFundsDestination(opts *bind.TransactOpts, _newDestination common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "setFundsDestination", _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_AccountantImplementation *AccountantImplementationSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetFundsDestination(&_AccountantImplementation.TransactOpts, _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetFundsDestination(&_AccountantImplementation.TransactOpts, _newDestination)
}

// SetMaxLoan is a paid mutator transaction binding the contract method 0x456e182f.
//
// Solidity: function setMaxLoan(uint256 _newMaxLoan) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) SetMaxLoan(opts *bind.TransactOpts, _newMaxLoan *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "setMaxLoan", _newMaxLoan)
}

// SetMaxLoan is a paid mutator transaction binding the contract method 0x456e182f.
//
// Solidity: function setMaxLoan(uint256 _newMaxLoan) returns()
func (_AccountantImplementation *AccountantImplementationSession) SetMaxLoan(_newMaxLoan *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetMaxLoan(&_AccountantImplementation.TransactOpts, _newMaxLoan)
}

// SetMaxLoan is a paid mutator transaction binding the contract method 0x456e182f.
//
// Solidity: function setMaxLoan(uint256 _newMaxLoan) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) SetMaxLoan(_newMaxLoan *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SetMaxLoan(&_AccountantImplementation.TransactOpts, _newMaxLoan)
}

// SettleAndRebalance is a paid mutator transaction binding the contract method 0xf733d69d.
//
// Solidity: function settleAndRebalance(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) SettleAndRebalance(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "settleAndRebalance", _channelId, _amount, _transactorFee, _lock, _signature)
}

// SettleAndRebalance is a paid mutator transaction binding the contract method 0xf733d69d.
//
// Solidity: function settleAndRebalance(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationSession) SettleAndRebalance(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SettleAndRebalance(&_AccountantImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _signature)
}

// SettleAndRebalance is a paid mutator transaction binding the contract method 0xf733d69d.
//
// Solidity: function settleAndRebalance(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) SettleAndRebalance(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SettleAndRebalance(&_AccountantImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0xa58b2b71.
//
// Solidity: function settlePromise(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) SettlePromise(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "settlePromise", _channelId, _amount, _transactorFee, _lock, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0xa58b2b71.
//
// Solidity: function settlePromise(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationSession) SettlePromise(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SettlePromise(&_AccountantImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0xa58b2b71.
//
// Solidity: function settlePromise(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) SettlePromise(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SettlePromise(&_AccountantImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _signature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0x3e206e4d.
//
// Solidity: function settleWithBeneficiary(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _promiseSignature, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) SettleWithBeneficiary(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "settleWithBeneficiary", _channelId, _amount, _transactorFee, _lock, _promiseSignature, _newBeneficiary, _nonce, _signature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0x3e206e4d.
//
// Solidity: function settleWithBeneficiary(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _promiseSignature, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationSession) SettleWithBeneficiary(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SettleWithBeneficiary(&_AccountantImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _promiseSignature, _newBeneficiary, _nonce, _signature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0x3e206e4d.
//
// Solidity: function settleWithBeneficiary(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _promiseSignature, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) SettleWithBeneficiary(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.SettleWithBeneficiary(&_AccountantImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _promiseSignature, _newBeneficiary, _nonce, _signature)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccountantImplementation *AccountantImplementationSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.TransferOwnership(&_AccountantImplementation.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.TransferOwnership(&_AccountantImplementation.TransactOpts, newOwner)
}

// UpdateChannelBalance is a paid mutator transaction binding the contract method 0x7c2be0a3.
//
// Solidity: function updateChannelBalance(bytes32 _channelId, uint256 _newBalance) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) UpdateChannelBalance(opts *bind.TransactOpts, _channelId [32]byte, _newBalance *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "updateChannelBalance", _channelId, _newBalance)
}

// UpdateChannelBalance is a paid mutator transaction binding the contract method 0x7c2be0a3.
//
// Solidity: function updateChannelBalance(bytes32 _channelId, uint256 _newBalance) returns()
func (_AccountantImplementation *AccountantImplementationSession) UpdateChannelBalance(_channelId [32]byte, _newBalance *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.UpdateChannelBalance(&_AccountantImplementation.TransactOpts, _channelId, _newBalance)
}

// UpdateChannelBalance is a paid mutator transaction binding the contract method 0x7c2be0a3.
//
// Solidity: function updateChannelBalance(bytes32 _channelId, uint256 _newBalance) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) UpdateChannelBalance(_channelId [32]byte, _newBalance *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.UpdateChannelBalance(&_AccountantImplementation.TransactOpts, _channelId, _newBalance)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_AccountantImplementation *AccountantImplementationTransactor) Withdraw(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.contract.Transact(opts, "withdraw", _beneficiary, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_AccountantImplementation *AccountantImplementationSession) Withdraw(_beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.Withdraw(&_AccountantImplementation.TransactOpts, _beneficiary, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_AccountantImplementation *AccountantImplementationTransactorSession) Withdraw(_beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _AccountantImplementation.Contract.Withdraw(&_AccountantImplementation.TransactOpts, _beneficiary, _amount)
}

// AccountantImplementationAccountantClosedIterator is returned from FilterAccountantClosed and is used to iterate over the raw logs and unpacked data for AccountantClosed events raised by the AccountantImplementation contract.
type AccountantImplementationAccountantClosedIterator struct {
	Event *AccountantImplementationAccountantClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationAccountantClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationAccountantClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationAccountantClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationAccountantClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationAccountantClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationAccountantClosed represents a AccountantClosed event raised by the AccountantImplementation contract.
type AccountantImplementationAccountantClosed struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccountantClosed is a free log retrieval operation binding the contract event 0x888906f0892e56365e679111a6f8ba7d0742bae70d0a532641cbf0da77d5af92.
//
// Solidity: event AccountantClosed(uint256 blockNumber)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterAccountantClosed(opts *bind.FilterOpts) (*AccountantImplementationAccountantClosedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "AccountantClosed")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationAccountantClosedIterator{contract: _AccountantImplementation.contract, event: "AccountantClosed", logs: logs, sub: sub}, nil
}

// WatchAccountantClosed is a free log subscription operation binding the contract event 0x888906f0892e56365e679111a6f8ba7d0742bae70d0a532641cbf0da77d5af92.
//
// Solidity: event AccountantClosed(uint256 blockNumber)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchAccountantClosed(opts *bind.WatchOpts, sink chan<- *AccountantImplementationAccountantClosed) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "AccountantClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationAccountantClosed)
				if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountantClosed is a log parse operation binding the contract event 0x888906f0892e56365e679111a6f8ba7d0742bae70d0a532641cbf0da77d5af92.
//
// Solidity: event AccountantClosed(uint256 blockNumber)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseAccountantClosed(log types.Log) (*AccountantImplementationAccountantClosed, error) {
	event := new(AccountantImplementationAccountantClosed)
	if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantClosed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationAccountantFeeUpdatedIterator is returned from FilterAccountantFeeUpdated and is used to iterate over the raw logs and unpacked data for AccountantFeeUpdated events raised by the AccountantImplementation contract.
type AccountantImplementationAccountantFeeUpdatedIterator struct {
	Event *AccountantImplementationAccountantFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationAccountantFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationAccountantFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationAccountantFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationAccountantFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationAccountantFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationAccountantFeeUpdated represents a AccountantFeeUpdated event raised by the AccountantImplementation contract.
type AccountantImplementationAccountantFeeUpdated struct {
	NewFee         uint16
	ValidFromBlock uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAccountantFeeUpdated is a free log retrieval operation binding the contract event 0x008b9bffa5c48d8c0b96ce879f8491c5605cc3d7a46a46711b522dbe6d4070ee.
//
// Solidity: event AccountantFeeUpdated(uint16 newFee, uint64 validFromBlock)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterAccountantFeeUpdated(opts *bind.FilterOpts) (*AccountantImplementationAccountantFeeUpdatedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "AccountantFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationAccountantFeeUpdatedIterator{contract: _AccountantImplementation.contract, event: "AccountantFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchAccountantFeeUpdated is a free log subscription operation binding the contract event 0x008b9bffa5c48d8c0b96ce879f8491c5605cc3d7a46a46711b522dbe6d4070ee.
//
// Solidity: event AccountantFeeUpdated(uint16 newFee, uint64 validFromBlock)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchAccountantFeeUpdated(opts *bind.WatchOpts, sink chan<- *AccountantImplementationAccountantFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "AccountantFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationAccountantFeeUpdated)
				if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountantFeeUpdated is a log parse operation binding the contract event 0x008b9bffa5c48d8c0b96ce879f8491c5605cc3d7a46a46711b522dbe6d4070ee.
//
// Solidity: event AccountantFeeUpdated(uint16 newFee, uint64 validFromBlock)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseAccountantFeeUpdated(log types.Log) (*AccountantImplementationAccountantFeeUpdated, error) {
	event := new(AccountantImplementationAccountantFeeUpdated)
	if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantFeeUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationAccountantPunishmentActivatedIterator is returned from FilterAccountantPunishmentActivated and is used to iterate over the raw logs and unpacked data for AccountantPunishmentActivated events raised by the AccountantImplementation contract.
type AccountantImplementationAccountantPunishmentActivatedIterator struct {
	Event *AccountantImplementationAccountantPunishmentActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationAccountantPunishmentActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationAccountantPunishmentActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationAccountantPunishmentActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationAccountantPunishmentActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationAccountantPunishmentActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationAccountantPunishmentActivated represents a AccountantPunishmentActivated event raised by the AccountantImplementation contract.
type AccountantImplementationAccountantPunishmentActivated struct {
	ActivationBlock *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAccountantPunishmentActivated is a free log retrieval operation binding the contract event 0xb3e91d0895882cef621b468a8235043537ca2e4d8d91ee6587801041054107e1.
//
// Solidity: event AccountantPunishmentActivated(uint256 activationBlock)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterAccountantPunishmentActivated(opts *bind.FilterOpts) (*AccountantImplementationAccountantPunishmentActivatedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "AccountantPunishmentActivated")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationAccountantPunishmentActivatedIterator{contract: _AccountantImplementation.contract, event: "AccountantPunishmentActivated", logs: logs, sub: sub}, nil
}

// WatchAccountantPunishmentActivated is a free log subscription operation binding the contract event 0xb3e91d0895882cef621b468a8235043537ca2e4d8d91ee6587801041054107e1.
//
// Solidity: event AccountantPunishmentActivated(uint256 activationBlock)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchAccountantPunishmentActivated(opts *bind.WatchOpts, sink chan<- *AccountantImplementationAccountantPunishmentActivated) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "AccountantPunishmentActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationAccountantPunishmentActivated)
				if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantPunishmentActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountantPunishmentActivated is a log parse operation binding the contract event 0xb3e91d0895882cef621b468a8235043537ca2e4d8d91ee6587801041054107e1.
//
// Solidity: event AccountantPunishmentActivated(uint256 activationBlock)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseAccountantPunishmentActivated(log types.Log) (*AccountantImplementationAccountantPunishmentActivated, error) {
	event := new(AccountantImplementationAccountantPunishmentActivated)
	if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantPunishmentActivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationAccountantPunishmentDeactivatedIterator is returned from FilterAccountantPunishmentDeactivated and is used to iterate over the raw logs and unpacked data for AccountantPunishmentDeactivated events raised by the AccountantImplementation contract.
type AccountantImplementationAccountantPunishmentDeactivatedIterator struct {
	Event *AccountantImplementationAccountantPunishmentDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationAccountantPunishmentDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationAccountantPunishmentDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationAccountantPunishmentDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationAccountantPunishmentDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationAccountantPunishmentDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationAccountantPunishmentDeactivated represents a AccountantPunishmentDeactivated event raised by the AccountantImplementation contract.
type AccountantImplementationAccountantPunishmentDeactivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccountantPunishmentDeactivated is a free log retrieval operation binding the contract event 0x58ef313a2eb2567f3b143ff20930622dd67a0de84902cc93b7ddddd72b7773ef.
//
// Solidity: event AccountantPunishmentDeactivated()
func (_AccountantImplementation *AccountantImplementationFilterer) FilterAccountantPunishmentDeactivated(opts *bind.FilterOpts) (*AccountantImplementationAccountantPunishmentDeactivatedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "AccountantPunishmentDeactivated")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationAccountantPunishmentDeactivatedIterator{contract: _AccountantImplementation.contract, event: "AccountantPunishmentDeactivated", logs: logs, sub: sub}, nil
}

// WatchAccountantPunishmentDeactivated is a free log subscription operation binding the contract event 0x58ef313a2eb2567f3b143ff20930622dd67a0de84902cc93b7ddddd72b7773ef.
//
// Solidity: event AccountantPunishmentDeactivated()
func (_AccountantImplementation *AccountantImplementationFilterer) WatchAccountantPunishmentDeactivated(opts *bind.WatchOpts, sink chan<- *AccountantImplementationAccountantPunishmentDeactivated) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "AccountantPunishmentDeactivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationAccountantPunishmentDeactivated)
				if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantPunishmentDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountantPunishmentDeactivated is a log parse operation binding the contract event 0x58ef313a2eb2567f3b143ff20930622dd67a0de84902cc93b7ddddd72b7773ef.
//
// Solidity: event AccountantPunishmentDeactivated()
func (_AccountantImplementation *AccountantImplementationFilterer) ParseAccountantPunishmentDeactivated(log types.Log) (*AccountantImplementationAccountantPunishmentDeactivated, error) {
	event := new(AccountantImplementationAccountantPunishmentDeactivated)
	if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantPunishmentDeactivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationAccountantStakeIncreasedIterator is returned from FilterAccountantStakeIncreased and is used to iterate over the raw logs and unpacked data for AccountantStakeIncreased events raised by the AccountantImplementation contract.
type AccountantImplementationAccountantStakeIncreasedIterator struct {
	Event *AccountantImplementationAccountantStakeIncreased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationAccountantStakeIncreasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationAccountantStakeIncreased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationAccountantStakeIncreased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationAccountantStakeIncreasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationAccountantStakeIncreasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationAccountantStakeIncreased represents a AccountantStakeIncreased event raised by the AccountantImplementation contract.
type AccountantImplementationAccountantStakeIncreased struct {
	NewStake *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAccountantStakeIncreased is a free log retrieval operation binding the contract event 0x41a5bb80f9c1243f3d450690277c955ff8982168e34ed096457afdc31cefef7f.
//
// Solidity: event AccountantStakeIncreased(uint256 newStake)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterAccountantStakeIncreased(opts *bind.FilterOpts) (*AccountantImplementationAccountantStakeIncreasedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "AccountantStakeIncreased")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationAccountantStakeIncreasedIterator{contract: _AccountantImplementation.contract, event: "AccountantStakeIncreased", logs: logs, sub: sub}, nil
}

// WatchAccountantStakeIncreased is a free log subscription operation binding the contract event 0x41a5bb80f9c1243f3d450690277c955ff8982168e34ed096457afdc31cefef7f.
//
// Solidity: event AccountantStakeIncreased(uint256 newStake)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchAccountantStakeIncreased(opts *bind.WatchOpts, sink chan<- *AccountantImplementationAccountantStakeIncreased) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "AccountantStakeIncreased")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationAccountantStakeIncreased)
				if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantStakeIncreased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountantStakeIncreased is a log parse operation binding the contract event 0x41a5bb80f9c1243f3d450690277c955ff8982168e34ed096457afdc31cefef7f.
//
// Solidity: event AccountantStakeIncreased(uint256 newStake)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseAccountantStakeIncreased(log types.Log) (*AccountantImplementationAccountantStakeIncreased, error) {
	event := new(AccountantImplementationAccountantStakeIncreased)
	if err := _AccountantImplementation.contract.UnpackLog(event, "AccountantStakeIncreased", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationChannelBalanceDecreaseRequestedIterator is returned from FilterChannelBalanceDecreaseRequested and is used to iterate over the raw logs and unpacked data for ChannelBalanceDecreaseRequested events raised by the AccountantImplementation contract.
type AccountantImplementationChannelBalanceDecreaseRequestedIterator struct {
	Event *AccountantImplementationChannelBalanceDecreaseRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationChannelBalanceDecreaseRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationChannelBalanceDecreaseRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationChannelBalanceDecreaseRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationChannelBalanceDecreaseRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationChannelBalanceDecreaseRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationChannelBalanceDecreaseRequested represents a ChannelBalanceDecreaseRequested event raised by the AccountantImplementation contract.
type AccountantImplementationChannelBalanceDecreaseRequested struct {
	ChannelId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterChannelBalanceDecreaseRequested is a free log retrieval operation binding the contract event 0xaf4c616dc7856b81dbc1346e5547f0a1d4f1553011653f920d1041f215401075.
//
// Solidity: event ChannelBalanceDecreaseRequested(bytes32 indexed channelId)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterChannelBalanceDecreaseRequested(opts *bind.FilterOpts, channelId [][32]byte) (*AccountantImplementationChannelBalanceDecreaseRequestedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "ChannelBalanceDecreaseRequested", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationChannelBalanceDecreaseRequestedIterator{contract: _AccountantImplementation.contract, event: "ChannelBalanceDecreaseRequested", logs: logs, sub: sub}, nil
}

// WatchChannelBalanceDecreaseRequested is a free log subscription operation binding the contract event 0xaf4c616dc7856b81dbc1346e5547f0a1d4f1553011653f920d1041f215401075.
//
// Solidity: event ChannelBalanceDecreaseRequested(bytes32 indexed channelId)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchChannelBalanceDecreaseRequested(opts *bind.WatchOpts, sink chan<- *AccountantImplementationChannelBalanceDecreaseRequested, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "ChannelBalanceDecreaseRequested", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationChannelBalanceDecreaseRequested)
				if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelBalanceDecreaseRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelBalanceDecreaseRequested is a log parse operation binding the contract event 0xaf4c616dc7856b81dbc1346e5547f0a1d4f1553011653f920d1041f215401075.
//
// Solidity: event ChannelBalanceDecreaseRequested(bytes32 indexed channelId)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseChannelBalanceDecreaseRequested(log types.Log) (*AccountantImplementationChannelBalanceDecreaseRequested, error) {
	event := new(AccountantImplementationChannelBalanceDecreaseRequested)
	if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelBalanceDecreaseRequested", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationChannelBalanceUpdatedIterator is returned from FilterChannelBalanceUpdated and is used to iterate over the raw logs and unpacked data for ChannelBalanceUpdated events raised by the AccountantImplementation contract.
type AccountantImplementationChannelBalanceUpdatedIterator struct {
	Event *AccountantImplementationChannelBalanceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationChannelBalanceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationChannelBalanceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationChannelBalanceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationChannelBalanceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationChannelBalanceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationChannelBalanceUpdated represents a ChannelBalanceUpdated event raised by the AccountantImplementation contract.
type AccountantImplementationChannelBalanceUpdated struct {
	ChannelId  [32]byte
	NewBalance *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterChannelBalanceUpdated is a free log retrieval operation binding the contract event 0x2eb87c52e5d2d7395da77618aa1afe310b9cf13fa9f70e3199d100adda3a7aa5.
//
// Solidity: event ChannelBalanceUpdated(bytes32 indexed channelId, uint256 newBalance)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterChannelBalanceUpdated(opts *bind.FilterOpts, channelId [][32]byte) (*AccountantImplementationChannelBalanceUpdatedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "ChannelBalanceUpdated", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationChannelBalanceUpdatedIterator{contract: _AccountantImplementation.contract, event: "ChannelBalanceUpdated", logs: logs, sub: sub}, nil
}

// WatchChannelBalanceUpdated is a free log subscription operation binding the contract event 0x2eb87c52e5d2d7395da77618aa1afe310b9cf13fa9f70e3199d100adda3a7aa5.
//
// Solidity: event ChannelBalanceUpdated(bytes32 indexed channelId, uint256 newBalance)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchChannelBalanceUpdated(opts *bind.WatchOpts, sink chan<- *AccountantImplementationChannelBalanceUpdated, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "ChannelBalanceUpdated", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationChannelBalanceUpdated)
				if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelBalanceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelBalanceUpdated is a log parse operation binding the contract event 0x2eb87c52e5d2d7395da77618aa1afe310b9cf13fa9f70e3199d100adda3a7aa5.
//
// Solidity: event ChannelBalanceUpdated(bytes32 indexed channelId, uint256 newBalance)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseChannelBalanceUpdated(log types.Log) (*AccountantImplementationChannelBalanceUpdated, error) {
	event := new(AccountantImplementationChannelBalanceUpdated)
	if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelBalanceUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationChannelBeneficiaryChangedIterator is returned from FilterChannelBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for ChannelBeneficiaryChanged events raised by the AccountantImplementation contract.
type AccountantImplementationChannelBeneficiaryChangedIterator struct {
	Event *AccountantImplementationChannelBeneficiaryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationChannelBeneficiaryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationChannelBeneficiaryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationChannelBeneficiaryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationChannelBeneficiaryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationChannelBeneficiaryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationChannelBeneficiaryChanged represents a ChannelBeneficiaryChanged event raised by the AccountantImplementation contract.
type AccountantImplementationChannelBeneficiaryChanged struct {
	ChannelId      [32]byte
	NewBeneficiary common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChannelBeneficiaryChanged is a free log retrieval operation binding the contract event 0x8756aa559142225f918d7584303ecfe48e75b454f6614d0fae9f0d6ca0a898cc.
//
// Solidity: event ChannelBeneficiaryChanged(bytes32 channelId, address newBeneficiary)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterChannelBeneficiaryChanged(opts *bind.FilterOpts) (*AccountantImplementationChannelBeneficiaryChangedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "ChannelBeneficiaryChanged")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationChannelBeneficiaryChangedIterator{contract: _AccountantImplementation.contract, event: "ChannelBeneficiaryChanged", logs: logs, sub: sub}, nil
}

// WatchChannelBeneficiaryChanged is a free log subscription operation binding the contract event 0x8756aa559142225f918d7584303ecfe48e75b454f6614d0fae9f0d6ca0a898cc.
//
// Solidity: event ChannelBeneficiaryChanged(bytes32 channelId, address newBeneficiary)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchChannelBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *AccountantImplementationChannelBeneficiaryChanged) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "ChannelBeneficiaryChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationChannelBeneficiaryChanged)
				if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelBeneficiaryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelBeneficiaryChanged is a log parse operation binding the contract event 0x8756aa559142225f918d7584303ecfe48e75b454f6614d0fae9f0d6ca0a898cc.
//
// Solidity: event ChannelBeneficiaryChanged(bytes32 channelId, address newBeneficiary)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseChannelBeneficiaryChanged(log types.Log) (*AccountantImplementationChannelBeneficiaryChanged, error) {
	event := new(AccountantImplementationChannelBeneficiaryChanged)
	if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelBeneficiaryChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationChannelOpenedIterator is returned from FilterChannelOpened and is used to iterate over the raw logs and unpacked data for ChannelOpened events raised by the AccountantImplementation contract.
type AccountantImplementationChannelOpenedIterator struct {
	Event *AccountantImplementationChannelOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationChannelOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationChannelOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationChannelOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationChannelOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationChannelOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationChannelOpened represents a ChannelOpened event raised by the AccountantImplementation contract.
type AccountantImplementationChannelOpened struct {
	ChannelId      [32]byte
	InitialBalance *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChannelOpened is a free log retrieval operation binding the contract event 0xbe2e1f3a6197dfd16fa6830c4870364b618b8b288c21cbcfa4fdb5d7c6a5e45b.
//
// Solidity: event ChannelOpened(bytes32 channelId, uint256 initialBalance)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterChannelOpened(opts *bind.FilterOpts) (*AccountantImplementationChannelOpenedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "ChannelOpened")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationChannelOpenedIterator{contract: _AccountantImplementation.contract, event: "ChannelOpened", logs: logs, sub: sub}, nil
}

// WatchChannelOpened is a free log subscription operation binding the contract event 0xbe2e1f3a6197dfd16fa6830c4870364b618b8b288c21cbcfa4fdb5d7c6a5e45b.
//
// Solidity: event ChannelOpened(bytes32 channelId, uint256 initialBalance)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchChannelOpened(opts *bind.WatchOpts, sink chan<- *AccountantImplementationChannelOpened) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "ChannelOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationChannelOpened)
				if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpened is a log parse operation binding the contract event 0xbe2e1f3a6197dfd16fa6830c4870364b618b8b288c21cbcfa4fdb5d7c6a5e45b.
//
// Solidity: event ChannelOpened(bytes32 channelId, uint256 initialBalance)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseChannelOpened(log types.Log) (*AccountantImplementationChannelOpened, error) {
	event := new(AccountantImplementationChannelOpened)
	if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelOpened", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationChannelOpeningActivatedIterator is returned from FilterChannelOpeningActivated and is used to iterate over the raw logs and unpacked data for ChannelOpeningActivated events raised by the AccountantImplementation contract.
type AccountantImplementationChannelOpeningActivatedIterator struct {
	Event *AccountantImplementationChannelOpeningActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationChannelOpeningActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationChannelOpeningActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationChannelOpeningActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationChannelOpeningActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationChannelOpeningActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationChannelOpeningActivated represents a ChannelOpeningActivated event raised by the AccountantImplementation contract.
type AccountantImplementationChannelOpeningActivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChannelOpeningActivated is a free log retrieval operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_AccountantImplementation *AccountantImplementationFilterer) FilterChannelOpeningActivated(opts *bind.FilterOpts) (*AccountantImplementationChannelOpeningActivatedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "ChannelOpeningActivated")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationChannelOpeningActivatedIterator{contract: _AccountantImplementation.contract, event: "ChannelOpeningActivated", logs: logs, sub: sub}, nil
}

// WatchChannelOpeningActivated is a free log subscription operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_AccountantImplementation *AccountantImplementationFilterer) WatchChannelOpeningActivated(opts *bind.WatchOpts, sink chan<- *AccountantImplementationChannelOpeningActivated) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "ChannelOpeningActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationChannelOpeningActivated)
				if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelOpeningActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpeningActivated is a log parse operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_AccountantImplementation *AccountantImplementationFilterer) ParseChannelOpeningActivated(log types.Log) (*AccountantImplementationChannelOpeningActivated, error) {
	event := new(AccountantImplementationChannelOpeningActivated)
	if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelOpeningActivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationChannelOpeningPausedIterator is returned from FilterChannelOpeningPaused and is used to iterate over the raw logs and unpacked data for ChannelOpeningPaused events raised by the AccountantImplementation contract.
type AccountantImplementationChannelOpeningPausedIterator struct {
	Event *AccountantImplementationChannelOpeningPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationChannelOpeningPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationChannelOpeningPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationChannelOpeningPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationChannelOpeningPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationChannelOpeningPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationChannelOpeningPaused represents a ChannelOpeningPaused event raised by the AccountantImplementation contract.
type AccountantImplementationChannelOpeningPaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChannelOpeningPaused is a free log retrieval operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_AccountantImplementation *AccountantImplementationFilterer) FilterChannelOpeningPaused(opts *bind.FilterOpts) (*AccountantImplementationChannelOpeningPausedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "ChannelOpeningPaused")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationChannelOpeningPausedIterator{contract: _AccountantImplementation.contract, event: "ChannelOpeningPaused", logs: logs, sub: sub}, nil
}

// WatchChannelOpeningPaused is a free log subscription operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_AccountantImplementation *AccountantImplementationFilterer) WatchChannelOpeningPaused(opts *bind.WatchOpts, sink chan<- *AccountantImplementationChannelOpeningPaused) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "ChannelOpeningPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationChannelOpeningPaused)
				if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelOpeningPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpeningPaused is a log parse operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_AccountantImplementation *AccountantImplementationFilterer) ParseChannelOpeningPaused(log types.Log) (*AccountantImplementationChannelOpeningPaused, error) {
	event := new(AccountantImplementationChannelOpeningPaused)
	if err := _AccountantImplementation.contract.UnpackLog(event, "ChannelOpeningPaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationDestinationChangedIterator is returned from FilterDestinationChanged and is used to iterate over the raw logs and unpacked data for DestinationChanged events raised by the AccountantImplementation contract.
type AccountantImplementationDestinationChangedIterator struct {
	Event *AccountantImplementationDestinationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationDestinationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationDestinationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationDestinationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationDestinationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationDestinationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationDestinationChanged represents a DestinationChanged event raised by the AccountantImplementation contract.
type AccountantImplementationDestinationChanged struct {
	PreviousDestination common.Address
	NewDestination      common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDestinationChanged is a free log retrieval operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterDestinationChanged(opts *bind.FilterOpts, previousDestination []common.Address, newDestination []common.Address) (*AccountantImplementationDestinationChangedIterator, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationDestinationChangedIterator{contract: _AccountantImplementation.contract, event: "DestinationChanged", logs: logs, sub: sub}, nil
}

// WatchDestinationChanged is a free log subscription operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchDestinationChanged(opts *bind.WatchOpts, sink chan<- *AccountantImplementationDestinationChanged, previousDestination []common.Address, newDestination []common.Address) (event.Subscription, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationDestinationChanged)
				if err := _AccountantImplementation.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDestinationChanged is a log parse operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseDestinationChanged(log types.Log) (*AccountantImplementationDestinationChanged, error) {
	event := new(AccountantImplementationDestinationChanged)
	if err := _AccountantImplementation.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationFundsWithdrawnedIterator is returned from FilterFundsWithdrawned and is used to iterate over the raw logs and unpacked data for FundsWithdrawned events raised by the AccountantImplementation contract.
type AccountantImplementationFundsWithdrawnedIterator struct {
	Event *AccountantImplementationFundsWithdrawned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationFundsWithdrawnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationFundsWithdrawned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationFundsWithdrawned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationFundsWithdrawnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationFundsWithdrawnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationFundsWithdrawned represents a FundsWithdrawned event raised by the AccountantImplementation contract.
type AccountantImplementationFundsWithdrawned struct {
	Amount      *big.Int
	Beneficiary common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterFundsWithdrawned is a free log retrieval operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterFundsWithdrawned(opts *bind.FilterOpts) (*AccountantImplementationFundsWithdrawnedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "FundsWithdrawned")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationFundsWithdrawnedIterator{contract: _AccountantImplementation.contract, event: "FundsWithdrawned", logs: logs, sub: sub}, nil
}

// WatchFundsWithdrawned is a free log subscription operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchFundsWithdrawned(opts *bind.WatchOpts, sink chan<- *AccountantImplementationFundsWithdrawned) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "FundsWithdrawned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationFundsWithdrawned)
				if err := _AccountantImplementation.contract.UnpackLog(event, "FundsWithdrawned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsWithdrawned is a log parse operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseFundsWithdrawned(log types.Log) (*AccountantImplementationFundsWithdrawned, error) {
	event := new(AccountantImplementationFundsWithdrawned)
	if err := _AccountantImplementation.contract.UnpackLog(event, "FundsWithdrawned", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationMaxLoanValueUpdatedIterator is returned from FilterMaxLoanValueUpdated and is used to iterate over the raw logs and unpacked data for MaxLoanValueUpdated events raised by the AccountantImplementation contract.
type AccountantImplementationMaxLoanValueUpdatedIterator struct {
	Event *AccountantImplementationMaxLoanValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationMaxLoanValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationMaxLoanValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationMaxLoanValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationMaxLoanValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationMaxLoanValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationMaxLoanValueUpdated represents a MaxLoanValueUpdated event raised by the AccountantImplementation contract.
type AccountantImplementationMaxLoanValueUpdated struct {
	NewMaxLoan *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMaxLoanValueUpdated is a free log retrieval operation binding the contract event 0x2181d8ed90eadf541579998852434d883f30ace513163bbe0e4115b29afb517a.
//
// Solidity: event MaxLoanValueUpdated(uint256 _newMaxLoan)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterMaxLoanValueUpdated(opts *bind.FilterOpts) (*AccountantImplementationMaxLoanValueUpdatedIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "MaxLoanValueUpdated")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationMaxLoanValueUpdatedIterator{contract: _AccountantImplementation.contract, event: "MaxLoanValueUpdated", logs: logs, sub: sub}, nil
}

// WatchMaxLoanValueUpdated is a free log subscription operation binding the contract event 0x2181d8ed90eadf541579998852434d883f30ace513163bbe0e4115b29afb517a.
//
// Solidity: event MaxLoanValueUpdated(uint256 _newMaxLoan)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchMaxLoanValueUpdated(opts *bind.WatchOpts, sink chan<- *AccountantImplementationMaxLoanValueUpdated) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "MaxLoanValueUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationMaxLoanValueUpdated)
				if err := _AccountantImplementation.contract.UnpackLog(event, "MaxLoanValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaxLoanValueUpdated is a log parse operation binding the contract event 0x2181d8ed90eadf541579998852434d883f30ace513163bbe0e4115b29afb517a.
//
// Solidity: event MaxLoanValueUpdated(uint256 _newMaxLoan)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseMaxLoanValueUpdated(log types.Log) (*AccountantImplementationMaxLoanValueUpdated, error) {
	event := new(AccountantImplementationMaxLoanValueUpdated)
	if err := _AccountantImplementation.contract.UnpackLog(event, "MaxLoanValueUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationNewAccountantOperatorIterator is returned from FilterNewAccountantOperator and is used to iterate over the raw logs and unpacked data for NewAccountantOperator events raised by the AccountantImplementation contract.
type AccountantImplementationNewAccountantOperatorIterator struct {
	Event *AccountantImplementationNewAccountantOperator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationNewAccountantOperatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationNewAccountantOperator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationNewAccountantOperator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationNewAccountantOperatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationNewAccountantOperatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationNewAccountantOperator represents a NewAccountantOperator event raised by the AccountantImplementation contract.
type AccountantImplementationNewAccountantOperator struct {
	NewOperator common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewAccountantOperator is a free log retrieval operation binding the contract event 0xa326c787c51b80574c7b572d0c9664e64f1107538b902f519a896901b4137918.
//
// Solidity: event NewAccountantOperator(address newOperator)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterNewAccountantOperator(opts *bind.FilterOpts) (*AccountantImplementationNewAccountantOperatorIterator, error) {

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "NewAccountantOperator")
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationNewAccountantOperatorIterator{contract: _AccountantImplementation.contract, event: "NewAccountantOperator", logs: logs, sub: sub}, nil
}

// WatchNewAccountantOperator is a free log subscription operation binding the contract event 0xa326c787c51b80574c7b572d0c9664e64f1107538b902f519a896901b4137918.
//
// Solidity: event NewAccountantOperator(address newOperator)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchNewAccountantOperator(opts *bind.WatchOpts, sink chan<- *AccountantImplementationNewAccountantOperator) (event.Subscription, error) {

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "NewAccountantOperator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationNewAccountantOperator)
				if err := _AccountantImplementation.contract.UnpackLog(event, "NewAccountantOperator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewAccountantOperator is a log parse operation binding the contract event 0xa326c787c51b80574c7b572d0c9664e64f1107538b902f519a896901b4137918.
//
// Solidity: event NewAccountantOperator(address newOperator)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseNewAccountantOperator(log types.Log) (*AccountantImplementationNewAccountantOperator, error) {
	event := new(AccountantImplementationNewAccountantOperator)
	if err := _AccountantImplementation.contract.UnpackLog(event, "NewAccountantOperator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationNewLoanIterator is returned from FilterNewLoan and is used to iterate over the raw logs and unpacked data for NewLoan events raised by the AccountantImplementation contract.
type AccountantImplementationNewLoanIterator struct {
	Event *AccountantImplementationNewLoan // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationNewLoanIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationNewLoan)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationNewLoan)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationNewLoanIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationNewLoanIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationNewLoan represents a NewLoan event raised by the AccountantImplementation contract.
type AccountantImplementationNewLoan struct {
	ChannelId  [32]byte
	LoanAmount *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterNewLoan is a free log retrieval operation binding the contract event 0x9839fd1896801c6864456fe7cbd098b1e4a81dba19536764cea53a1fb07ed239.
//
// Solidity: event NewLoan(bytes32 indexed channelId, uint256 loanAmount)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterNewLoan(opts *bind.FilterOpts, channelId [][32]byte) (*AccountantImplementationNewLoanIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "NewLoan", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationNewLoanIterator{contract: _AccountantImplementation.contract, event: "NewLoan", logs: logs, sub: sub}, nil
}

// WatchNewLoan is a free log subscription operation binding the contract event 0x9839fd1896801c6864456fe7cbd098b1e4a81dba19536764cea53a1fb07ed239.
//
// Solidity: event NewLoan(bytes32 indexed channelId, uint256 loanAmount)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchNewLoan(opts *bind.WatchOpts, sink chan<- *AccountantImplementationNewLoan, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "NewLoan", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationNewLoan)
				if err := _AccountantImplementation.contract.UnpackLog(event, "NewLoan", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewLoan is a log parse operation binding the contract event 0x9839fd1896801c6864456fe7cbd098b1e4a81dba19536764cea53a1fb07ed239.
//
// Solidity: event NewLoan(bytes32 indexed channelId, uint256 loanAmount)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseNewLoan(log types.Log) (*AccountantImplementationNewLoan, error) {
	event := new(AccountantImplementationNewLoan)
	if err := _AccountantImplementation.contract.UnpackLog(event, "NewLoan", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the AccountantImplementation contract.
type AccountantImplementationOwnershipTransferredIterator struct {
	Event *AccountantImplementationOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationOwnershipTransferred represents a OwnershipTransferred event raised by the AccountantImplementation contract.
type AccountantImplementationOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AccountantImplementationOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationOwnershipTransferredIterator{contract: _AccountantImplementation.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AccountantImplementationOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationOwnershipTransferred)
				if err := _AccountantImplementation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AccountantImplementation *AccountantImplementationFilterer) ParseOwnershipTransferred(log types.Log) (*AccountantImplementationOwnershipTransferred, error) {
	event := new(AccountantImplementationOwnershipTransferred)
	if err := _AccountantImplementation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// AccountantImplementationPromiseSettledIterator is returned from FilterPromiseSettled and is used to iterate over the raw logs and unpacked data for PromiseSettled events raised by the AccountantImplementation contract.
type AccountantImplementationPromiseSettledIterator struct {
	Event *AccountantImplementationPromiseSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccountantImplementationPromiseSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccountantImplementationPromiseSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccountantImplementationPromiseSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccountantImplementationPromiseSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccountantImplementationPromiseSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccountantImplementationPromiseSettled represents a PromiseSettled event raised by the AccountantImplementation contract.
type AccountantImplementationPromiseSettled struct {
	ChannelId    [32]byte
	Beneficiary  common.Address
	Amount       *big.Int
	TotalSettled *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterPromiseSettled is a free log retrieval operation binding the contract event 0xa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668.
//
// Solidity: event PromiseSettled(bytes32 indexed channelId, address beneficiary, uint256 amount, uint256 totalSettled)
func (_AccountantImplementation *AccountantImplementationFilterer) FilterPromiseSettled(opts *bind.FilterOpts, channelId [][32]byte) (*AccountantImplementationPromiseSettledIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _AccountantImplementation.contract.FilterLogs(opts, "PromiseSettled", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &AccountantImplementationPromiseSettledIterator{contract: _AccountantImplementation.contract, event: "PromiseSettled", logs: logs, sub: sub}, nil
}

// WatchPromiseSettled is a free log subscription operation binding the contract event 0xa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668.
//
// Solidity: event PromiseSettled(bytes32 indexed channelId, address beneficiary, uint256 amount, uint256 totalSettled)
func (_AccountantImplementation *AccountantImplementationFilterer) WatchPromiseSettled(opts *bind.WatchOpts, sink chan<- *AccountantImplementationPromiseSettled, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _AccountantImplementation.contract.WatchLogs(opts, "PromiseSettled", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccountantImplementationPromiseSettled)
				if err := _AccountantImplementation.contract.UnpackLog(event, "PromiseSettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromiseSettled is a log parse operation binding the contract event 0xa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668.
//
// Solidity: event PromiseSettled(bytes32 indexed channelId, address beneficiary, uint256 amount, uint256 totalSettled)
func (_AccountantImplementation *AccountantImplementationFilterer) ParsePromiseSettled(log types.Log) (*AccountantImplementationPromiseSettled, error) {
	event := new(AccountantImplementationPromiseSettled)
	if err := _AccountantImplementation.contract.UnpackLog(event, "PromiseSettled", log); err != nil {
		return nil, err
	}
	return event, nil
}
