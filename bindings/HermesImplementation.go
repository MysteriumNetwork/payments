/* Mysterium network payment library.
 *
 * Copyright (C) 2020 BlockDev AG
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// HermesImplementationABI is the input ABI used to generate the binding from.
const HermesImplementationABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"}],\"name\":\"ChannelBalanceDecreaseRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"ChannelBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"ChannelBeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"}],\"name\":\"ChannelOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChannelOpeningActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChannelOpeningPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"DestinationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"FundsWithdrawned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"HermesClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"validFromBlock\",\"type\":\"uint64\"}],\"name\":\"HermesFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"}],\"name\":\"HermesPunishmentActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HermesPunishmentDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"HermesStakeIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxStake\",\"type\":\"uint256\"}],\"name\":\"MaxStakeValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinStake\",\"type\":\"uint256\"}],\"name\":\"MinStakeValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"NewHermesOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSettled\",\"type\":\"uint256\"}],\"name\":\"PromiseSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"channelId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakeGoal\",\"type\":\"uint256\"}],\"name\":\"StakeGoalUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUsedNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEthers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"value\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punishment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getChannelId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHermesStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enumHermesImplementation.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToLend\",\"type\":\"uint256\"}],\"name\":\"openChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settlePromise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settleAndRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_promiseSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settleWithBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_promiseSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_newStakeGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_goalChangeSignature\",\"type\":\"bytes\"}],\"name\":\"settleWithGoalIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newBalance\",\"type\":\"uint256\"}],\"name\":\"updateChannelBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"}],\"name\":\"rebalanceChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lock\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"settleIntoStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"decreaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newStakeGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"updateStakeGoal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolveEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setHermesOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxStake\",\"type\":\"uint256\"}],\"name\":\"setMaxStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newFee\",\"type\":\"uint16\"}],\"name\":\"setHermesFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateHermesFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_additionalStake\",\"type\":\"uint256\"}],\"name\":\"increaseHermesStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_channelId\",\"type\":\"bytes32\"}],\"name\":\"isChannelOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isHermesActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseChannelOpening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateChannelOpening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalExpectedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeHermes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getStakeBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newDestination\",\"type\":\"address\"}],\"name\":\"setFundsDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// HermesImplementationBin is the compiled bytecode used for deploying new contracts.
var HermesImplementationBin = "0x608060405234801561001057600080fd5b50614c8f806100206000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c806394c7915d11610167578063df8de3e7116100ce578063efde05ec11610087578063efde05ec14610d95578063f2fde38b14610db2578063f3fef3a314610dd8578063f58c5b6e14610e04578063fbb46b9814610e0c578063fc0c546a14610e14576102a0565b8063df8de3e714610c7a578063e1c6648714610ca0578063e58473f214610ca8578063e7f43c6814610cb0578063ea48d8bf14610cb8578063eb295b2714610d6f576102a0565b8063ae10ed8411610120578063ae10ed841461092e578063b07d94831461094b578063bc96a1e914610a10578063c062fe0614610a18578063cc44905414610ad4578063d740dd4414610c34576102a0565b806394c7915d146108235780639801134e1461082b5780639ed9903e1461085a578063aa606dee14610862578063ab2f0e511461086a578063ac7d01b614610872576102a0565b80634e69d5601161020b5780636fc14837116101c45780636fc1483714610757578063715018a6146107745780637a7ebd7b1461077c5780637c2be0a3146107db5780638c80fd90146107fe5780638da5cb5b1461081b576102a0565b80634e69d560146105fc5780635ab1bd53146106285780635f59def01461064c5780636138dda71461070c5780636931b550146107325780636e9094ea1461073a576102a0565b8063238e130a1161025d578063238e130a146104a9578063306db49b146104cf57806338df1024146104d7578063392e53cd146104f857806339f976261461051457806348d9f01e14610537576102a0565b80630684cd20146102a55780630a798f24146102c65780630b9a91c1146102fe57806315c73afd1461044c5780631f4f12c6146104545780632055536a14610483575b600080fd5b6102ad610e1c565b6040805192835260208301919091528051918290030190f35b6102fc600480360360608110156102dc57600080fd5b506001600160a01b03813581169160208101359091169060400135610e25565b005b6102fc600480360361010081101561031557600080fd5b81359160208101359160408201359160608101359181019060a081016080820135600160201b81111561034757600080fd5b82018360208201111561035957600080fd5b803590602001918460018302840111600160201b8311171561037a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295843595602086013595919450925060608101915060400135600160201b8111156103d857600080fd5b8201836020820111156103ea57600080fd5b803590602001918460018302840111600160201b8311171561040b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ef3945050505050565b6102fc610f16565b6104716004803603602081101561046a57600080fd5b5035611195565b60408051918252519081900360200190f35b6102fc6004803603602081101561049957600080fd5b50356001600160a01b0316611212565b6102fc600480360360208110156104bf57600080fd5b50356001600160a01b0316611302565b6104716113ba565b6102fc600480360360208110156104ed57600080fd5b503561ffff166113c1565b6105006115e8565b604080519115158252519081900360200190f35b6102fc6004803603604081101561052a57600080fd5b50803590602001356115f9565b6102fc600480360360a081101561054d57600080fd5b6001600160a01b038235169160208101359160408201359160608101359181019060a081016080820135600160201b81111561058857600080fd5b82018360208201111561059a57600080fd5b803590602001918460018302840111600160201b831117156105bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611707945050505050565b6106046117c9565b6040518082600381111561061457fe5b60ff16815260200191505060405180910390f35b6106306117d2565b604080516001600160a01b039092168252519081900360200190f35b6102fc6004803603608081101561066257600080fd5b8135916001600160a01b036020820135169160408201359190810190608081016060820135600160201b81111561069857600080fd5b8201836020820111156106aa57600080fd5b803590602001918460018302840111600160201b831117156106cb57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506117e1945050505050565b6102fc6004803603602081101561072257600080fd5b50356001600160a01b03166119ce565b6102fc611bcf565b6105006004803603602081101561075057600080fd5b5035611c20565b6102fc6004803603602081101561076d57600080fd5b5035611c3d565b6102fc611d54565b6107996004803603602081101561079257600080fd5b5035611e11565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6102fc600480360360408110156107f157600080fd5b5080359060200135611e58565b6102fc6004803603602081101561081457600080fd5b50356120f2565b610630612209565b610471612218565b610833612236565b6040805161ffff909316835267ffffffffffffffff90911660208301528051918290030190f35b6102ad612252565b6102fc61225c565b61047161232e565b6102fc600480360360a081101561088857600080fd5b81359160208101359160408201359160608101359181019060a081016080820135600160201b8111156108ba57600080fd5b8201836020820111156108cc57600080fd5b803590602001918460018302840111600160201b831117156108ed57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612427945050505050565b6102fc6004803603602081101561094457600080fd5b50356129d6565b6102fc600480360360a081101561096157600080fd5b6001600160a01b038235169160208101359160408201359160608101359181019060a081016080820135600160201b81111561099c57600080fd5b8201836020820111156109ae57600080fd5b803590602001918460018302840111600160201b831117156109cf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612b20945050505050565b610500612be3565b6102fc600480360360a0811015610a2e57600080fd5b81359160208101359160408201359160608101359181019060a081016080820135600160201b811115610a6057600080fd5b820183602082011115610a7257600080fd5b803590602001918460018302840111600160201b83111715610a9357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612c1d945050505050565b6102fc6004803603610100811015610aeb57600080fd5b6001600160a01b038235169160208101359160408201359160608101359181019060a081016080820135600160201b811115610b2657600080fd5b820183602082011115610b3857600080fd5b803590602001918460018302840111600160201b83111715610b5957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092956001600160a01b0385351695602086013595919450925060608101915060400135600160201b811115610bc057600080fd5b820183602082011115610bd257600080fd5b803590602001918460018302840111600160201b83111715610bf357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612ecc945050505050565b6102fc600480360360a0811015610c4a57600080fd5b506001600160a01b03813581169160208101359091169061ffff6040820135169060608101359060800135612f14565b6102fc60048036036020811015610c9057600080fd5b50356001600160a01b03166131a6565b6108336132d7565b6102fc6132f3565b6106306133e2565b6102fc60048036036080811015610cce57600080fd5b81359160208101359160408201359190810190608081016060820135600160201b811115610cfb57600080fd5b820183602082011115610d0d57600080fd5b803590602001918460018302840111600160201b83111715610d2e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506133f1945050505050565b61047160048036036020811015610d8557600080fd5b50356001600160a01b031661362b565b6102fc60048036036020811015610dab57600080fd5b503561366f565b6102fc60048036036020811015610dc857600080fd5b50356001600160a01b031661387a565b6102fc60048036036040811015610dee57600080fd5b506001600160a01b03813516906020013561398d565b610630613b39565b6102fc613b48565b610630613c17565b600f5460105482565b6003546001600160a01b03163314610e84576040805162461bcd60e51b815260206004820152601f60248201527f6f6e6c792072656769737472792063616e206f70656e206368616e6e656c7300604482015290519081900360640190fd5b6000610e8e6117c9565b6003811115610e9957fe5b14610ed55760405162461bcd60e51b815260040180806020018281038252602181526020018061497f6021913960400191505060405180910390fd5b6000610ee08461362b565b9050610eed818484613c26565b50505050565b610eff888484846133f1565b610f0c8888888888613cf4565b5050505050505050565b6002610f206117c9565b6003811115610f2b57fe5b14610f675760405162461bcd60e51b81526004018080602001828103825260258152602001806147ef6025913960400191505060405180910390fd5b6000610f9a6064610f8e610f8760046005546140d490919063ffffffff16565b6064614136565b9063ffffffff61415016565b90506000610fa6614192565b600f5490915043036000610fd4600184610fc08582614136565b81610fc757fe5b049063ffffffff61419816565b90506000610fe8828663ffffffff6140d416565b601054909150610ffe908263ffffffff6141da16565b60108190556009546000916110309161101691614234565b611024600554600654614234565b9063ffffffff6141da16565b600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561108157600080fd5b505afa158015611095573d6000803e3d6000fd5b505050506040513d60208110156110ab57600080fd5b5051905060008282106110bf5760006110cf565b6110cf838363ffffffff61419816565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b15801561112c57600080fd5b505af1158015611140573d6000803e3d6000fd5b505050506040513d602081101561115657600080fd5b5050600b805460ff191690556040517f5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c90600090a15050505050505050565b600061119f61476d565b600c5462010000900467ffffffffffffffff164310156111c057600d6111c3565b600c5b60408051808201909152905461ffff81168083526201000090910467ffffffffffffffff1660208301529091506064906112039082908602046064614136565b8161120a57fe5b049392505050565b6004546001600160a01b0316331461125b5760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b6001600160a01b0381166112ae576040805162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b604482015290519081900360640190fd5b600480546001600160a01b0383166001600160a01b0319909116811790915560408051918252517fbc84399c3fec552aa29d6b02eefe7180532020bf40739f24e0b8a6fc4035455e9181900360200190a150565b6004546001600160a01b0316331461134b5760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b6001600160a01b03811661135e57600080fd5b6001546040516001600160a01b038084169216907fe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6009545b90565b6004546001600160a01b0316331461140a5760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b60036114146117c9565b600381111561141f57fe5b1415611472576040805162461bcd60e51b815260206004820152601b60248201527f6865726d65732073686f756c64206265206e6f7420636c6f7365640000000000604482015290519081900360640190fd5b6113888161ffff1611156114cd576040805162461bcd60e51b815260206004820152601c60248201527f6665652063616e27742062652062696767657220746861742035302500000000604482015290519081900360640190fd5b600c5462010000900467ffffffffffffffff16431015611534576040805162461bcd60e51b815260206004820152601960248201527f63616e27742075706461746520696e6163746976652066656500000000000000604482015290519081900360640190fd5b600061153e61424a565b600c8054600d805467ffffffffffffffff620100008085048216810269ffffffffffffffff00001961ffff1994851661ffff80891691909117821692909217909555604080518082018252918b1680835293891660209283018190529283029490961683179094169290921790945582519384529083015280519293507fea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b92918290030190a15050565b6004546001600160a01b0316151590565b61160282611c20565b61164e576040805162461bcd60e51b815260206004820152601860248201527718da185b9b995b081a185cc81d1bc81899481bdc195b995960421b604482015290519081900360640190fd5b60036116586117c9565b600381111561166357fe5b14156116b6576040805162461bcd60e51b815260206004820152601b60248201527f6865726d65732073686f756c64206265206e6f7420636c6f7365640000000000604482015290519081900360640190fd5b6116c282826000614252565b6000828152600e6020908152604091829020600381015460018201819055835190815292519092859260008051602061493483398151915292918290030190a2505050565b60006117128661362b565b905061171d81611c20565b6117b45760035460408051633985eaab60e21b81526001600160a01b0389811660048301523060248301529151600093929092169163e617aaac91604480820192602092909190829003018186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d60208110156117a257600080fd5b505190506117b282826000613c26565b505b6117c18186868686613cf4565b505050505050565b600b5460ff1690565b6003546001600160a01b031690565b6117ea84611c20565b611836576040805162461bcd60e51b815260206004820152601860248201527718da185b9b995b081a185cc81d1bc81899481bdc195b995960421b604482015290519081900360640190fd5b6001600160a01b03831661187b5760405162461bcd60e51b81526004018080602001828103825260218152602001806149c86021913960400191505060405180910390fd5b6000848152600e60205260409020600581015483116118cb5760405162461bcd60e51b81526004018080602001828103825260298152602001806148e96029913960400191505060405180910390fd5b6040805160208082018890526bffffffffffffffffffffffff19606088901b168284015260548083018790528351808403909101815260749092019092528051910120600090611921908463ffffffff61447216565b90508561192d8261362b565b146119695760405162461bcd60e51b8152600401808060200182810382526022815260200180614b756022913960400191505060405180910390fd5b6005820184905581546001600160a01b0319166001600160a01b038616908117835560408051888152602081019290925280517f8756aa559142225f918d7584303ecfe48e75b454f6614d0fae9f0d6ca0a898cc9281900390910190a1505050505050565b6004546001600160a01b03163314611a175760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b6003611a216117c9565b6003811115611a2c57fe5b14611a7e576040805162461bcd60e51b815260206004820152601860248201527f6865726d6573206861766520746f20626520636c6f7365640000000000000000604482015290519081900360640190fd5b600a544311611abe5760405162461bcd60e51b81526004018080602001828103825260268152602001806149e96026913960400191505060405180910390fd5b601054600254604080516370a0823160e01b81523060048201529051600093611b4d9390926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015611b1557600080fd5b505afa158015611b29573d6000803e3d6000fd5b505050506040513d6020811015611b3f57600080fd5b50519063ffffffff61419816565b6002546040805163a9059cbb60e01b81526001600160a01b03868116600483015260248201859052915193945091169163a9059cbb916044808201926020929091908290030181600087803b158015611ba557600080fd5b505af1158015611bb9573d6000803e3d6000fd5b505050506040513d6020811015610eed57600080fd5b6001546001600160a01b0316611be457600080fd5b6001546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015611c1d573d6000803e3d6000fd5b50565b6000908152600e60205260409020546001600160a01b0316151590565b6004546001600160a01b03163314611c865760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b611c8e612be3565b611cd9576040805162461bcd60e51b81526020600482015260176024820152766865726d65732068617320746f2062652061637469766560481b604482015290519081900360640190fd5b6007548111611d195760405162461bcd60e51b8152600401808060200182810382526027815260200180614ad56027913960400191505060405180910390fd5b60088190556040805182815290517f53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d9181900360200190a150565b6000546001600160a01b0316331480611d7657506000546001600160a01b0316155b611dc7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600e6020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169593949293919290919087565b6004546001600160a01b03163314611ea15760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b611ea9612be3565b611ef4576040805162461bcd60e51b81526020600482015260176024820152766865726d65732068617320746f2062652061637469766560481b604482015290519081900360640190fd5b611efd82611c20565b611f49576040805162461bcd60e51b815260206004820152601860248201527718da185b9b995b081a185cc81d1bc81899481bdc195b995960421b604482015290519081900360640190fd5b6000828152600e6020526040902060030154811015611f995760405162461bcd60e51b81526004018080602001828103825260278152602001806147856027913960400191505060405180910390fd5b6000828152600e60205260408120600181015490919083111561202f576001820154611fcc90849063ffffffff61419816565b905080611fd761232e565b10156120145760405162461bcd60e51b81526004018080602001828103825260228152602001806147ac6022913960400191505060405180910390fd5b600554612027908263ffffffff6141da16565b6005556120c0565b60068201546120775761204061424a565b600683015560405184907faf4c616dc7856b81dbc1346e5547f0a1d4f1553011653f920d1041f21540107590600090a250506120ee565b816006015443101561208a5750506120ee565b600182015461209f908463ffffffff61419816565b6005549091506120b5908263ffffffff61419816565b600555600060068301555b600182018390556040805184815290518591600080516020614934833981519152919081900360200190a250505b5050565b6004546001600160a01b0316331461213b5760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b612143612be3565b61218e576040805162461bcd60e51b81526020600482015260176024820152766865726d65732068617320746f2062652061637469766560481b604482015290519081900360640190fd5b60085481106121ce5760405162461bcd60e51b81526004018080602001828103825260288152602001806149a06028913960400191505060405180910390fd5b60078190556040805182815290517fb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb0312519181900360200190a150565b6000546001600160a01b031690565b6000612231600554611024600954600f60010154614234565b905090565b600c5461ffff81169062010000900467ffffffffffffffff1682565b6007546008549091565b6004546001600160a01b031633146122a55760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b60006122af6117c9565b60038111156122ba57fe5b146122f65760405162461bcd60e51b815260040180806020018281038252602181526020018061497f6021913960400191505060405180910390fd5b600b805460ff191660011790556040517f1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e90600090a1565b600080612345611016600954600f60010154614234565b600254604080516370a0823160e01b815230600482015290519293506001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561239357600080fd5b505afa1580156123a7573d6000803e3d6000fd5b505050506040513d60208110156123bd57600080fd5b50518111156123d05760009150506113be565b600254604080516370a0823160e01b815230600482015290516124219284926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015611b1557600080fd5b91505090565b60006124e8826040518060400160405280601481526020017314dd185ad9481c995d1d5c9b881c995c5d595cdd60621b815250888888886040516020018086805190602001908083835b602083106124905780518252601f199092019160209182019101612471565b51815160209384036101000a6000190180199092169116179052920196875250858101949094525060408085019290925260608085019190915281518085039091018152608090930190528151910120919050614472565b9050856124f48261362b565b146125305760405162461bcd60e51b8152600401808060200182810382526022815260200180614b756022913960400191505060405180910390fd5b61253986611c20565b612585576040805162461bcd60e51b815260206004820152601860248201527718da185b9b995b081a185cc81d1bc81899481bdc195b995960421b604482015290519081900360640190fd5b6000868152600e60205260409020600581015484116125d55760405162461bcd60e51b8152600401808060200182810382526028815260200180614b976028913960400191505060405180910390fd5b60058101849055600381015486111561261f5760405162461bcd60e51b815260040180806020018281038252602a81526020018061485e602a913960400191505060405180910390fd5b8486101561265e5760405162461bcd60e51b815260040180806020018281038252602b815260200180614a0f602b913960400191505060405180910390fd5b600061266e826001015488614659565b9050600061268a8261267e612218565b9063ffffffff61419816565b600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156126db57600080fd5b505afa1580156126ef573d6000803e3d6000fd5b505050506040513d602081101561270557600080fd5b5051905080891180612725575081612723828b63ffffffff61419816565b105b1561279157612732612be3565b1561277e57600b805460ff1916600217905543600f81905560408051918252517f23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629916020908290030190a15b61278e818363ffffffff61419816565b98505b60038401546000906127a9908b63ffffffff61419816565b90506008548111156127ec5760405162461bcd60e51b8152600401808060200182810382526033815260200180614bbf6033913960400191505060405180910390fd5b8815612873576002546040805163a9059cbb60e01b8152336004820152602481018c905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561284657600080fd5b505af115801561285a573d6000803e3d6000fd5b505050506040513d602081101561287057600080fd5b50505b60025485546001600160a01b039182169163a9059cbb911661289b8d8d63ffffffff61419816565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156128ea57600080fd5b505af11580156128fe573d6000803e3d6000fd5b505050506040513d602081101561291457600080fd5b5050600385018190556001850154612932908563ffffffff61419816565b60018601556007546004860155600554612952908563ffffffff61419816565b600555600654612968908b63ffffffff61419816565b600655600185015460408051918252518c91600080516020614934833981519152919081900360200190a26040805182815290518c917fc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb919081900360200190a25050505050505050505050565b6004546001600160a01b03163314612a1f5760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b80612a2861232e565b1015612ad3576000612a48612a3b61232e565b839063ffffffff61419816565b600254604080516323b872dd60e01b81523360048201523060248201526044810184905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b158015612aa557600080fd5b505af1158015612ab9573d6000803e3d6000fd5b505050506040513d6020811015612acf57600080fd5b5050505b600954612ae6908263ffffffff6141da16565b600981905560408051918252517feb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed919181900360200190a150565b6000612b2b8661362b565b9050612b3681611c20565b612bcd5760035460408051633985eaab60e21b81526001600160a01b0389811660048301523060248301529151600093929092169163e617aaac91604480820192602092909190829003018186803b158015612b9157600080fd5b505afa158015612ba5573d6000803e3d6000fd5b505050506040513d6020811015612bbb57600080fd5b50519050612bcb82826000613c26565b505b612bda8186868686613cf4565b6117c18161366f565b600080612bee6117c9565b90506002816003811115612bfe57fe5b1415801561242157506003816003811115612c1557fe5b141591505090565b612c2685611c20565b612c73576040805162461bcd60e51b815260206004820152601960248201527818da185b9b995b081a185d99481d1bc81899481bdc195b9959603a1b604482015290519081900360640190fd5b6000858152600e6020908152604080832081518084018790528251808203850181528184018452805190850120606082018b9052608082018a905260a0820189905260c08083018290528451808403909101815260e0909201909352805193019290922091929091612ceb908563ffffffff61447216565b6004549091506001600160a01b03808316911614612d50576040805162461bcd60e51b815260206004820152601d60248201527f6861766520746f206265207369676e6564206279206f70657261746f72000000604482015290519081900360640190fd5b6000612d6984600201548961419890919063ffffffff16565b905080871115612daa5760405162461bcd60e51b815260040180806020018281038252603c815260200180614888603c913960400191505060405180910390fd5b612dc589612dbe838a63ffffffff61419816565b6001614252565b6002840154612dda908263ffffffff6141da16565b600285018190558454604080516001600160a01b039092168252602082018490528181019290925290518a917fa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668919081900360600190a28615612eb8576002546040805163a9059cbb60e01b8152336004820152602481018a905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015612e8b57600080fd5b505af1158015612e9f573d6000803e3d6000fd5b505050506040513d6020811015612eb557600080fd5b50505b612ec18961366f565b505050505050505050565b6000612ed78961362b565b9050612ee281611c20565b612ef257612ef281856000613c26565b612efe818585856117e1565b612f0b8189898989613cf4565b612ec18161366f565b612f1c6115e8565b15612f6e576040805162461bcd60e51b815260206004820152601a60248201527f6861766520746f206265206e6f7420696e697469616c697a6564000000000000604482015290519081900360640190fd5b6001600160a01b038416612fc9576040805162461bcd60e51b815260206004820152601760248201527f6f70657261746f72206861766520746f20626520736574000000000000000000604482015290519081900360640190fd5b6001600160a01b03851661300e5760405162461bcd60e51b8152600401808060200182810382526028815260200180614b246028913960400191505060405180910390fd5b6113888361ffff161115613069576040805162461bcd60e51b815260206004820152601c60248201527f6665652063616e277420626520626967676572207468616e2035302500000000604482015290519081900360640190fd5b8181116130a75760405162461bcd60e51b8152600401808060200182810382526028815260200180614afc6028913960400191505060405180910390fd5b600280546001600160a01b03199081166001600160a01b03888116919091179283905560038054339084161790556004805490921687821617825560408051808201825261ffff88168082524367ffffffffffffffff166020928301819052600c805461ffff191690921769ffffffffffffffff00001916620100009091021790556007879055600886905581516370a0823160e01b81523094810194909452905193909116926370a08231926024808201939291829003018186803b15801561317057600080fd5b505afa158015613184573d6000803e3d6000fd5b505050506040513d602081101561319a57600080fd5b50516009555050505050565b6001546001600160a01b03166131bb57600080fd5b6002546001600160a01b03828116911614156132085760405162461bcd60e51b81526004018080602001828103825260258152602001806148c46025913960400191505060405180910390fd5b604080516370a0823160e01b815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b15801561325257600080fd5b505afa158015613266573d6000803e3d6000fd5b505050506040513d602081101561327c57600080fd5b50516001546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015611ba557600080fd5b600d5461ffff81169062010000900467ffffffffffffffff1682565b6004546001600160a01b0316331461333c5760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b613344612be3565b613395576040805162461bcd60e51b815260206004820152601760248201527f6865726d65732073686f756c6420626520616374697665000000000000000000604482015290519081900360640190fd5b600b805460ff191660031790556133aa614668565b600a556040805143815290517ffa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e459181900360200190a1565b6004546001600160a01b031690565b6133fa84611c20565b613447576040805162461bcd60e51b815260206004820152601960248201527818da185b9b995b081a185d99481d1bc81899481bdc195b9959603a1b604482015290519081900360640190fd5b6007548310156134885760405162461bcd60e51b815260040180806020018281038252602b815260200180614954602b913960400191505060405180910390fd5b6000848152600e60205260409020600581015483116134d85760405162461bcd60e51b81526004018080602001828103825260298152602001806148e96029913960400191505060405180910390fd5b6000613597836040518060400160405280601981526020017f5374616b6520676f616c207570646174652072657175657374000000000000008152508888886040516020018085805190602001908083835b602083106135495780518252601f19909201916020918201910161352a565b51815160209384036101000a60001901801990921691161790529201958652508481019390935250604080840191909152805180840382018152606090930190528151910120919050614472565b9050856135a38261362b565b146135df5760405162461bcd60e51b8152600401808060200182810382526022815260200180614b756022913960400191505060405180910390fd5b600582018490556004820185905560408051868152905187917f5ec1b60bc705196753b2e21e144bbb185e6ef7264f9d79b99f04f1bc22198733919081900360200190a2505050505050565b60408051606092831b6bffffffffffffffffffffffff19166020808301919091523090931b6034820152815180820360280181526048909101909152805191012090565b613677612be3565b6136c3576040805162461bcd60e51b81526020600482015260186024820152776865726d6573206861766520746f2062652061637469766560401b604482015290519081900360640190fd5b6000818152600e6020526040902060018101546003820154116137175760405162461bcd60e51b8152600401808060200182810382526029815260200180614b4c6029913960400191505060405180910390fd5b60006137348260010154836003015461419890919063ffffffff16565b9050600061374482611024612218565b600254604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561379557600080fd5b505afa1580156137a9573d6000803e3d6000fd5b505050506040513d60208110156137bf57600080fd5b505190508181101561381e57600b805460ff1916600217905543600f556137e68282614198565b6040805143815290519194507f23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629919081900360200190a15b600554613831908463ffffffff6141da16565b6005556001840154613849908463ffffffff6141da16565b6001850181905560408051918252518691600080516020614934833981519152919081900360200190a25050505050565b6000546001600160a01b031633148061389c57506000546001600160a01b0316155b6138ed576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166139325760405162461bcd60e51b81526004018080602001828103825260268152602001806148386026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146139d65760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b6139de612be3565b613a2a576040805162461bcd60e51b81526020600482015260186024820152776865726d6573206861766520746f2062652061637469766560401b604482015290519081900360640190fd5b80613a3361232e565b1015613a705760405162461bcd60e51b815260040180806020018281038252602c815260200180614c2e602c913960400191505060405180910390fd5b6002546040805163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015613ac657600080fd5b505af1158015613ada573d6000803e3d6000fd5b505050506040513d6020811015613af057600080fd5b5050604080518281526001600160a01b038416602082015281517fa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf929181900390910190a15050565b6001546001600160a01b031690565b6004546001600160a01b03163314613b915760405162461bcd60e51b81526004018080602001828103825260248152602001806148146024913960400191505060405180910390fd5b6001613b9b6117c9565b6003811115613ba657fe5b14613be25760405162461bcd60e51b8152600401808060200182810382526021815260200180614a7d6021913960400191505060405180910390fd5b600b805460ff191690556040517f2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df890600090a1565b6002546001600160a01b031681565b613c2f83611c20565b15613c6b5760405162461bcd60e51b81526004018080602001828103825260218152602001806147ce6021913960400191505060405180910390fd5b8015613c7d57613c7d83826000614252565b6000838152600e602090815260409182902080546001600160a01b0319166001600160a01b0386161781556001810184905560075460048201558251868152918201849052825190927fbe2e1f3a6197dfd16fa6830c4870364b618b8b288c21cbcfa4fdb5d7c6a5e45b928290030190a150505050565b6000858152600e6020908152604080832081518084018790528251808203850181528184018452805190850120606082018b9052608082018a905260a0820189905260c08083018290528451808403909101815260e0909201909352805193019290922091929091613d6c908563ffffffff61447216565b6004549091506001600160a01b03808316911614613dd1576040805162461bcd60e51b815260206004820152601d60248201527f6861766520746f206265207369676e6564206279206f70657261746f72000000604482015290519081900360640190fd5b6000613dea84600201548961419890919063ffffffff16565b905060008111613e2b5760405162461bcd60e51b8152600401808060200182810382526037815260200180614a9e6037913960400191505060405180910390fd5b80871115613e6a5760405162461bcd60e51b815260040180806020018281038252603c815260200180614888603c913960400191505060405180910390fd5b6000846004015485600301541015613e86578460040154613e8c565b84600101545b905080821115613e9a578091505b6002850154613eaf908363ffffffff6141da16565b60028601556000613ebf83611195565b90506000613ed78261267e868d63ffffffff61419816565b9050866004015487600301541015613f36576000613f10600a8304613f0b8a6003015460085461419890919063ffffffff16565b614659565b9050613f1e8d826001614252565b613f2e828263ffffffff61419816565b915050613f67565b6001870154613f4b908563ffffffff61419816565b6001880155600554613f63908563ffffffff61419816565b6005555b60025487546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015613fbf57600080fd5b505af1158015613fd3573d6000803e3d6000fd5b505050506040513d6020811015613fe957600080fd5b50508915614072576002546040805163a9059cbb60e01b8152336004820152602481018d905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561404557600080fd5b505af1158015614059573d6000803e3d6000fd5b505050506040513d602081101561406f57600080fd5b50505b86546002880154604080516001600160a01b0390931683526020830187905282810191909152518d917fa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668919081900360600190a2505050505050505050505050565b6000826140e357506000614130565b828202828482816140f057fe5b041461412d5760405162461bcd60e51b8152600401808060200182810382526021815260200180614a5c6021913960400191505060405180910390fd5b90505b92915050565b600081826001848601038161414757fe5b04029392505050565b600061412d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614671565b61010190565b600061412d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614713565b60008282018381101561412d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000818311614243578161412d565b5090919050565b436146500190565b600082116142a7576040805162461bcd60e51b815260206004820152601b60248201527f73686f756c64207374616b65206d6f7265207468616e207a65726f0000000000604482015290519081900360640190fd5b6000838152600e6020526040812060038101549091906142cd908563ffffffff6141da16565b90506008548111156143105760405162461bcd60e51b815260040180806020018281038252603c815260200180614bf2603c913960400191505060405180910390fd5b826143ec57600254604080516323b872dd60e01b81523360048201523060248201526044810187905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561436f57600080fd5b505af1158015614383573d6000803e3d6000fd5b505050506040513d602081101561439957600080fd5b50516143ec576040805162461bcd60e51b815260206004820152601d60248201527f746f6b656e207472616e736665722073686f756c642073756363656564000000604482015290519081900360640190fd5b60038201819055600182015461441c9061440d90839063ffffffff61419816565b6005549063ffffffff6141da16565b600555600654614432908563ffffffff6141da16565b60065560408051828152905186917fc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb919081900360200190a25050505050565b600081516041146144ca576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561453b5760405162461bcd60e51b81526004018080602001828103825260228152602001806149126022913960400191505060405180910390fd5b8060ff16601b1415801561455357508060ff16601c14155b1561458f5760405162461bcd60e51b8152600401808060200182810382526022815260200180614a3a6022913960400191505060405180910390fd5b60408051600080825260208083018085528a905260ff85168385015260608301879052608083018690529251909260019260a080820193601f1981019281900390910190855afa1580156145e7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661464f576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b6000818310614243578161412d565b43621b77400190565b600081836146fd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156146c25781810151838201526020016146aa565b50505050905090810190601f1680156146ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161470957fe5b0495945050505050565b600081848411156147655760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156146c25781810151838201526020016146aa565b505050900390565b60408051808201909152600080825260208201529056fe62616c616e63652063616e2774206265206c657373207468616e207374616b6520616d6f756e7473686f756c6420626520656e6f75676820617661696c61626c652062616c616e63656368616e6e656c206861766520746f206265206e6f74206f70656e6564207965746865726d65732073686f756c6420626520696e2070756e6973686d656e74207374617475736f6e6c79206f70657261746f722063616e2063616c6c20746869732066756e6374696f6e4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737363616e2774207769746864726177206d6f7265207468616e207468652063757272656e74207374616b657472616e736163746f72206665652073686f756c6420626520657175616c20746f206f72206c657373207468616e205f756e70616964416d6f756e746e617469766520746f6b656e2066756e64732063616e2774206265207265636f76657265646e6f6e6365206861766520746f20626520626967676572207468616e20616c7265616479207573656445434453413a20696e76616c6964207369676e6174757265202773272076616c75652eb87c52e5d2d7395da77618aa1afe310b9cf13fa9f70e3199d100adda3a7aa57374616b6520676f616c2063616e2774206265206c657373207468616e206d696e696d616c207374616b656865726d6573206861766520746f20626520696e206163746976652073746174656d696e5374616b652068617320746f20626520736d616c6c6572207468616e206d61785374616b6562656e65666963696172792063616e2774206265207a65726f206164647265737374696d656c6f636b20706572696f64206861766520626520616c726561647920706173736564616d6f756e742073686f756c6420626520626967676572207468616e207472616e736163746f722066656545434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776865726d6573206861766520746f20626520696e20706175736564207374617465616d6f756e7420746f20736574746c652073686f756c642062652067726561746572207468617420616c726561647920736574746c65646d61785374616b652068617320746f20626520626967676572207468616e206d696e5374616b656d61785374616b65206861766520746f20626520626967676572207468616e206d696e5374616b65746f6b656e2063616e2774206265206465706c6f796420696e746f207a65726f20616464726573736e65772062616c616e63652073686f756c6420626520626967676572207468616e2063757272656e746861766520746f206265207369676e6564206279206368616e6e656c2070617274796e6f6e63652068617320746f20626520626967676572207468616e20616c72656164792075736564616d6f756e7420746f206c656e642063616e277420626520626967676572207468616e206d6178696d756d20616c6c6f776564746f74616c20616d6f756e7420746f207374616b652063616e277420626520626967676572207468616e206d6178696d616c6c7920616c6c6f77656473686f756c6420626520656e6f7567682066756e647320617661696c61626c6520746f207769746864726177a2646970667358221220a6be13292c9c35f3a2db56ccdb834be6fc1d079adcc94b9c85b7098d1c336f8264736f6c634300060a0033"

// DeployHermesImplementation deploys a new Ethereum contract, binding an instance of HermesImplementation to it.
func DeployHermesImplementation(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *HermesImplementation, error) {
	parsed, err := abi.JSON(strings.NewReader(HermesImplementationABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(HermesImplementationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &HermesImplementation{HermesImplementationCaller: HermesImplementationCaller{contract: contract}, HermesImplementationTransactor: HermesImplementationTransactor{contract: contract}, HermesImplementationFilterer: HermesImplementationFilterer{contract: contract}}, nil
}

// HermesImplementation is an auto generated Go binding around an Ethereum contract.
type HermesImplementation struct {
	HermesImplementationCaller     // Read-only binding to the contract
	HermesImplementationTransactor // Write-only binding to the contract
	HermesImplementationFilterer   // Log filterer for contract events
}

// HermesImplementationCaller is an auto generated read-only Go binding around an Ethereum contract.
type HermesImplementationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HermesImplementationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HermesImplementationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HermesImplementationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HermesImplementationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HermesImplementationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HermesImplementationSession struct {
	Contract     *HermesImplementation // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// HermesImplementationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HermesImplementationCallerSession struct {
	Contract *HermesImplementationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// HermesImplementationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HermesImplementationTransactorSession struct {
	Contract     *HermesImplementationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// HermesImplementationRaw is an auto generated low-level Go binding around an Ethereum contract.
type HermesImplementationRaw struct {
	Contract *HermesImplementation // Generic contract binding to access the raw methods on
}

// HermesImplementationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HermesImplementationCallerRaw struct {
	Contract *HermesImplementationCaller // Generic read-only contract binding to access the raw methods on
}

// HermesImplementationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HermesImplementationTransactorRaw struct {
	Contract *HermesImplementationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHermesImplementation creates a new instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementation(address common.Address, backend bind.ContractBackend) (*HermesImplementation, error) {
	contract, err := bindHermesImplementation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &HermesImplementation{HermesImplementationCaller: HermesImplementationCaller{contract: contract}, HermesImplementationTransactor: HermesImplementationTransactor{contract: contract}, HermesImplementationFilterer: HermesImplementationFilterer{contract: contract}}, nil
}

// NewHermesImplementationCaller creates a new read-only instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementationCaller(address common.Address, caller bind.ContractCaller) (*HermesImplementationCaller, error) {
	contract, err := bindHermesImplementation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationCaller{contract: contract}, nil
}

// NewHermesImplementationTransactor creates a new write-only instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementationTransactor(address common.Address, transactor bind.ContractTransactor) (*HermesImplementationTransactor, error) {
	contract, err := bindHermesImplementation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationTransactor{contract: contract}, nil
}

// NewHermesImplementationFilterer creates a new log filterer instance of HermesImplementation, bound to a specific deployed contract.
func NewHermesImplementationFilterer(address common.Address, filterer bind.ContractFilterer) (*HermesImplementationFilterer, error) {
	contract, err := bindHermesImplementation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationFilterer{contract: contract}, nil
}

// bindHermesImplementation binds a generic wrapper to an already deployed contract.
func bindHermesImplementation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(HermesImplementationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HermesImplementation *HermesImplementationRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _HermesImplementation.Contract.HermesImplementationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HermesImplementation *HermesImplementationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.Contract.HermesImplementationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HermesImplementation *HermesImplementationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HermesImplementation.Contract.HermesImplementationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_HermesImplementation *HermesImplementationCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _HermesImplementation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_HermesImplementation *HermesImplementationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_HermesImplementation *HermesImplementationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _HermesImplementation.Contract.contract.Transact(opts, method, params...)
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) AvailableBalance(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "availableBalance")
	return *ret0, err
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) AvailableBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.AvailableBalance(&_HermesImplementation.CallOpts)
}

// AvailableBalance is a free data retrieval call binding the contract method 0xab2f0e51.
//
// Solidity: function availableBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) AvailableBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.AvailableBalance(&_HermesImplementation.CallOpts)
}

// CalculateHermesFee is a free data retrieval call binding the contract method 0x1f4f12c6.
//
// Solidity: function calculateHermesFee(uint256 _amount) view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) CalculateHermesFee(opts *bind.CallOpts, _amount *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "calculateHermesFee", _amount)
	return *ret0, err
}

// CalculateHermesFee is a free data retrieval call binding the contract method 0x1f4f12c6.
//
// Solidity: function calculateHermesFee(uint256 _amount) view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) CalculateHermesFee(_amount *big.Int) (*big.Int, error) {
	return _HermesImplementation.Contract.CalculateHermesFee(&_HermesImplementation.CallOpts, _amount)
}

// CalculateHermesFee is a free data retrieval call binding the contract method 0x1f4f12c6.
//
// Solidity: function calculateHermesFee(uint256 _amount) view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) CalculateHermesFee(_amount *big.Int) (*big.Int, error) {
	return _HermesImplementation.Contract.CalculateHermesFee(&_HermesImplementation.CallOpts, _amount)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(address beneficiary, uint256 balance, uint256 settled, uint256 stake, uint256 stakeGoal, uint256 lastUsedNonce, uint256 timelock)
func (_HermesImplementation *HermesImplementationCaller) Channels(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Beneficiary   common.Address
	Balance       *big.Int
	Settled       *big.Int
	Stake         *big.Int
	StakeGoal     *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	ret := new(struct {
		Beneficiary   common.Address
		Balance       *big.Int
		Settled       *big.Int
		Stake         *big.Int
		StakeGoal     *big.Int
		LastUsedNonce *big.Int
		Timelock      *big.Int
	})
	out := ret
	err := _HermesImplementation.contract.Call(opts, out, "channels", arg0)
	return *ret, err
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(address beneficiary, uint256 balance, uint256 settled, uint256 stake, uint256 stakeGoal, uint256 lastUsedNonce, uint256 timelock)
func (_HermesImplementation *HermesImplementationSession) Channels(arg0 [32]byte) (struct {
	Beneficiary   common.Address
	Balance       *big.Int
	Settled       *big.Int
	Stake         *big.Int
	StakeGoal     *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	return _HermesImplementation.Contract.Channels(&_HermesImplementation.CallOpts, arg0)
}

// Channels is a free data retrieval call binding the contract method 0x7a7ebd7b.
//
// Solidity: function channels(bytes32 ) view returns(address beneficiary, uint256 balance, uint256 settled, uint256 stake, uint256 stakeGoal, uint256 lastUsedNonce, uint256 timelock)
func (_HermesImplementation *HermesImplementationCallerSession) Channels(arg0 [32]byte) (struct {
	Beneficiary   common.Address
	Balance       *big.Int
	Settled       *big.Int
	Stake         *big.Int
	StakeGoal     *big.Int
	LastUsedNonce *big.Int
	Timelock      *big.Int
}, error) {
	return _HermesImplementation.Contract.Channels(&_HermesImplementation.CallOpts, arg0)
}

// GetChannelId is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _identity) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCaller) GetChannelId(opts *bind.CallOpts, _identity common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "getChannelId", _identity)
	return *ret0, err
}

// GetChannelId is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _identity) view returns(bytes32)
func (_HermesImplementation *HermesImplementationSession) GetChannelId(_identity common.Address) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId(&_HermesImplementation.CallOpts, _identity)
}

// GetChannelId is a free data retrieval call binding the contract method 0xeb295b27.
//
// Solidity: function getChannelId(address _identity) view returns(bytes32)
func (_HermesImplementation *HermesImplementationCallerSession) GetChannelId(_identity common.Address) ([32]byte, error) {
	return _HermesImplementation.Contract.GetChannelId(&_HermesImplementation.CallOpts, _identity)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) GetFundsDestination(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "getFundsDestination")
	return *ret0, err
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_HermesImplementation *HermesImplementationSession) GetFundsDestination() (common.Address, error) {
	return _HermesImplementation.Contract.GetFundsDestination(&_HermesImplementation.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) GetFundsDestination() (common.Address, error) {
	return _HermesImplementation.Contract.GetFundsDestination(&_HermesImplementation.CallOpts)
}

// GetHermesStake is a free data retrieval call binding the contract method 0x306db49b.
//
// Solidity: function getHermesStake() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) GetHermesStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "getHermesStake")
	return *ret0, err
}

// GetHermesStake is a free data retrieval call binding the contract method 0x306db49b.
//
// Solidity: function getHermesStake() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) GetHermesStake() (*big.Int, error) {
	return _HermesImplementation.Contract.GetHermesStake(&_HermesImplementation.CallOpts)
}

// GetHermesStake is a free data retrieval call binding the contract method 0x306db49b.
//
// Solidity: function getHermesStake() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) GetHermesStake() (*big.Int, error) {
	return _HermesImplementation.Contract.GetHermesStake(&_HermesImplementation.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) GetOperator(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "getOperator")
	return *ret0, err
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_HermesImplementation *HermesImplementationSession) GetOperator() (common.Address, error) {
	return _HermesImplementation.Contract.GetOperator(&_HermesImplementation.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0xe7f43c68.
//
// Solidity: function getOperator() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) GetOperator() (common.Address, error) {
	return _HermesImplementation.Contract.GetOperator(&_HermesImplementation.CallOpts)
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) GetRegistry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "getRegistry")
	return *ret0, err
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() view returns(address)
func (_HermesImplementation *HermesImplementationSession) GetRegistry() (common.Address, error) {
	return _HermesImplementation.Contract.GetRegistry(&_HermesImplementation.CallOpts)
}

// GetRegistry is a free data retrieval call binding the contract method 0x5ab1bd53.
//
// Solidity: function getRegistry() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) GetRegistry() (common.Address, error) {
	return _HermesImplementation.Contract.GetRegistry(&_HermesImplementation.CallOpts)
}

// GetStakeThresholds is a free data retrieval call binding the contract method 0x9ed9903e.
//
// Solidity: function getStakeThresholds() view returns(uint256, uint256)
func (_HermesImplementation *HermesImplementationCaller) GetStakeThresholds(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _HermesImplementation.contract.Call(opts, out, "getStakeThresholds")
	return *ret0, *ret1, err
}

// GetStakeThresholds is a free data retrieval call binding the contract method 0x9ed9903e.
//
// Solidity: function getStakeThresholds() view returns(uint256, uint256)
func (_HermesImplementation *HermesImplementationSession) GetStakeThresholds() (*big.Int, *big.Int, error) {
	return _HermesImplementation.Contract.GetStakeThresholds(&_HermesImplementation.CallOpts)
}

// GetStakeThresholds is a free data retrieval call binding the contract method 0x9ed9903e.
//
// Solidity: function getStakeThresholds() view returns(uint256, uint256)
func (_HermesImplementation *HermesImplementationCallerSession) GetStakeThresholds() (*big.Int, *big.Int, error) {
	return _HermesImplementation.Contract.GetStakeThresholds(&_HermesImplementation.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() view returns(uint8)
func (_HermesImplementation *HermesImplementationCaller) GetStatus(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "getStatus")
	return *ret0, err
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() view returns(uint8)
func (_HermesImplementation *HermesImplementationSession) GetStatus() (uint8, error) {
	return _HermesImplementation.Contract.GetStatus(&_HermesImplementation.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() view returns(uint8)
func (_HermesImplementation *HermesImplementationCallerSession) GetStatus() (uint8, error) {
	return _HermesImplementation.Contract.GetStatus(&_HermesImplementation.CallOpts)
}

// IsChannelOpened is a free data retrieval call binding the contract method 0x6e9094ea.
//
// Solidity: function isChannelOpened(bytes32 _channelId) view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) IsChannelOpened(opts *bind.CallOpts, _channelId [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "isChannelOpened", _channelId)
	return *ret0, err
}

// IsChannelOpened is a free data retrieval call binding the contract method 0x6e9094ea.
//
// Solidity: function isChannelOpened(bytes32 _channelId) view returns(bool)
func (_HermesImplementation *HermesImplementationSession) IsChannelOpened(_channelId [32]byte) (bool, error) {
	return _HermesImplementation.Contract.IsChannelOpened(&_HermesImplementation.CallOpts, _channelId)
}

// IsChannelOpened is a free data retrieval call binding the contract method 0x6e9094ea.
//
// Solidity: function isChannelOpened(bytes32 _channelId) view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) IsChannelOpened(_channelId [32]byte) (bool, error) {
	return _HermesImplementation.Contract.IsChannelOpened(&_HermesImplementation.CallOpts, _channelId)
}

// IsHermesActive is a free data retrieval call binding the contract method 0xbc96a1e9.
//
// Solidity: function isHermesActive() view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) IsHermesActive(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "isHermesActive")
	return *ret0, err
}

// IsHermesActive is a free data retrieval call binding the contract method 0xbc96a1e9.
//
// Solidity: function isHermesActive() view returns(bool)
func (_HermesImplementation *HermesImplementationSession) IsHermesActive() (bool, error) {
	return _HermesImplementation.Contract.IsHermesActive(&_HermesImplementation.CallOpts)
}

// IsHermesActive is a free data retrieval call binding the contract method 0xbc96a1e9.
//
// Solidity: function isHermesActive() view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) IsHermesActive() (bool, error) {
	return _HermesImplementation.Contract.IsHermesActive(&_HermesImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_HermesImplementation *HermesImplementationCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "isInitialized")
	return *ret0, err
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_HermesImplementation *HermesImplementationSession) IsInitialized() (bool, error) {
	return _HermesImplementation.Contract.IsInitialized(&_HermesImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() view returns(bool)
func (_HermesImplementation *HermesImplementationCallerSession) IsInitialized() (bool, error) {
	return _HermesImplementation.Contract.IsInitialized(&_HermesImplementation.CallOpts)
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCaller) LastFee(opts *bind.CallOpts) (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	ret := new(struct {
		Value     uint16
		ValidFrom uint64
	})
	out := ret
	err := _HermesImplementation.contract.Call(opts, out, "lastFee")
	return *ret, err
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationSession) LastFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.LastFee(&_HermesImplementation.CallOpts)
}

// LastFee is a free data retrieval call binding the contract method 0x9801134e.
//
// Solidity: function lastFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCallerSession) LastFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.LastFee(&_HermesImplementation.CallOpts)
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCaller) MinimalExpectedBalance(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "minimalExpectedBalance")
	return *ret0, err
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationSession) MinimalExpectedBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.MinimalExpectedBalance(&_HermesImplementation.CallOpts)
}

// MinimalExpectedBalance is a free data retrieval call binding the contract method 0x94c7915d.
//
// Solidity: function minimalExpectedBalance() view returns(uint256)
func (_HermesImplementation *HermesImplementationCallerSession) MinimalExpectedBalance() (*big.Int, error) {
	return _HermesImplementation.Contract.MinimalExpectedBalance(&_HermesImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_HermesImplementation *HermesImplementationSession) Owner() (common.Address, error) {
	return _HermesImplementation.Contract.Owner(&_HermesImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) Owner() (common.Address, error) {
	return _HermesImplementation.Contract.Owner(&_HermesImplementation.CallOpts)
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCaller) PreviousFee(opts *bind.CallOpts) (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	ret := new(struct {
		Value     uint16
		ValidFrom uint64
	})
	out := ret
	err := _HermesImplementation.contract.Call(opts, out, "previousFee")
	return *ret, err
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationSession) PreviousFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.PreviousFee(&_HermesImplementation.CallOpts)
}

// PreviousFee is a free data retrieval call binding the contract method 0xe1c66487.
//
// Solidity: function previousFee() view returns(uint16 value, uint64 validFrom)
func (_HermesImplementation *HermesImplementationCallerSession) PreviousFee() (struct {
	Value     uint16
	ValidFrom uint64
}, error) {
	return _HermesImplementation.Contract.PreviousFee(&_HermesImplementation.CallOpts)
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() view returns(uint256 activationBlock, uint256 amount)
func (_HermesImplementation *HermesImplementationCaller) Punishment(opts *bind.CallOpts) (struct {
	ActivationBlock *big.Int
	Amount          *big.Int
}, error) {
	ret := new(struct {
		ActivationBlock *big.Int
		Amount          *big.Int
	})
	out := ret
	err := _HermesImplementation.contract.Call(opts, out, "punishment")
	return *ret, err
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() view returns(uint256 activationBlock, uint256 amount)
func (_HermesImplementation *HermesImplementationSession) Punishment() (struct {
	ActivationBlock *big.Int
	Amount          *big.Int
}, error) {
	return _HermesImplementation.Contract.Punishment(&_HermesImplementation.CallOpts)
}

// Punishment is a free data retrieval call binding the contract method 0x0684cd20.
//
// Solidity: function punishment() view returns(uint256 activationBlock, uint256 amount)
func (_HermesImplementation *HermesImplementationCallerSession) Punishment() (struct {
	ActivationBlock *big.Int
	Amount          *big.Int
}, error) {
	return _HermesImplementation.Contract.Punishment(&_HermesImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_HermesImplementation *HermesImplementationCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _HermesImplementation.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_HermesImplementation *HermesImplementationSession) Token() (common.Address, error) {
	return _HermesImplementation.Contract.Token(&_HermesImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_HermesImplementation *HermesImplementationCallerSession) Token() (common.Address, error) {
	return _HermesImplementation.Contract.Token(&_HermesImplementation.CallOpts)
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactor) ActivateChannelOpening(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "activateChannelOpening")
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_HermesImplementation *HermesImplementationSession) ActivateChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ActivateChannelOpening(&_HermesImplementation.TransactOpts)
}

// ActivateChannelOpening is a paid mutator transaction binding the contract method 0xfbb46b98.
//
// Solidity: function activateChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ActivateChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ActivateChannelOpening(&_HermesImplementation.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_HermesImplementation *HermesImplementationTransactor) ClaimEthers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "claimEthers")
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_HermesImplementation *HermesImplementationSession) ClaimEthers() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimEthers(&_HermesImplementation.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ClaimEthers() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimEthers(&_HermesImplementation.TransactOpts)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_HermesImplementation *HermesImplementationTransactor) ClaimTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "claimTokens", _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_HermesImplementation *HermesImplementationSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimTokens(&_HermesImplementation.TransactOpts, _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.ClaimTokens(&_HermesImplementation.TransactOpts, _token)
}

// CloseHermes is a paid mutator transaction binding the contract method 0xe58473f2.
//
// Solidity: function closeHermes() returns()
func (_HermesImplementation *HermesImplementationTransactor) CloseHermes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "closeHermes")
}

// CloseHermes is a paid mutator transaction binding the contract method 0xe58473f2.
//
// Solidity: function closeHermes() returns()
func (_HermesImplementation *HermesImplementationSession) CloseHermes() (*types.Transaction, error) {
	return _HermesImplementation.Contract.CloseHermes(&_HermesImplementation.TransactOpts)
}

// CloseHermes is a paid mutator transaction binding the contract method 0xe58473f2.
//
// Solidity: function closeHermes() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) CloseHermes() (*types.Transaction, error) {
	return _HermesImplementation.Contract.CloseHermes(&_HermesImplementation.TransactOpts)
}

// DecreaseStake is a paid mutator transaction binding the contract method 0xac7d01b6.
//
// Solidity: function decreaseStake(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) DecreaseStake(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "decreaseStake", _channelId, _amount, _transactorFee, _nonce, _signature)
}

// DecreaseStake is a paid mutator transaction binding the contract method 0xac7d01b6.
//
// Solidity: function decreaseStake(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) DecreaseStake(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.DecreaseStake(&_HermesImplementation.TransactOpts, _channelId, _amount, _transactorFee, _nonce, _signature)
}

// DecreaseStake is a paid mutator transaction binding the contract method 0xac7d01b6.
//
// Solidity: function decreaseStake(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) DecreaseStake(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.DecreaseStake(&_HermesImplementation.TransactOpts, _channelId, _amount, _transactorFee, _nonce, _signature)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_HermesImplementation *HermesImplementationTransactor) GetStakeBack(opts *bind.TransactOpts, _beneficiary common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "getStakeBack", _beneficiary)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_HermesImplementation *HermesImplementationSession) GetStakeBack(_beneficiary common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.GetStakeBack(&_HermesImplementation.TransactOpts, _beneficiary)
}

// GetStakeBack is a paid mutator transaction binding the contract method 0x6138dda7.
//
// Solidity: function getStakeBack(address _beneficiary) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) GetStakeBack(_beneficiary common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.GetStakeBack(&_HermesImplementation.TransactOpts, _beneficiary)
}

// IncreaseHermesStake is a paid mutator transaction binding the contract method 0xae10ed84.
//
// Solidity: function increaseHermesStake(uint256 _additionalStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) IncreaseHermesStake(opts *bind.TransactOpts, _additionalStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "increaseHermesStake", _additionalStake)
}

// IncreaseHermesStake is a paid mutator transaction binding the contract method 0xae10ed84.
//
// Solidity: function increaseHermesStake(uint256 _additionalStake) returns()
func (_HermesImplementation *HermesImplementationSession) IncreaseHermesStake(_additionalStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseHermesStake(&_HermesImplementation.TransactOpts, _additionalStake)
}

// IncreaseHermesStake is a paid mutator transaction binding the contract method 0xae10ed84.
//
// Solidity: function increaseHermesStake(uint256 _additionalStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) IncreaseHermesStake(_additionalStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseHermesStake(&_HermesImplementation.TransactOpts, _additionalStake)
}

// IncreaseStake is a paid mutator transaction binding the contract method 0x39f97626.
//
// Solidity: function increaseStake(bytes32 _channelId, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactor) IncreaseStake(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "increaseStake", _channelId, _amount)
}

// IncreaseStake is a paid mutator transaction binding the contract method 0x39f97626.
//
// Solidity: function increaseStake(bytes32 _channelId, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationSession) IncreaseStake(_channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseStake(&_HermesImplementation.TransactOpts, _channelId, _amount)
}

// IncreaseStake is a paid mutator transaction binding the contract method 0x39f97626.
//
// Solidity: function increaseStake(bytes32 _channelId, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) IncreaseStake(_channelId [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.IncreaseStake(&_HermesImplementation.TransactOpts, _channelId, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0xd740dd44.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _minStake, uint256 _maxStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) Initialize(opts *bind.TransactOpts, _token common.Address, _operator common.Address, _fee uint16, _minStake *big.Int, _maxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "initialize", _token, _operator, _fee, _minStake, _maxStake)
}

// Initialize is a paid mutator transaction binding the contract method 0xd740dd44.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _minStake, uint256 _maxStake) returns()
func (_HermesImplementation *HermesImplementationSession) Initialize(_token common.Address, _operator common.Address, _fee uint16, _minStake *big.Int, _maxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Initialize(&_HermesImplementation.TransactOpts, _token, _operator, _fee, _minStake, _maxStake)
}

// Initialize is a paid mutator transaction binding the contract method 0xd740dd44.
//
// Solidity: function initialize(address _token, address _operator, uint16 _fee, uint256 _minStake, uint256 _maxStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) Initialize(_token common.Address, _operator common.Address, _fee uint16, _minStake *big.Int, _maxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Initialize(&_HermesImplementation.TransactOpts, _token, _operator, _fee, _minStake, _maxStake)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x0a798f24.
//
// Solidity: function openChannel(address _identity, address _beneficiary, uint256 _amountToLend) returns()
func (_HermesImplementation *HermesImplementationTransactor) OpenChannel(opts *bind.TransactOpts, _identity common.Address, _beneficiary common.Address, _amountToLend *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "openChannel", _identity, _beneficiary, _amountToLend)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x0a798f24.
//
// Solidity: function openChannel(address _identity, address _beneficiary, uint256 _amountToLend) returns()
func (_HermesImplementation *HermesImplementationSession) OpenChannel(_identity common.Address, _beneficiary common.Address, _amountToLend *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.OpenChannel(&_HermesImplementation.TransactOpts, _identity, _beneficiary, _amountToLend)
}

// OpenChannel is a paid mutator transaction binding the contract method 0x0a798f24.
//
// Solidity: function openChannel(address _identity, address _beneficiary, uint256 _amountToLend) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) OpenChannel(_identity common.Address, _beneficiary common.Address, _amountToLend *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.OpenChannel(&_HermesImplementation.TransactOpts, _identity, _beneficiary, _amountToLend)
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactor) PauseChannelOpening(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "pauseChannelOpening")
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_HermesImplementation *HermesImplementationSession) PauseChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.PauseChannelOpening(&_HermesImplementation.TransactOpts)
}

// PauseChannelOpening is a paid mutator transaction binding the contract method 0xaa606dee.
//
// Solidity: function pauseChannelOpening() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) PauseChannelOpening() (*types.Transaction, error) {
	return _HermesImplementation.Contract.PauseChannelOpening(&_HermesImplementation.TransactOpts)
}

// RebalanceChannel is a paid mutator transaction binding the contract method 0xefde05ec.
//
// Solidity: function rebalanceChannel(bytes32 _channelId) returns()
func (_HermesImplementation *HermesImplementationTransactor) RebalanceChannel(opts *bind.TransactOpts, _channelId [32]byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "rebalanceChannel", _channelId)
}

// RebalanceChannel is a paid mutator transaction binding the contract method 0xefde05ec.
//
// Solidity: function rebalanceChannel(bytes32 _channelId) returns()
func (_HermesImplementation *HermesImplementationSession) RebalanceChannel(_channelId [32]byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.RebalanceChannel(&_HermesImplementation.TransactOpts, _channelId)
}

// RebalanceChannel is a paid mutator transaction binding the contract method 0xefde05ec.
//
// Solidity: function rebalanceChannel(bytes32 _channelId) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) RebalanceChannel(_channelId [32]byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.RebalanceChannel(&_HermesImplementation.TransactOpts, _channelId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_HermesImplementation *HermesImplementationTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_HermesImplementation *HermesImplementationSession) RenounceOwnership() (*types.Transaction, error) {
	return _HermesImplementation.Contract.RenounceOwnership(&_HermesImplementation.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _HermesImplementation.Contract.RenounceOwnership(&_HermesImplementation.TransactOpts)
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_HermesImplementation *HermesImplementationTransactor) ResolveEmergency(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "resolveEmergency")
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_HermesImplementation *HermesImplementationSession) ResolveEmergency() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ResolveEmergency(&_HermesImplementation.TransactOpts)
}

// ResolveEmergency is a paid mutator transaction binding the contract method 0x15c73afd.
//
// Solidity: function resolveEmergency() returns()
func (_HermesImplementation *HermesImplementationTransactorSession) ResolveEmergency() (*types.Transaction, error) {
	return _HermesImplementation.Contract.ResolveEmergency(&_HermesImplementation.TransactOpts)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0x5f59def0.
//
// Solidity: function setBeneficiary(bytes32 _channelId, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetBeneficiary(opts *bind.TransactOpts, _channelId [32]byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setBeneficiary", _channelId, _newBeneficiary, _nonce, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0x5f59def0.
//
// Solidity: function setBeneficiary(bytes32 _channelId, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SetBeneficiary(_channelId [32]byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetBeneficiary(&_HermesImplementation.TransactOpts, _channelId, _newBeneficiary, _nonce, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0x5f59def0.
//
// Solidity: function setBeneficiary(bytes32 _channelId, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetBeneficiary(_channelId [32]byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetBeneficiary(&_HermesImplementation.TransactOpts, _channelId, _newBeneficiary, _nonce, _signature)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetFundsDestination(opts *bind.TransactOpts, _newDestination common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setFundsDestination", _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_HermesImplementation *HermesImplementationSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetFundsDestination(&_HermesImplementation.TransactOpts, _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetFundsDestination(&_HermesImplementation.TransactOpts, _newDestination)
}

// SetHermesFee is a paid mutator transaction binding the contract method 0x38df1024.
//
// Solidity: function setHermesFee(uint16 _newFee) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetHermesFee(opts *bind.TransactOpts, _newFee uint16) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setHermesFee", _newFee)
}

// SetHermesFee is a paid mutator transaction binding the contract method 0x38df1024.
//
// Solidity: function setHermesFee(uint16 _newFee) returns()
func (_HermesImplementation *HermesImplementationSession) SetHermesFee(_newFee uint16) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetHermesFee(&_HermesImplementation.TransactOpts, _newFee)
}

// SetHermesFee is a paid mutator transaction binding the contract method 0x38df1024.
//
// Solidity: function setHermesFee(uint16 _newFee) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetHermesFee(_newFee uint16) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetHermesFee(&_HermesImplementation.TransactOpts, _newFee)
}

// SetHermesOperator is a paid mutator transaction binding the contract method 0x2055536a.
//
// Solidity: function setHermesOperator(address _newOperator) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetHermesOperator(opts *bind.TransactOpts, _newOperator common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setHermesOperator", _newOperator)
}

// SetHermesOperator is a paid mutator transaction binding the contract method 0x2055536a.
//
// Solidity: function setHermesOperator(address _newOperator) returns()
func (_HermesImplementation *HermesImplementationSession) SetHermesOperator(_newOperator common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetHermesOperator(&_HermesImplementation.TransactOpts, _newOperator)
}

// SetHermesOperator is a paid mutator transaction binding the contract method 0x2055536a.
//
// Solidity: function setHermesOperator(address _newOperator) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetHermesOperator(_newOperator common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetHermesOperator(&_HermesImplementation.TransactOpts, _newOperator)
}

// SetMaxStake is a paid mutator transaction binding the contract method 0x6fc14837.
//
// Solidity: function setMaxStake(uint256 _newMaxStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetMaxStake(opts *bind.TransactOpts, _newMaxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setMaxStake", _newMaxStake)
}

// SetMaxStake is a paid mutator transaction binding the contract method 0x6fc14837.
//
// Solidity: function setMaxStake(uint256 _newMaxStake) returns()
func (_HermesImplementation *HermesImplementationSession) SetMaxStake(_newMaxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMaxStake(&_HermesImplementation.TransactOpts, _newMaxStake)
}

// SetMaxStake is a paid mutator transaction binding the contract method 0x6fc14837.
//
// Solidity: function setMaxStake(uint256 _newMaxStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetMaxStake(_newMaxStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMaxStake(&_HermesImplementation.TransactOpts, _newMaxStake)
}

// SetMinStake is a paid mutator transaction binding the contract method 0x8c80fd90.
//
// Solidity: function setMinStake(uint256 _newMinStake) returns()
func (_HermesImplementation *HermesImplementationTransactor) SetMinStake(opts *bind.TransactOpts, _newMinStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "setMinStake", _newMinStake)
}

// SetMinStake is a paid mutator transaction binding the contract method 0x8c80fd90.
//
// Solidity: function setMinStake(uint256 _newMinStake) returns()
func (_HermesImplementation *HermesImplementationSession) SetMinStake(_newMinStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMinStake(&_HermesImplementation.TransactOpts, _newMinStake)
}

// SetMinStake is a paid mutator transaction binding the contract method 0x8c80fd90.
//
// Solidity: function setMinStake(uint256 _newMinStake) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SetMinStake(_newMinStake *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SetMinStake(&_HermesImplementation.TransactOpts, _newMinStake)
}

// SettleAndRebalance is a paid mutator transaction binding the contract method 0xb07d9483.
//
// Solidity: function settleAndRebalance(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleAndRebalance(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleAndRebalance", _identity, _amount, _transactorFee, _lock, _signature)
}

// SettleAndRebalance is a paid mutator transaction binding the contract method 0xb07d9483.
//
// Solidity: function settleAndRebalance(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleAndRebalance(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleAndRebalance(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _lock, _signature)
}

// SettleAndRebalance is a paid mutator transaction binding the contract method 0xb07d9483.
//
// Solidity: function settleAndRebalance(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleAndRebalance(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleAndRebalance(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _lock, _signature)
}

// SettleIntoStake is a paid mutator transaction binding the contract method 0xc062fe06.
//
// Solidity: function settleIntoStake(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleIntoStake(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleIntoStake", _channelId, _amount, _transactorFee, _lock, _signature)
}

// SettleIntoStake is a paid mutator transaction binding the contract method 0xc062fe06.
//
// Solidity: function settleIntoStake(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleIntoStake(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleIntoStake(&_HermesImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _signature)
}

// SettleIntoStake is a paid mutator transaction binding the contract method 0xc062fe06.
//
// Solidity: function settleIntoStake(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleIntoStake(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleIntoStake(&_HermesImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0x48d9f01e.
//
// Solidity: function settlePromise(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettlePromise(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settlePromise", _identity, _amount, _transactorFee, _lock, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0x48d9f01e.
//
// Solidity: function settlePromise(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettlePromise(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettlePromise(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _lock, _signature)
}

// SettlePromise is a paid mutator transaction binding the contract method 0x48d9f01e.
//
// Solidity: function settlePromise(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettlePromise(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettlePromise(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _lock, _signature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0xcc449054.
//
// Solidity: function settleWithBeneficiary(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _promiseSignature, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleWithBeneficiary(opts *bind.TransactOpts, _identity common.Address, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleWithBeneficiary", _identity, _amount, _transactorFee, _lock, _promiseSignature, _newBeneficiary, _nonce, _signature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0xcc449054.
//
// Solidity: function settleWithBeneficiary(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _promiseSignature, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleWithBeneficiary(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithBeneficiary(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _lock, _promiseSignature, _newBeneficiary, _nonce, _signature)
}

// SettleWithBeneficiary is a paid mutator transaction binding the contract method 0xcc449054.
//
// Solidity: function settleWithBeneficiary(address _identity, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _promiseSignature, address _newBeneficiary, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleWithBeneficiary(_identity common.Address, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _promiseSignature []byte, _newBeneficiary common.Address, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithBeneficiary(&_HermesImplementation.TransactOpts, _identity, _amount, _transactorFee, _lock, _promiseSignature, _newBeneficiary, _nonce, _signature)
}

// SettleWithGoalIncrease is a paid mutator transaction binding the contract method 0x0b9a91c1.
//
// Solidity: function settleWithGoalIncrease(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _promiseSignature, uint256 _newStakeGoal, uint256 _nonce, bytes _goalChangeSignature) returns()
func (_HermesImplementation *HermesImplementationTransactor) SettleWithGoalIncrease(opts *bind.TransactOpts, _channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _promiseSignature []byte, _newStakeGoal *big.Int, _nonce *big.Int, _goalChangeSignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "settleWithGoalIncrease", _channelId, _amount, _transactorFee, _lock, _promiseSignature, _newStakeGoal, _nonce, _goalChangeSignature)
}

// SettleWithGoalIncrease is a paid mutator transaction binding the contract method 0x0b9a91c1.
//
// Solidity: function settleWithGoalIncrease(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _promiseSignature, uint256 _newStakeGoal, uint256 _nonce, bytes _goalChangeSignature) returns()
func (_HermesImplementation *HermesImplementationSession) SettleWithGoalIncrease(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _promiseSignature []byte, _newStakeGoal *big.Int, _nonce *big.Int, _goalChangeSignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithGoalIncrease(&_HermesImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _promiseSignature, _newStakeGoal, _nonce, _goalChangeSignature)
}

// SettleWithGoalIncrease is a paid mutator transaction binding the contract method 0x0b9a91c1.
//
// Solidity: function settleWithGoalIncrease(bytes32 _channelId, uint256 _amount, uint256 _transactorFee, bytes32 _lock, bytes _promiseSignature, uint256 _newStakeGoal, uint256 _nonce, bytes _goalChangeSignature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) SettleWithGoalIncrease(_channelId [32]byte, _amount *big.Int, _transactorFee *big.Int, _lock [32]byte, _promiseSignature []byte, _newStakeGoal *big.Int, _nonce *big.Int, _goalChangeSignature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.SettleWithGoalIncrease(&_HermesImplementation.TransactOpts, _channelId, _amount, _transactorFee, _lock, _promiseSignature, _newStakeGoal, _nonce, _goalChangeSignature)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_HermesImplementation *HermesImplementationTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_HermesImplementation *HermesImplementationSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.TransferOwnership(&_HermesImplementation.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _HermesImplementation.Contract.TransferOwnership(&_HermesImplementation.TransactOpts, newOwner)
}

// UpdateChannelBalance is a paid mutator transaction binding the contract method 0x7c2be0a3.
//
// Solidity: function updateChannelBalance(bytes32 _channelId, uint256 _newBalance) returns()
func (_HermesImplementation *HermesImplementationTransactor) UpdateChannelBalance(opts *bind.TransactOpts, _channelId [32]byte, _newBalance *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "updateChannelBalance", _channelId, _newBalance)
}

// UpdateChannelBalance is a paid mutator transaction binding the contract method 0x7c2be0a3.
//
// Solidity: function updateChannelBalance(bytes32 _channelId, uint256 _newBalance) returns()
func (_HermesImplementation *HermesImplementationSession) UpdateChannelBalance(_channelId [32]byte, _newBalance *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.UpdateChannelBalance(&_HermesImplementation.TransactOpts, _channelId, _newBalance)
}

// UpdateChannelBalance is a paid mutator transaction binding the contract method 0x7c2be0a3.
//
// Solidity: function updateChannelBalance(bytes32 _channelId, uint256 _newBalance) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) UpdateChannelBalance(_channelId [32]byte, _newBalance *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.UpdateChannelBalance(&_HermesImplementation.TransactOpts, _channelId, _newBalance)
}

// UpdateStakeGoal is a paid mutator transaction binding the contract method 0xea48d8bf.
//
// Solidity: function updateStakeGoal(bytes32 _channelId, uint256 _newStakeGoal, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactor) UpdateStakeGoal(opts *bind.TransactOpts, _channelId [32]byte, _newStakeGoal *big.Int, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "updateStakeGoal", _channelId, _newStakeGoal, _nonce, _signature)
}

// UpdateStakeGoal is a paid mutator transaction binding the contract method 0xea48d8bf.
//
// Solidity: function updateStakeGoal(bytes32 _channelId, uint256 _newStakeGoal, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationSession) UpdateStakeGoal(_channelId [32]byte, _newStakeGoal *big.Int, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.UpdateStakeGoal(&_HermesImplementation.TransactOpts, _channelId, _newStakeGoal, _nonce, _signature)
}

// UpdateStakeGoal is a paid mutator transaction binding the contract method 0xea48d8bf.
//
// Solidity: function updateStakeGoal(bytes32 _channelId, uint256 _newStakeGoal, uint256 _nonce, bytes _signature) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) UpdateStakeGoal(_channelId [32]byte, _newStakeGoal *big.Int, _nonce *big.Int, _signature []byte) (*types.Transaction, error) {
	return _HermesImplementation.Contract.UpdateStakeGoal(&_HermesImplementation.TransactOpts, _channelId, _newStakeGoal, _nonce, _signature)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactor) Withdraw(opts *bind.TransactOpts, _beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.contract.Transact(opts, "withdraw", _beneficiary, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationSession) Withdraw(_beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Withdraw(&_HermesImplementation.TransactOpts, _beneficiary, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address _beneficiary, uint256 _amount) returns()
func (_HermesImplementation *HermesImplementationTransactorSession) Withdraw(_beneficiary common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _HermesImplementation.Contract.Withdraw(&_HermesImplementation.TransactOpts, _beneficiary, _amount)
}

// HermesImplementationChannelBalanceDecreaseRequestedIterator is returned from FilterChannelBalanceDecreaseRequested and is used to iterate over the raw logs and unpacked data for ChannelBalanceDecreaseRequested events raised by the HermesImplementation contract.
type HermesImplementationChannelBalanceDecreaseRequestedIterator struct {
	Event *HermesImplementationChannelBalanceDecreaseRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelBalanceDecreaseRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelBalanceDecreaseRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelBalanceDecreaseRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelBalanceDecreaseRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelBalanceDecreaseRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelBalanceDecreaseRequested represents a ChannelBalanceDecreaseRequested event raised by the HermesImplementation contract.
type HermesImplementationChannelBalanceDecreaseRequested struct {
	ChannelId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterChannelBalanceDecreaseRequested is a free log retrieval operation binding the contract event 0xaf4c616dc7856b81dbc1346e5547f0a1d4f1553011653f920d1041f215401075.
//
// Solidity: event ChannelBalanceDecreaseRequested(bytes32 indexed channelId)
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelBalanceDecreaseRequested(opts *bind.FilterOpts, channelId [][32]byte) (*HermesImplementationChannelBalanceDecreaseRequestedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelBalanceDecreaseRequested", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelBalanceDecreaseRequestedIterator{contract: _HermesImplementation.contract, event: "ChannelBalanceDecreaseRequested", logs: logs, sub: sub}, nil
}

// WatchChannelBalanceDecreaseRequested is a free log subscription operation binding the contract event 0xaf4c616dc7856b81dbc1346e5547f0a1d4f1553011653f920d1041f215401075.
//
// Solidity: event ChannelBalanceDecreaseRequested(bytes32 indexed channelId)
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelBalanceDecreaseRequested(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelBalanceDecreaseRequested, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelBalanceDecreaseRequested", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelBalanceDecreaseRequested)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelBalanceDecreaseRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelBalanceDecreaseRequested is a log parse operation binding the contract event 0xaf4c616dc7856b81dbc1346e5547f0a1d4f1553011653f920d1041f215401075.
//
// Solidity: event ChannelBalanceDecreaseRequested(bytes32 indexed channelId)
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelBalanceDecreaseRequested(log types.Log) (*HermesImplementationChannelBalanceDecreaseRequested, error) {
	event := new(HermesImplementationChannelBalanceDecreaseRequested)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelBalanceDecreaseRequested", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationChannelBalanceUpdatedIterator is returned from FilterChannelBalanceUpdated and is used to iterate over the raw logs and unpacked data for ChannelBalanceUpdated events raised by the HermesImplementation contract.
type HermesImplementationChannelBalanceUpdatedIterator struct {
	Event *HermesImplementationChannelBalanceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelBalanceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelBalanceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelBalanceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelBalanceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelBalanceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelBalanceUpdated represents a ChannelBalanceUpdated event raised by the HermesImplementation contract.
type HermesImplementationChannelBalanceUpdated struct {
	ChannelId  [32]byte
	NewBalance *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterChannelBalanceUpdated is a free log retrieval operation binding the contract event 0x2eb87c52e5d2d7395da77618aa1afe310b9cf13fa9f70e3199d100adda3a7aa5.
//
// Solidity: event ChannelBalanceUpdated(bytes32 indexed channelId, uint256 newBalance)
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelBalanceUpdated(opts *bind.FilterOpts, channelId [][32]byte) (*HermesImplementationChannelBalanceUpdatedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelBalanceUpdated", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelBalanceUpdatedIterator{contract: _HermesImplementation.contract, event: "ChannelBalanceUpdated", logs: logs, sub: sub}, nil
}

// WatchChannelBalanceUpdated is a free log subscription operation binding the contract event 0x2eb87c52e5d2d7395da77618aa1afe310b9cf13fa9f70e3199d100adda3a7aa5.
//
// Solidity: event ChannelBalanceUpdated(bytes32 indexed channelId, uint256 newBalance)
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelBalanceUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelBalanceUpdated, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelBalanceUpdated", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelBalanceUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelBalanceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelBalanceUpdated is a log parse operation binding the contract event 0x2eb87c52e5d2d7395da77618aa1afe310b9cf13fa9f70e3199d100adda3a7aa5.
//
// Solidity: event ChannelBalanceUpdated(bytes32 indexed channelId, uint256 newBalance)
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelBalanceUpdated(log types.Log) (*HermesImplementationChannelBalanceUpdated, error) {
	event := new(HermesImplementationChannelBalanceUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelBalanceUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationChannelBeneficiaryChangedIterator is returned from FilterChannelBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for ChannelBeneficiaryChanged events raised by the HermesImplementation contract.
type HermesImplementationChannelBeneficiaryChangedIterator struct {
	Event *HermesImplementationChannelBeneficiaryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelBeneficiaryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelBeneficiaryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelBeneficiaryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelBeneficiaryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelBeneficiaryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelBeneficiaryChanged represents a ChannelBeneficiaryChanged event raised by the HermesImplementation contract.
type HermesImplementationChannelBeneficiaryChanged struct {
	ChannelId      [32]byte
	NewBeneficiary common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChannelBeneficiaryChanged is a free log retrieval operation binding the contract event 0x8756aa559142225f918d7584303ecfe48e75b454f6614d0fae9f0d6ca0a898cc.
//
// Solidity: event ChannelBeneficiaryChanged(bytes32 channelId, address newBeneficiary)
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelBeneficiaryChanged(opts *bind.FilterOpts) (*HermesImplementationChannelBeneficiaryChangedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelBeneficiaryChanged")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelBeneficiaryChangedIterator{contract: _HermesImplementation.contract, event: "ChannelBeneficiaryChanged", logs: logs, sub: sub}, nil
}

// WatchChannelBeneficiaryChanged is a free log subscription operation binding the contract event 0x8756aa559142225f918d7584303ecfe48e75b454f6614d0fae9f0d6ca0a898cc.
//
// Solidity: event ChannelBeneficiaryChanged(bytes32 channelId, address newBeneficiary)
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelBeneficiaryChanged) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelBeneficiaryChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelBeneficiaryChanged)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelBeneficiaryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelBeneficiaryChanged is a log parse operation binding the contract event 0x8756aa559142225f918d7584303ecfe48e75b454f6614d0fae9f0d6ca0a898cc.
//
// Solidity: event ChannelBeneficiaryChanged(bytes32 channelId, address newBeneficiary)
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelBeneficiaryChanged(log types.Log) (*HermesImplementationChannelBeneficiaryChanged, error) {
	event := new(HermesImplementationChannelBeneficiaryChanged)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelBeneficiaryChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationChannelOpenedIterator is returned from FilterChannelOpened and is used to iterate over the raw logs and unpacked data for ChannelOpened events raised by the HermesImplementation contract.
type HermesImplementationChannelOpenedIterator struct {
	Event *HermesImplementationChannelOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelOpened represents a ChannelOpened event raised by the HermesImplementation contract.
type HermesImplementationChannelOpened struct {
	ChannelId      [32]byte
	InitialBalance *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterChannelOpened is a free log retrieval operation binding the contract event 0xbe2e1f3a6197dfd16fa6830c4870364b618b8b288c21cbcfa4fdb5d7c6a5e45b.
//
// Solidity: event ChannelOpened(bytes32 channelId, uint256 initialBalance)
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelOpened(opts *bind.FilterOpts) (*HermesImplementationChannelOpenedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelOpened")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelOpenedIterator{contract: _HermesImplementation.contract, event: "ChannelOpened", logs: logs, sub: sub}, nil
}

// WatchChannelOpened is a free log subscription operation binding the contract event 0xbe2e1f3a6197dfd16fa6830c4870364b618b8b288c21cbcfa4fdb5d7c6a5e45b.
//
// Solidity: event ChannelOpened(bytes32 channelId, uint256 initialBalance)
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelOpened(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelOpened) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelOpened")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelOpened)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpened is a log parse operation binding the contract event 0xbe2e1f3a6197dfd16fa6830c4870364b618b8b288c21cbcfa4fdb5d7c6a5e45b.
//
// Solidity: event ChannelOpened(bytes32 channelId, uint256 initialBalance)
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelOpened(log types.Log) (*HermesImplementationChannelOpened, error) {
	event := new(HermesImplementationChannelOpened)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpened", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationChannelOpeningActivatedIterator is returned from FilterChannelOpeningActivated and is used to iterate over the raw logs and unpacked data for ChannelOpeningActivated events raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningActivatedIterator struct {
	Event *HermesImplementationChannelOpeningActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelOpeningActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelOpeningActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelOpeningActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelOpeningActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelOpeningActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelOpeningActivated represents a ChannelOpeningActivated event raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningActivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChannelOpeningActivated is a free log retrieval operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelOpeningActivated(opts *bind.FilterOpts) (*HermesImplementationChannelOpeningActivatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelOpeningActivated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelOpeningActivatedIterator{contract: _HermesImplementation.contract, event: "ChannelOpeningActivated", logs: logs, sub: sub}, nil
}

// WatchChannelOpeningActivated is a free log subscription operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelOpeningActivated(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelOpeningActivated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelOpeningActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelOpeningActivated)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpeningActivated is a log parse operation binding the contract event 0x2d8b6ec230798e206d536342a28b7b61cc8fcfafb1d27c11c5519b3c42eb7df8.
//
// Solidity: event ChannelOpeningActivated()
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelOpeningActivated(log types.Log) (*HermesImplementationChannelOpeningActivated, error) {
	event := new(HermesImplementationChannelOpeningActivated)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningActivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationChannelOpeningPausedIterator is returned from FilterChannelOpeningPaused and is used to iterate over the raw logs and unpacked data for ChannelOpeningPaused events raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningPausedIterator struct {
	Event *HermesImplementationChannelOpeningPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationChannelOpeningPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationChannelOpeningPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationChannelOpeningPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationChannelOpeningPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationChannelOpeningPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationChannelOpeningPaused represents a ChannelOpeningPaused event raised by the HermesImplementation contract.
type HermesImplementationChannelOpeningPaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterChannelOpeningPaused is a free log retrieval operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_HermesImplementation *HermesImplementationFilterer) FilterChannelOpeningPaused(opts *bind.FilterOpts) (*HermesImplementationChannelOpeningPausedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "ChannelOpeningPaused")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationChannelOpeningPausedIterator{contract: _HermesImplementation.contract, event: "ChannelOpeningPaused", logs: logs, sub: sub}, nil
}

// WatchChannelOpeningPaused is a free log subscription operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_HermesImplementation *HermesImplementationFilterer) WatchChannelOpeningPaused(opts *bind.WatchOpts, sink chan<- *HermesImplementationChannelOpeningPaused) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "ChannelOpeningPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationChannelOpeningPaused)
				if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChannelOpeningPaused is a log parse operation binding the contract event 0x1f4cd5d6edef8a0c4dbe6d547fdc42e0f3575167257553271f2366f9d497f67e.
//
// Solidity: event ChannelOpeningPaused()
func (_HermesImplementation *HermesImplementationFilterer) ParseChannelOpeningPaused(log types.Log) (*HermesImplementationChannelOpeningPaused, error) {
	event := new(HermesImplementationChannelOpeningPaused)
	if err := _HermesImplementation.contract.UnpackLog(event, "ChannelOpeningPaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationDestinationChangedIterator is returned from FilterDestinationChanged and is used to iterate over the raw logs and unpacked data for DestinationChanged events raised by the HermesImplementation contract.
type HermesImplementationDestinationChangedIterator struct {
	Event *HermesImplementationDestinationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationDestinationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationDestinationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationDestinationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationDestinationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationDestinationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationDestinationChanged represents a DestinationChanged event raised by the HermesImplementation contract.
type HermesImplementationDestinationChanged struct {
	PreviousDestination common.Address
	NewDestination      common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDestinationChanged is a free log retrieval operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_HermesImplementation *HermesImplementationFilterer) FilterDestinationChanged(opts *bind.FilterOpts, previousDestination []common.Address, newDestination []common.Address) (*HermesImplementationDestinationChangedIterator, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationDestinationChangedIterator{contract: _HermesImplementation.contract, event: "DestinationChanged", logs: logs, sub: sub}, nil
}

// WatchDestinationChanged is a free log subscription operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_HermesImplementation *HermesImplementationFilterer) WatchDestinationChanged(opts *bind.WatchOpts, sink chan<- *HermesImplementationDestinationChanged, previousDestination []common.Address, newDestination []common.Address) (event.Subscription, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationDestinationChanged)
				if err := _HermesImplementation.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDestinationChanged is a log parse operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_HermesImplementation *HermesImplementationFilterer) ParseDestinationChanged(log types.Log) (*HermesImplementationDestinationChanged, error) {
	event := new(HermesImplementationDestinationChanged)
	if err := _HermesImplementation.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationFundsWithdrawnedIterator is returned from FilterFundsWithdrawned and is used to iterate over the raw logs and unpacked data for FundsWithdrawned events raised by the HermesImplementation contract.
type HermesImplementationFundsWithdrawnedIterator struct {
	Event *HermesImplementationFundsWithdrawned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationFundsWithdrawnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationFundsWithdrawned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationFundsWithdrawned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationFundsWithdrawnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationFundsWithdrawnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationFundsWithdrawned represents a FundsWithdrawned event raised by the HermesImplementation contract.
type HermesImplementationFundsWithdrawned struct {
	Amount      *big.Int
	Beneficiary common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterFundsWithdrawned is a free log retrieval operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_HermesImplementation *HermesImplementationFilterer) FilterFundsWithdrawned(opts *bind.FilterOpts) (*HermesImplementationFundsWithdrawnedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "FundsWithdrawned")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationFundsWithdrawnedIterator{contract: _HermesImplementation.contract, event: "FundsWithdrawned", logs: logs, sub: sub}, nil
}

// WatchFundsWithdrawned is a free log subscription operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_HermesImplementation *HermesImplementationFilterer) WatchFundsWithdrawned(opts *bind.WatchOpts, sink chan<- *HermesImplementationFundsWithdrawned) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "FundsWithdrawned")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationFundsWithdrawned)
				if err := _HermesImplementation.contract.UnpackLog(event, "FundsWithdrawned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsWithdrawned is a log parse operation binding the contract event 0xa2e147ce2b7cb83d9c07e397bb806f23dd42c42e86ea45e1611d6e50eb1ec8bf.
//
// Solidity: event FundsWithdrawned(uint256 amount, address beneficiary)
func (_HermesImplementation *HermesImplementationFilterer) ParseFundsWithdrawned(log types.Log) (*HermesImplementationFundsWithdrawned, error) {
	event := new(HermesImplementationFundsWithdrawned)
	if err := _HermesImplementation.contract.UnpackLog(event, "FundsWithdrawned", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationHermesClosedIterator is returned from FilterHermesClosed and is used to iterate over the raw logs and unpacked data for HermesClosed events raised by the HermesImplementation contract.
type HermesImplementationHermesClosedIterator struct {
	Event *HermesImplementationHermesClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesClosed represents a HermesClosed event raised by the HermesImplementation contract.
type HermesImplementationHermesClosed struct {
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterHermesClosed is a free log retrieval operation binding the contract event 0xfa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e45.
//
// Solidity: event HermesClosed(uint256 blockNumber)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesClosed(opts *bind.FilterOpts) (*HermesImplementationHermesClosedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesClosed")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesClosedIterator{contract: _HermesImplementation.contract, event: "HermesClosed", logs: logs, sub: sub}, nil
}

// WatchHermesClosed is a free log subscription operation binding the contract event 0xfa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e45.
//
// Solidity: event HermesClosed(uint256 blockNumber)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesClosed(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesClosed) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesClosed)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesClosed is a log parse operation binding the contract event 0xfa9b0c2718819d67ceaec4f97d36185c2f1d22bdc5ff18f44c52cd56a5dd8e45.
//
// Solidity: event HermesClosed(uint256 blockNumber)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesClosed(log types.Log) (*HermesImplementationHermesClosed, error) {
	event := new(HermesImplementationHermesClosed)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesClosed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationHermesFeeUpdatedIterator is returned from FilterHermesFeeUpdated and is used to iterate over the raw logs and unpacked data for HermesFeeUpdated events raised by the HermesImplementation contract.
type HermesImplementationHermesFeeUpdatedIterator struct {
	Event *HermesImplementationHermesFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesFeeUpdated represents a HermesFeeUpdated event raised by the HermesImplementation contract.
type HermesImplementationHermesFeeUpdated struct {
	NewFee         uint16
	ValidFromBlock uint64
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterHermesFeeUpdated is a free log retrieval operation binding the contract event 0xea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b.
//
// Solidity: event HermesFeeUpdated(uint16 newFee, uint64 validFromBlock)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesFeeUpdated(opts *bind.FilterOpts) (*HermesImplementationHermesFeeUpdatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesFeeUpdated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesFeeUpdatedIterator{contract: _HermesImplementation.contract, event: "HermesFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchHermesFeeUpdated is a free log subscription operation binding the contract event 0xea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b.
//
// Solidity: event HermesFeeUpdated(uint16 newFee, uint64 validFromBlock)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesFeeUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesFeeUpdated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesFeeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesFeeUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesFeeUpdated is a log parse operation binding the contract event 0xea76eb91f1817e0757719ea43e0733faf6f1121425bde387d1dd91badb9d403b.
//
// Solidity: event HermesFeeUpdated(uint16 newFee, uint64 validFromBlock)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesFeeUpdated(log types.Log) (*HermesImplementationHermesFeeUpdated, error) {
	event := new(HermesImplementationHermesFeeUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesFeeUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationHermesPunishmentActivatedIterator is returned from FilterHermesPunishmentActivated and is used to iterate over the raw logs and unpacked data for HermesPunishmentActivated events raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentActivatedIterator struct {
	Event *HermesImplementationHermesPunishmentActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesPunishmentActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesPunishmentActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesPunishmentActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesPunishmentActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesPunishmentActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesPunishmentActivated represents a HermesPunishmentActivated event raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentActivated struct {
	ActivationBlock *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterHermesPunishmentActivated is a free log retrieval operation binding the contract event 0x23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629.
//
// Solidity: event HermesPunishmentActivated(uint256 activationBlock)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesPunishmentActivated(opts *bind.FilterOpts) (*HermesImplementationHermesPunishmentActivatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesPunishmentActivated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesPunishmentActivatedIterator{contract: _HermesImplementation.contract, event: "HermesPunishmentActivated", logs: logs, sub: sub}, nil
}

// WatchHermesPunishmentActivated is a free log subscription operation binding the contract event 0x23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629.
//
// Solidity: event HermesPunishmentActivated(uint256 activationBlock)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesPunishmentActivated(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesPunishmentActivated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesPunishmentActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesPunishmentActivated)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesPunishmentActivated is a log parse operation binding the contract event 0x23dc47ee5d995fb521fbe4351f353f3177d7b9d9e15bdd01ed358764c25d9629.
//
// Solidity: event HermesPunishmentActivated(uint256 activationBlock)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesPunishmentActivated(log types.Log) (*HermesImplementationHermesPunishmentActivated, error) {
	event := new(HermesImplementationHermesPunishmentActivated)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentActivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationHermesPunishmentDeactivatedIterator is returned from FilterHermesPunishmentDeactivated and is used to iterate over the raw logs and unpacked data for HermesPunishmentDeactivated events raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentDeactivatedIterator struct {
	Event *HermesImplementationHermesPunishmentDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesPunishmentDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesPunishmentDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesPunishmentDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesPunishmentDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesPunishmentDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesPunishmentDeactivated represents a HermesPunishmentDeactivated event raised by the HermesImplementation contract.
type HermesImplementationHermesPunishmentDeactivated struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterHermesPunishmentDeactivated is a free log retrieval operation binding the contract event 0x5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c.
//
// Solidity: event HermesPunishmentDeactivated()
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesPunishmentDeactivated(opts *bind.FilterOpts) (*HermesImplementationHermesPunishmentDeactivatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesPunishmentDeactivated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesPunishmentDeactivatedIterator{contract: _HermesImplementation.contract, event: "HermesPunishmentDeactivated", logs: logs, sub: sub}, nil
}

// WatchHermesPunishmentDeactivated is a free log subscription operation binding the contract event 0x5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c.
//
// Solidity: event HermesPunishmentDeactivated()
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesPunishmentDeactivated(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesPunishmentDeactivated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesPunishmentDeactivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesPunishmentDeactivated)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesPunishmentDeactivated is a log parse operation binding the contract event 0x5dc43dfad9aedde473e812a66ff033b91a2b1ee060e7dc0746a1a14a4a3bd47c.
//
// Solidity: event HermesPunishmentDeactivated()
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesPunishmentDeactivated(log types.Log) (*HermesImplementationHermesPunishmentDeactivated, error) {
	event := new(HermesImplementationHermesPunishmentDeactivated)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesPunishmentDeactivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationHermesStakeIncreasedIterator is returned from FilterHermesStakeIncreased and is used to iterate over the raw logs and unpacked data for HermesStakeIncreased events raised by the HermesImplementation contract.
type HermesImplementationHermesStakeIncreasedIterator struct {
	Event *HermesImplementationHermesStakeIncreased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationHermesStakeIncreasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationHermesStakeIncreased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationHermesStakeIncreased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationHermesStakeIncreasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationHermesStakeIncreasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationHermesStakeIncreased represents a HermesStakeIncreased event raised by the HermesImplementation contract.
type HermesImplementationHermesStakeIncreased struct {
	NewStake *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterHermesStakeIncreased is a free log retrieval operation binding the contract event 0xeb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed91.
//
// Solidity: event HermesStakeIncreased(uint256 newStake)
func (_HermesImplementation *HermesImplementationFilterer) FilterHermesStakeIncreased(opts *bind.FilterOpts) (*HermesImplementationHermesStakeIncreasedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "HermesStakeIncreased")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationHermesStakeIncreasedIterator{contract: _HermesImplementation.contract, event: "HermesStakeIncreased", logs: logs, sub: sub}, nil
}

// WatchHermesStakeIncreased is a free log subscription operation binding the contract event 0xeb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed91.
//
// Solidity: event HermesStakeIncreased(uint256 newStake)
func (_HermesImplementation *HermesImplementationFilterer) WatchHermesStakeIncreased(opts *bind.WatchOpts, sink chan<- *HermesImplementationHermesStakeIncreased) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "HermesStakeIncreased")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationHermesStakeIncreased)
				if err := _HermesImplementation.contract.UnpackLog(event, "HermesStakeIncreased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesStakeIncreased is a log parse operation binding the contract event 0xeb10b8b69c3eb290299237eaee4760bf1c02734ce3dc7740d6f2017b5ca3ed91.
//
// Solidity: event HermesStakeIncreased(uint256 newStake)
func (_HermesImplementation *HermesImplementationFilterer) ParseHermesStakeIncreased(log types.Log) (*HermesImplementationHermesStakeIncreased, error) {
	event := new(HermesImplementationHermesStakeIncreased)
	if err := _HermesImplementation.contract.UnpackLog(event, "HermesStakeIncreased", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationMaxStakeValueUpdatedIterator is returned from FilterMaxStakeValueUpdated and is used to iterate over the raw logs and unpacked data for MaxStakeValueUpdated events raised by the HermesImplementation contract.
type HermesImplementationMaxStakeValueUpdatedIterator struct {
	Event *HermesImplementationMaxStakeValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationMaxStakeValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationMaxStakeValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationMaxStakeValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationMaxStakeValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationMaxStakeValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationMaxStakeValueUpdated represents a MaxStakeValueUpdated event raised by the HermesImplementation contract.
type HermesImplementationMaxStakeValueUpdated struct {
	NewMaxStake *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMaxStakeValueUpdated is a free log retrieval operation binding the contract event 0x53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d.
//
// Solidity: event MaxStakeValueUpdated(uint256 newMaxStake)
func (_HermesImplementation *HermesImplementationFilterer) FilterMaxStakeValueUpdated(opts *bind.FilterOpts) (*HermesImplementationMaxStakeValueUpdatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "MaxStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationMaxStakeValueUpdatedIterator{contract: _HermesImplementation.contract, event: "MaxStakeValueUpdated", logs: logs, sub: sub}, nil
}

// WatchMaxStakeValueUpdated is a free log subscription operation binding the contract event 0x53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d.
//
// Solidity: event MaxStakeValueUpdated(uint256 newMaxStake)
func (_HermesImplementation *HermesImplementationFilterer) WatchMaxStakeValueUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationMaxStakeValueUpdated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "MaxStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationMaxStakeValueUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "MaxStakeValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaxStakeValueUpdated is a log parse operation binding the contract event 0x53f4fb18cb329155d5af04681c1d0846d0484d7de33791619c6988ca61910e3d.
//
// Solidity: event MaxStakeValueUpdated(uint256 newMaxStake)
func (_HermesImplementation *HermesImplementationFilterer) ParseMaxStakeValueUpdated(log types.Log) (*HermesImplementationMaxStakeValueUpdated, error) {
	event := new(HermesImplementationMaxStakeValueUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "MaxStakeValueUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationMinStakeValueUpdatedIterator is returned from FilterMinStakeValueUpdated and is used to iterate over the raw logs and unpacked data for MinStakeValueUpdated events raised by the HermesImplementation contract.
type HermesImplementationMinStakeValueUpdatedIterator struct {
	Event *HermesImplementationMinStakeValueUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationMinStakeValueUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationMinStakeValueUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationMinStakeValueUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationMinStakeValueUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationMinStakeValueUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationMinStakeValueUpdated represents a MinStakeValueUpdated event raised by the HermesImplementation contract.
type HermesImplementationMinStakeValueUpdated struct {
	NewMinStake *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterMinStakeValueUpdated is a free log retrieval operation binding the contract event 0xb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb031251.
//
// Solidity: event MinStakeValueUpdated(uint256 newMinStake)
func (_HermesImplementation *HermesImplementationFilterer) FilterMinStakeValueUpdated(opts *bind.FilterOpts) (*HermesImplementationMinStakeValueUpdatedIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "MinStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationMinStakeValueUpdatedIterator{contract: _HermesImplementation.contract, event: "MinStakeValueUpdated", logs: logs, sub: sub}, nil
}

// WatchMinStakeValueUpdated is a free log subscription operation binding the contract event 0xb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb031251.
//
// Solidity: event MinStakeValueUpdated(uint256 newMinStake)
func (_HermesImplementation *HermesImplementationFilterer) WatchMinStakeValueUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationMinStakeValueUpdated) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "MinStakeValueUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationMinStakeValueUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "MinStakeValueUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinStakeValueUpdated is a log parse operation binding the contract event 0xb9e5e6e8db1283ee860f3856d8383e40665c58a5264ede5e6ed8ec1afb031251.
//
// Solidity: event MinStakeValueUpdated(uint256 newMinStake)
func (_HermesImplementation *HermesImplementationFilterer) ParseMinStakeValueUpdated(log types.Log) (*HermesImplementationMinStakeValueUpdated, error) {
	event := new(HermesImplementationMinStakeValueUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "MinStakeValueUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationNewHermesOperatorIterator is returned from FilterNewHermesOperator and is used to iterate over the raw logs and unpacked data for NewHermesOperator events raised by the HermesImplementation contract.
type HermesImplementationNewHermesOperatorIterator struct {
	Event *HermesImplementationNewHermesOperator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationNewHermesOperatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationNewHermesOperator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationNewHermesOperator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationNewHermesOperatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationNewHermesOperatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationNewHermesOperator represents a NewHermesOperator event raised by the HermesImplementation contract.
type HermesImplementationNewHermesOperator struct {
	NewOperator common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewHermesOperator is a free log retrieval operation binding the contract event 0xbc84399c3fec552aa29d6b02eefe7180532020bf40739f24e0b8a6fc4035455e.
//
// Solidity: event NewHermesOperator(address newOperator)
func (_HermesImplementation *HermesImplementationFilterer) FilterNewHermesOperator(opts *bind.FilterOpts) (*HermesImplementationNewHermesOperatorIterator, error) {

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "NewHermesOperator")
	if err != nil {
		return nil, err
	}
	return &HermesImplementationNewHermesOperatorIterator{contract: _HermesImplementation.contract, event: "NewHermesOperator", logs: logs, sub: sub}, nil
}

// WatchNewHermesOperator is a free log subscription operation binding the contract event 0xbc84399c3fec552aa29d6b02eefe7180532020bf40739f24e0b8a6fc4035455e.
//
// Solidity: event NewHermesOperator(address newOperator)
func (_HermesImplementation *HermesImplementationFilterer) WatchNewHermesOperator(opts *bind.WatchOpts, sink chan<- *HermesImplementationNewHermesOperator) (event.Subscription, error) {

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "NewHermesOperator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationNewHermesOperator)
				if err := _HermesImplementation.contract.UnpackLog(event, "NewHermesOperator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewHermesOperator is a log parse operation binding the contract event 0xbc84399c3fec552aa29d6b02eefe7180532020bf40739f24e0b8a6fc4035455e.
//
// Solidity: event NewHermesOperator(address newOperator)
func (_HermesImplementation *HermesImplementationFilterer) ParseNewHermesOperator(log types.Log) (*HermesImplementationNewHermesOperator, error) {
	event := new(HermesImplementationNewHermesOperator)
	if err := _HermesImplementation.contract.UnpackLog(event, "NewHermesOperator", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationNewStakeIterator is returned from FilterNewStake and is used to iterate over the raw logs and unpacked data for NewStake events raised by the HermesImplementation contract.
type HermesImplementationNewStakeIterator struct {
	Event *HermesImplementationNewStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationNewStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationNewStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationNewStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationNewStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationNewStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationNewStake represents a NewStake event raised by the HermesImplementation contract.
type HermesImplementationNewStake struct {
	ChannelId   [32]byte
	StakeAmount *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterNewStake is a free log retrieval operation binding the contract event 0xc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb.
//
// Solidity: event NewStake(bytes32 indexed channelId, uint256 stakeAmount)
func (_HermesImplementation *HermesImplementationFilterer) FilterNewStake(opts *bind.FilterOpts, channelId [][32]byte) (*HermesImplementationNewStakeIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "NewStake", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationNewStakeIterator{contract: _HermesImplementation.contract, event: "NewStake", logs: logs, sub: sub}, nil
}

// WatchNewStake is a free log subscription operation binding the contract event 0xc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb.
//
// Solidity: event NewStake(bytes32 indexed channelId, uint256 stakeAmount)
func (_HermesImplementation *HermesImplementationFilterer) WatchNewStake(opts *bind.WatchOpts, sink chan<- *HermesImplementationNewStake, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "NewStake", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationNewStake)
				if err := _HermesImplementation.contract.UnpackLog(event, "NewStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewStake is a log parse operation binding the contract event 0xc5f0715c45dab2e8f14871936119e3c64fd5841d397130c2d1db743d142522cb.
//
// Solidity: event NewStake(bytes32 indexed channelId, uint256 stakeAmount)
func (_HermesImplementation *HermesImplementationFilterer) ParseNewStake(log types.Log) (*HermesImplementationNewStake, error) {
	event := new(HermesImplementationNewStake)
	if err := _HermesImplementation.contract.UnpackLog(event, "NewStake", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the HermesImplementation contract.
type HermesImplementationOwnershipTransferredIterator struct {
	Event *HermesImplementationOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationOwnershipTransferred represents a OwnershipTransferred event raised by the HermesImplementation contract.
type HermesImplementationOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_HermesImplementation *HermesImplementationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*HermesImplementationOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationOwnershipTransferredIterator{contract: _HermesImplementation.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_HermesImplementation *HermesImplementationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *HermesImplementationOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationOwnershipTransferred)
				if err := _HermesImplementation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_HermesImplementation *HermesImplementationFilterer) ParseOwnershipTransferred(log types.Log) (*HermesImplementationOwnershipTransferred, error) {
	event := new(HermesImplementationOwnershipTransferred)
	if err := _HermesImplementation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationPromiseSettledIterator is returned from FilterPromiseSettled and is used to iterate over the raw logs and unpacked data for PromiseSettled events raised by the HermesImplementation contract.
type HermesImplementationPromiseSettledIterator struct {
	Event *HermesImplementationPromiseSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationPromiseSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationPromiseSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationPromiseSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationPromiseSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationPromiseSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationPromiseSettled represents a PromiseSettled event raised by the HermesImplementation contract.
type HermesImplementationPromiseSettled struct {
	ChannelId    [32]byte
	Beneficiary  common.Address
	Amount       *big.Int
	TotalSettled *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterPromiseSettled is a free log retrieval operation binding the contract event 0xa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668.
//
// Solidity: event PromiseSettled(bytes32 indexed channelId, address beneficiary, uint256 amount, uint256 totalSettled)
func (_HermesImplementation *HermesImplementationFilterer) FilterPromiseSettled(opts *bind.FilterOpts, channelId [][32]byte) (*HermesImplementationPromiseSettledIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "PromiseSettled", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationPromiseSettledIterator{contract: _HermesImplementation.contract, event: "PromiseSettled", logs: logs, sub: sub}, nil
}

// WatchPromiseSettled is a free log subscription operation binding the contract event 0xa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668.
//
// Solidity: event PromiseSettled(bytes32 indexed channelId, address beneficiary, uint256 amount, uint256 totalSettled)
func (_HermesImplementation *HermesImplementationFilterer) WatchPromiseSettled(opts *bind.WatchOpts, sink chan<- *HermesImplementationPromiseSettled, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "PromiseSettled", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationPromiseSettled)
				if err := _HermesImplementation.contract.UnpackLog(event, "PromiseSettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromiseSettled is a log parse operation binding the contract event 0xa5a1f05785a942c5f624cee545c68394881a83bcaf21a83f4d76a9e8240a5668.
//
// Solidity: event PromiseSettled(bytes32 indexed channelId, address beneficiary, uint256 amount, uint256 totalSettled)
func (_HermesImplementation *HermesImplementationFilterer) ParsePromiseSettled(log types.Log) (*HermesImplementationPromiseSettled, error) {
	event := new(HermesImplementationPromiseSettled)
	if err := _HermesImplementation.contract.UnpackLog(event, "PromiseSettled", log); err != nil {
		return nil, err
	}
	return event, nil
}

// HermesImplementationStakeGoalUpdatedIterator is returned from FilterStakeGoalUpdated and is used to iterate over the raw logs and unpacked data for StakeGoalUpdated events raised by the HermesImplementation contract.
type HermesImplementationStakeGoalUpdatedIterator struct {
	Event *HermesImplementationStakeGoalUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *HermesImplementationStakeGoalUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(HermesImplementationStakeGoalUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(HermesImplementationStakeGoalUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *HermesImplementationStakeGoalUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *HermesImplementationStakeGoalUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// HermesImplementationStakeGoalUpdated represents a StakeGoalUpdated event raised by the HermesImplementation contract.
type HermesImplementationStakeGoalUpdated struct {
	ChannelId    [32]byte
	NewStakeGoal *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStakeGoalUpdated is a free log retrieval operation binding the contract event 0x5ec1b60bc705196753b2e21e144bbb185e6ef7264f9d79b99f04f1bc22198733.
//
// Solidity: event StakeGoalUpdated(bytes32 indexed channelId, uint256 newStakeGoal)
func (_HermesImplementation *HermesImplementationFilterer) FilterStakeGoalUpdated(opts *bind.FilterOpts, channelId [][32]byte) (*HermesImplementationStakeGoalUpdatedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.FilterLogs(opts, "StakeGoalUpdated", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &HermesImplementationStakeGoalUpdatedIterator{contract: _HermesImplementation.contract, event: "StakeGoalUpdated", logs: logs, sub: sub}, nil
}

// WatchStakeGoalUpdated is a free log subscription operation binding the contract event 0x5ec1b60bc705196753b2e21e144bbb185e6ef7264f9d79b99f04f1bc22198733.
//
// Solidity: event StakeGoalUpdated(bytes32 indexed channelId, uint256 newStakeGoal)
func (_HermesImplementation *HermesImplementationFilterer) WatchStakeGoalUpdated(opts *bind.WatchOpts, sink chan<- *HermesImplementationStakeGoalUpdated, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _HermesImplementation.contract.WatchLogs(opts, "StakeGoalUpdated", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(HermesImplementationStakeGoalUpdated)
				if err := _HermesImplementation.contract.UnpackLog(event, "StakeGoalUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeGoalUpdated is a log parse operation binding the contract event 0x5ec1b60bc705196753b2e21e144bbb185e6ef7264f9d79b99f04f1bc22198733.
//
// Solidity: event StakeGoalUpdated(bytes32 indexed channelId, uint256 newStakeGoal)
func (_HermesImplementation *HermesImplementationFilterer) ParseStakeGoalUpdated(log types.Log) (*HermesImplementationStakeGoalUpdated, error) {
	event := new(HermesImplementationStakeGoalUpdated)
	if err := _HermesImplementation.contract.UnpackLog(event, "StakeGoalUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}
