/* Mysterium network payment library.
 *
 * Copyright (C) 2021 BlockDev AG
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RegistryABI is the input ABI used to generate the binding from.
const RegistryABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"_dexAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimalHermesStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_channelImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hermesId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"channelAddress\",\"type\":\"address\"}],\"name\":\"ConsumerChannelCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"DestinationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hermesId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newURL\",\"type\":\"bytes\"}],\"name\":\"HermesURLUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hermesId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hermesOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ur\",\"type\":\"bytes\"}],\"name\":\"RegisteredHermes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"RegisteredIdentity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimEthers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hermeses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"implVer\",\"type\":\"uint256\"},{\"internalType\":\"function()viewexternalreturns(uint256)\",\"name\":\"stake\",\"type\":\"function\"},{\"internalType\":\"bytes\",\"name\":\"url\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalHermesStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newDestination\",\"type\":\"address\"}],\"name\":\"setFundsDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transactorFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesOperator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hermesStake\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_hermesFee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minChannelStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxChannelStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_url\",\"type\":\"bytes\"}],\"name\":\"registerHermes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"getChannelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesOperator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_implVer\",\"type\":\"uint256\"}],\"name\":\"getHermesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesOperator\",\"type\":\"address\"}],\"name\":\"getHermesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"getHermesURL\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_url\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"updateHermesURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"getProxyCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_implVer\",\"type\":\"uint256\"}],\"name\":\"getChannelImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChannelImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_implVer\",\"type\":\"uint256\"}],\"name\":\"getHermesImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHermesImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newChannelImplAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newHermesImplAddress\",\"type\":\"address\"}],\"name\":\"setImplementations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastImplVer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasParentRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hermesId\",\"type\":\"address\"}],\"name\":\"isHermes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"transferCollectedFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// RegistryBin is the compiled bytecode used for deploying new contracts.
var RegistryBin = "0x60806040523480156200001157600080fd5b5060405162002e9038038062002e90833981810160405260a08110156200003757600080fd5b5080516020820151604083015160608401516080909401516005829055929391929091906001600160a01b0385166200006f57600080fd5b600280546001600160a01b0319166001600160a01b038781169190911790915584166200009b57600080fd5b600480546001600160a01b0319166001600160a01b038616179055620000c28282620000d8565b620000cd3362000239565b505050505062000345565b6000546001600160a01b0316331480620000fb57506000546001600160a01b0316155b6200013c576040805162461bcd60e51b8152602060048201819052602482015260008051602062002e70833981519152604482015290519081900360640190fd5b62000147826200033f565b80156200015a57506200015a816200033f565b620001975760405162461bcd60e51b815260040180806020018281038252603481526020018062002e166034913960400191505060405180910390fd5b604080518082019091526001600160a01b0392831681529082166020820190815260068054600181018255600091909152915160029092027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810180549385166001600160a01b031994851617905590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d409091018054919093169116179055565b6000546001600160a01b03163314806200025c57506000546001600160a01b0316155b6200029d576040805162461bcd60e51b8152602060048201819052602482015260008051602062002e70833981519152604482015290519081900360640190fd5b6001600160a01b038116620002e45760405162461bcd60e51b815260040180806020018281038252602681526020018062002e4a6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3b151590565b612ac180620003556000396000f3fe6080604052600436106101dc5760003560e01c80639936a87b11610102578063d0171d7911610095578063e617aaac11610064578063e617aaac14610adf578063f2fde38b14610b1a578063f58c5b6e14610b4d578063fc0c546a14610b6257610218565b8063d0171d79146108d2578063d5929fe31461099c578063df8de3e714610a79578063e325253714610aac57610218565b8063bf1eb88a116100d1578063bf1eb88a14610764578063c3c5a54714610797578063cdd596e0146107ca578063cf10c969146107fd57610218565b80639936a87b1461052e578063ab86721314610543578063acc831d0146105eb578063add10dda1461061e57610218565b80636332b0801161017a5780637c671a21116101495780637c671a211461049f57806385bff341146104b45780638cfef547146104ef5780638da5cb5b1461051957610218565b80636332b0801461044b57806366cf587514610460578063692058c2146104755780636931b5501461048a57610218565b806341ca71ab116101b657806341ca71ab146103725780634b6bd6be146103b8578063505a1b31146103f157806352631ab41461042457610218565b806303fb422f1461021d578063238e130a146102f6578063332ff7bd1461032b57610218565b366102185760405162461bcd60e51b81526004018080602001828103825260278152602001806129c76027913960400191505060405180910390fd5b600080fd5b34801561022957600080fd5b506102506004803603602081101561024057600080fd5b50356001600160a01b0316610b77565b60405180866001600160a01b03168152602001858152602001848463ffffffff169060201b1760401b815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102b757818101518382015260200161029f565b50505050905090810190601f1680156102e45780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561030257600080fd5b506103296004803603602081101561031957600080fd5b50356001600160a01b0316610c43565b005b34801561033757600080fd5b5061035e6004803603602081101561034e57600080fd5b50356001600160a01b0316610d13565b604080519115158252519081900360200190f35b34801561037e57600080fd5b5061039c6004803603602081101561039557600080fd5b5035610d1b565b604080516001600160a01b039092168252519081900360200190f35b3480156103c457600080fd5b5061039c600480360360408110156103db57600080fd5b506001600160a01b038135169060200135610d4a565b3480156103fd57600080fd5b5061039c6004803603602081101561041457600080fd5b50356001600160a01b0316610d83565b34801561043057600080fd5b50610439610da1565b60408051918252519081900360200190f35b34801561045757600080fd5b50610439610da7565b34801561046c57600080fd5b50610439610db1565b34801561048157600080fd5b5061039c610db7565b34801561049657600080fd5b50610329610dc6565b3480156104ab57600080fd5b5061039c610e17565b3480156104c057600080fd5b50610329600480360360408110156104d757600080fd5b506001600160a01b0381358116916020013516610e4c565b3480156104fb57600080fd5b5061039c6004803603602081101561051257600080fd5b5035610fa3565b34801561052557600080fd5b5061039c610fd5565b34801561053a57600080fd5b5061039c610fe4565b34801561054f57600080fd5b506105766004803603602081101561056657600080fd5b50356001600160a01b031661101c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156105b0578181015183820152602001610598565b50505050905090810190601f1680156105dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105f757600080fd5b5061039c6004803603602081101561060e57600080fd5b50356001600160a01b031661109b565b34801561062a57600080fd5b506103296004803603606081101561064157600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561066b57600080fd5b82018360208201111561067d57600080fd5b803590602001918460018302840111600160201b8311171561069e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156106f057600080fd5b82018360208201111561070257600080fd5b803590602001918460018302840111600160201b8311171561072357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506110cd945050505050565b34801561077057600080fd5b506105766004803603602081101561078757600080fd5b50356001600160a01b0316611302565b3480156107a357600080fd5b5061035e600480360360208110156107ba57600080fd5b50356001600160a01b03166113b0565b3480156107d657600080fd5b5061035e600480360360208110156107ed57600080fd5b50356001600160a01b03166113d0565b34801561080957600080fd5b50610329600480360360a081101561082057600080fd5b6001600160a01b038235811692602081013592604082013592606083013516919081019060a081016080820135600160201b81111561085e57600080fd5b82018360208201111561087057600080fd5b803590602001918460018302840111600160201b8311171561089157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611439945050505050565b3480156108de57600080fd5b50610329600480360360608110156108f557600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561092857600080fd5b82018360208201111561093a57600080fd5b803590602001918460018302840111600160201b8311171561095b57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506119a2945050505050565b3480156109a857600080fd5b50610329600480360360c08110156109bf57600080fd5b6001600160a01b038235169160208101359161ffff604083013516916060810135916080820135919081019060c0810160a0820135600160201b811115610a0557600080fd5b820183602082011115610a1757600080fd5b803590602001918460018302840111600160201b83111715610a3857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611b15945050505050565b348015610a8557600080fd5b5061032960048036036020811015610a9c57600080fd5b50356001600160a01b0316611eb4565b348015610ab857600080fd5b5061032960048036036020811015610acf57600080fd5b50356001600160a01b031661201a565b348015610aeb57600080fd5b5061039c60048036036040811015610b0257600080fd5b506001600160a01b0381358116916020013516612186565b348015610b2657600080fd5b5061032960048036036020811015610b3d57600080fd5b50356001600160a01b0316612201565b348015610b5957600080fd5b5061039c612302565b348015610b6e57600080fd5b5061039c612311565b600760209081526000918252604091829020805460018083015460028085015460038601805489516101009682161596909602600019011692909204601f81018890048802850188019098528784526001600160a01b0394851697929681811c9095169563ffffffff9091169490939290830182828015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b5050505050905085565b6000546001600160a01b0316331480610c6557506000546001600160a01b0316155b610ca4576040805162461bcd60e51b8152602060048201819052602482015260008051602061297a833981519152604482015290519081900360640190fd5b6001600160a01b038116610cb757600080fd5b6001546040516001600160a01b038084169216907fe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad90600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60005b919050565b600060068281548110610d2a57fe5b60009182526020909120600290910201546001600160a01b031692915050565b600080610d5e610d5984610fa3565b61101c565b80516020909101209050610d7b6001600160a01b03851682612320565b949350505050565b6001600160a01b039081166000908152600860205260409020541690565b60035481565b6006546000190190565b60055481565b6004546001600160a01b031681565b6001546001600160a01b0316610ddb57600080fd5b6001546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610e14573d6000803e3d6000fd5b50565b60006006610e23610da7565b81548110610e2d57fe5b60009182526020909120600290910201546001600160a01b0316905090565b6000546001600160a01b0316331480610e6e57506000546001600160a01b0316155b610ead576040805162461bcd60e51b8152602060048201819052602482015260008051602061297a833981519152604482015290519081900360640190fd5b610eb682612367565b8015610ec65750610ec681612367565b610f015760405162461bcd60e51b815260040180806020018281038252603481526020018061275d6034913960400191505060405180910390fd5b604080518082019091526001600160a01b0392831681529082166020820190815260068054600181018255600091909152915160029092027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810180549385166001600160a01b031994851617905590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d409091018054919093169116179055565b600060068281548110610fb257fe5b60009182526020909120600290910201600101546001600160a01b031692915050565b6000546001600160a01b031690565b60006006610ff0610da7565b81548110610ffa57fe5b60009182526020909120600160029092020101546001600160a01b0316905090565b60608060405180606001604052806037815260200161289b603791399050606083901b60005b60148160ff16101561109257818160ff166014811061105d57fe5b1a60f81b838260140160ff168151811061107357fe5b60200101906001600160f81b031916908160001a905350600101611042565b50909392505050565b6000806110a9610d59610fe4565b805160209091012090506110c66001600160a01b03841682612320565b9392505050565b6110d68361236d565b6111115760405162461bcd60e51b815260040180806020018281038252602a8152602001806127ee602a913960400191505060405180910390fd5b60006111c382308686600360008154809291906001019190505560405160200180856001600160a01b031660601b8152601401846001600160a01b031660601b815260140183805190602001908083835b602083106111815780518252601f199092019160209182019101611162565b51815160209384036101000a60001901801990921691161790529201938452506040805180850381529382019052825192019190912094935061243292505050565b6001600160a01b03808616600090815260076020526040902054919250808316911614611229576040805162461bcd60e51b815260206004820152600f60248201526e77726f6e67207369676e617475726560881b604482015290519081900360640190fd5b6001600160a01b0384166000908152600760209081526040909120845161125892600390920191860190612695565b50836001600160a01b03167fd8c638c85547b8717e0d5ca292cff6dbe8fc02fa6e6863a047971c39511643c7846040518080602001828103825283818151815260200191508051906020019080838360005b838110156112c25781810151838201526020016112aa565b50505050905090810190601f1680156112ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390a250505050565b6001600160a01b03811660009081526007602090815260409182902060030180548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452606093928301828280156113a45780601f10611379576101008083540402835291602001916113a4565b820191906000526020600020905b81548152906001019060200180831161138757829003601f168201915b50505050509050919050565b6001600160a01b0390811660009081526008602052604090205416151590565b6001600160a01b038082166000908152600760205260408120805460019091015491921690826114008383610d4a565b9050846001600160a01b0316816001600160a01b0316146114275760009350505050610d16565b61143081612367565b95945050505050565b6114428561236d565b61147d5760405162461bcd60e51b815260040180806020018281038252602b815260200180612a36602b913960400191505060405180910390fd5b6040805130606090811b6020808401919091526001600160601b031989831b8116603485015260488401899052606884018890529186901b90911660888301528251607c818403018152609c90920190925280519101206000906114e19083612432565b90506001600160a01b0381166115285760405162461bcd60e51b8152600401808060200182810382526022815260200180612a146022913960400191505060405180910390fd5b6000611534868661261d565b6002549091506001600160a01b03166370a08231611552848a612186565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561158f57600080fd5b505afa1580156115a3573d6000803e3d6000fd5b505050506040513d60208110156115b957600080fd5b50518111156115f95760405162461bcd60e51b81526004018080602001828103825260348152602001806129466034913960400191505060405180910390fd5b604080516001600160601b0319606085811b82166020808501919091528b821b909216603484015283516028818503018152604890930184528251928201929092206001600160a01b038b16600090815260079092529290206001015461166390610d5990610d1b565b905060006116718383612677565b6002546004805460408051637b809f7b60e11b81526001600160a01b0394851693810193909352908316602483015288831660448301528d8316606483015260848201889052519293509083169163f7013ef69160a48082019260009290919082900301818387803b1580156116e657600080fd5b505af11580156116fa573d6000803e3d6000fd5b5050505060008911801561171657506001600160a01b03871615155b15611848576002546040805163095ea7b360e01b81526001600160a01b038d81166004830152602482018d90529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561177157600080fd5b505af1158015611785573d6000803e3d6000fd5b505050506040513d602081101561179b57600080fd5b50516117d85760405162461bcd60e51b81526004018080602001828103825260378152602001806127916037913960400191505060405180910390fd5b896001600160a01b03166324f453d1868b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561182f57600080fd5b505af1158015611843573d6000803e3d6000fd5b505050505b87156118cf576002546040805163a9059cbb60e01b8152336004820152602481018b905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b1580156118a257600080fd5b505af11580156118b6573d6000803e3d6000fd5b505050506040513d60208110156118cc57600080fd5b50505b896001600160a01b0316856001600160a01b03167f2ed7bcf2ff03098102c7003d7ce2a633e4b49b8198b07de5383cdf4c0ab9228b8360405180826001600160a01b0316815260200191505060405180910390a361192c856113b0565b611996576001600160a01b0385811660008181526008602090815260409182902080546001600160a01b031916948c1694851790558151938452905191927fefaf768237c22e140a862d5d375ad5c153479fac3f8bcf8b580a1651fd62c3ef929081900390910190a25b50505050505050505050565b6001600160a01b0382166119e75760405162461bcd60e51b815260040180806020018281038252602b815260200180612a61602b913960400191505060405180910390fd5b6003805460010190556000611a58826119fe612691565b6003546040805160208082019490945230606090811b828401526001600160601b03198b821b81166054840152908a901b166068820152607c8082019390935281518082039093018352609c019052805191012090612432565b9050836001600160a01b0316816001600160a01b031614611aaa5760405162461bcd60e51b815260040180806020018281038252602d81526020018061299a602d913960400191505060405180910390fd5b6001600160a01b0384811660008181526008602090815260409182902080546001600160a01b03191694881694851790558151938452905191927f768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d929081900390910190a250505050565b6001600160a01b038616611b5a5760405162461bcd60e51b815260040180806020018281038252602f8152602001806128d2602f913960400191505060405180910390fd5b600554851015611b9b5760405162461bcd60e51b815260040180806020018281038252603c81526020018061283d603c913960400191505060405180910390fd5b6000611ba68761109b565b9050611bb1816113d0565b15611bed5760405162461bcd60e51b81526004018080602001828103825260238152602001806129016023913960400191505060405180910390fd5b6000611c0c886001600160a01b0316611c07610d59610fe4565b612677565b600254604080516323b872dd60e01b81523360048201526001600160a01b038085166024830152604482018c905291519394509116916323b872dd916064808201926020929091908290030181600087803b158015611c6a57600080fd5b505af1158015611c7e573d6000803e3d6000fd5b505050506040513d6020811015611c9457600080fd5b5050600254600480546040805163699a088560e01b81526001600160a01b03948516938101939093528b8416602484015261ffff8a166044840152606483018990526084830188905290831660a4830152519183169163699a08859160c48082019260009290919082900301818387803b158015611d1157600080fd5b505af1158015611d25573d6000803e3d6000fd5b505050506040518060800160405280896001600160a01b03168152602001611d4b610da7565b815263fc0e3d90602084811b640100000000600160c01b0390811692909217604090811b828501529283018790526001600160a01b03808616600090815260078352849020855181546001600160a01b0319169216919091178155848201516001820155848401516002820180546001600160c01b03191663ffffffff9290961c91821691909416179390931790915560608301518051611df29260038501920190612695565b50905050806001600160a01b03167ff06d60cc2f463635fd237ad87f1d007af54840b82e7e4561707b1be63d91c260898560405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611e6f578181015183820152602001611e57565b50505050905090810190601f168015611e9c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25050505050505050565b6001546001600160a01b0316611ec957600080fd5b6002546001600160a01b0382811691161415611f165760405162461bcd60e51b81526004018080602001828103825260258152602001806128186025913960400191505060405180910390fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611f6557600080fd5b505afa158015611f79573d6000803e3d6000fd5b505050506040513d6020811015611f8f57600080fd5b50516001546040805163a9059cbb60e01b81526001600160a01b0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015611fea57600080fd5b505af1158015611ffe573d6000803e3d6000fd5b505050506040513d602081101561201457600080fd5b50505050565b6000546001600160a01b031633148061203c57506000546001600160a01b0316155b61207b576040805162461bcd60e51b8152602060048201819052602482015260008051602061297a833981519152604482015290519081900360640190fd5b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156120c657600080fd5b505afa1580156120da573d6000803e3d6000fd5b505050506040513d60208110156120f057600080fd5b50519050806121305760405162461bcd60e51b81526004018080602001828103825260268152602001806129ee6026913960400191505060405180910390fd5b6002546040805163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611fea57600080fd5b6001600160a01b03811660009081526007602052604081206001015481906121b190610d5990610d1b565b8051602091820120604080516001600160601b0319606089811b82168387015288901b16603482015281516028818303018152604890910190915280519201919091209091506114308183612320565b6000546001600160a01b031633148061222357506000546001600160a01b0316155b612262576040805162461bcd60e51b8152602060048201819052602482015260008051602061297a833981519152604482015290519081900360640190fd5b6001600160a01b0381166122a75760405162461bcd60e51b81526004018080602001828103825260268152602001806127c86026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031690565b6002546001600160a01b031681565b604080516001600160f81b03196020808301919091523060601b60218301526035820194909452605580820193909352815180820390930183526075019052805191012090565b3b151590565b6000612378826113d0565b6123b35760405162461bcd60e51b81526004018080602001828103825260268152602001806127376026913960400191505060405180910390fd5b6000826001600160a01b0316634e69d5606040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ee57600080fd5b505afa158015612402573d6000803e3d6000fd5b505050506040513d602081101561241857600080fd5b50519050600081600381111561242a57fe5b149392505050565b6000815160411461248a576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156124fb5760405162461bcd60e51b81526004018080602001828103825260228152602001806128796022913960400191505060405180910390fd5b8060ff16601b1415801561251357508060ff16601c14155b1561254f5760405162461bcd60e51b81526004018080602001828103825260228152602001806129246022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156125ab573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612613576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b6000828201838110156110c6576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080838351602085016000f59050803b6110c657600080fd5b4690565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826126cb5760008555612711565b82601f106126e457805160ff1916838001178555612711565b82800160010185558215612711579182015b828111156127115782518255916020019190600101906126f6565b5061271d929150612721565b5090565b5b8082111561271d576000815560010161272256fe52656769737472793a206865726d6573206861766520746f206265207265676973746572656452656769737472793a20696d706c656d656e746174696f6e73206861766520746f20626520736d61727420636f6e74726163747352656769737472793a206865726d65732073686f756c642067657420617070726f76616c20746f207472616e7366657220746f6b656e734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737352656769737472793a2070726f7669646564206865726d65732068617320746f206265206163746976656e617469766520746f6b656e2066756e64732063616e2774206265207265636f766572656452656769737472793a206865726d6573206861766520746f207374616b65206174206c65617374206d696e696d616c207374616b6520616d6f756e7445434453413a20696e76616c6964207369676e6174757265202773272076616c75653d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf352656769737472793a206865726d6573206f70657261746f722063616e2774206265207a65726f206164647265737352656769737472793a206865726d657320616c7265616479207265676973746572656445434453413a20696e76616c6964207369676e6174757265202776272076616c756552656769737472793a206e6f7420656e6f756768742066756e647320696e206368616e6e656c20746f20636f76657220666565734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657252656769737472793a206861766520746f206265207369676e6564206279206964656e74697479206f776e657252656769737472793a2052656a656374696e672074782077697468206574686572732073656e74636f6c6c6563746564206665652063616e6e6f74206265206c657373207468616e207a65726f52656769737472793a2077726f6e67206964656e74697479207369676e617475726552656769737472793a2070726f7669646564206865726d6573206861766520746f2062652061637469766552656769737472793a2062656e65666963696172792063616e2774206265207a65726f2061646472657373a264697066735822122065a56b2874985480216ee64116126f463779bf46a87647e2b6a0be53b9a4c19964736f6c6343000704003352656769737472793a20696d706c656d656e746174696f6e73206861766520746f20626520736d61727420636f6e7472616374734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572"

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenAddress common.Address, _dexAddress common.Address, _minimalHermesStake *big.Int, _channelImplementation common.Address, _hermesImplementation common.Address) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryBin), backend, _tokenAddress, _dexAddress, _minimalHermesStake, _channelImplementation, _hermesImplementation)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// Dex is a free data retrieval call binding the contract method 0x692058c2.
//
// Solidity: function dex() view returns(address)
func (_Registry *RegistryCaller) Dex(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "dex")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Dex is a free data retrieval call binding the contract method 0x692058c2.
//
// Solidity: function dex() view returns(address)
func (_Registry *RegistrySession) Dex() (common.Address, error) {
	return _Registry.Contract.Dex(&_Registry.CallOpts)
}

// Dex is a free data retrieval call binding the contract method 0x692058c2.
//
// Solidity: function dex() view returns(address)
func (_Registry *RegistryCallerSession) Dex() (common.Address, error) {
	return _Registry.Contract.Dex(&_Registry.CallOpts)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x505a1b31.
//
// Solidity: function getBeneficiary(address _identity) view returns(address)
func (_Registry *RegistryCaller) GetBeneficiary(opts *bind.CallOpts, _identity common.Address) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getBeneficiary", _identity)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBeneficiary is a free data retrieval call binding the contract method 0x505a1b31.
//
// Solidity: function getBeneficiary(address _identity) view returns(address)
func (_Registry *RegistrySession) GetBeneficiary(_identity common.Address) (common.Address, error) {
	return _Registry.Contract.GetBeneficiary(&_Registry.CallOpts, _identity)
}

// GetBeneficiary is a free data retrieval call binding the contract method 0x505a1b31.
//
// Solidity: function getBeneficiary(address _identity) view returns(address)
func (_Registry *RegistryCallerSession) GetBeneficiary(_identity common.Address) (common.Address, error) {
	return _Registry.Contract.GetBeneficiary(&_Registry.CallOpts, _identity)
}

// GetChannelAddress is a free data retrieval call binding the contract method 0xe617aaac.
//
// Solidity: function getChannelAddress(address _identity, address _hermesId) view returns(address)
func (_Registry *RegistryCaller) GetChannelAddress(opts *bind.CallOpts, _identity common.Address, _hermesId common.Address) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getChannelAddress", _identity, _hermesId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetChannelAddress is a free data retrieval call binding the contract method 0xe617aaac.
//
// Solidity: function getChannelAddress(address _identity, address _hermesId) view returns(address)
func (_Registry *RegistrySession) GetChannelAddress(_identity common.Address, _hermesId common.Address) (common.Address, error) {
	return _Registry.Contract.GetChannelAddress(&_Registry.CallOpts, _identity, _hermesId)
}

// GetChannelAddress is a free data retrieval call binding the contract method 0xe617aaac.
//
// Solidity: function getChannelAddress(address _identity, address _hermesId) view returns(address)
func (_Registry *RegistryCallerSession) GetChannelAddress(_identity common.Address, _hermesId common.Address) (common.Address, error) {
	return _Registry.Contract.GetChannelAddress(&_Registry.CallOpts, _identity, _hermesId)
}

// GetChannelImplementation is a free data retrieval call binding the contract method 0x41ca71ab.
//
// Solidity: function getChannelImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistryCaller) GetChannelImplementation(opts *bind.CallOpts, _implVer *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getChannelImplementation", _implVer)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetChannelImplementation is a free data retrieval call binding the contract method 0x41ca71ab.
//
// Solidity: function getChannelImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistrySession) GetChannelImplementation(_implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetChannelImplementation(&_Registry.CallOpts, _implVer)
}

// GetChannelImplementation is a free data retrieval call binding the contract method 0x41ca71ab.
//
// Solidity: function getChannelImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistryCallerSession) GetChannelImplementation(_implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetChannelImplementation(&_Registry.CallOpts, _implVer)
}

// GetChannelImplementation0 is a free data retrieval call binding the contract method 0x7c671a21.
//
// Solidity: function getChannelImplementation() view returns(address)
func (_Registry *RegistryCaller) GetChannelImplementation0(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getChannelImplementation0")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetChannelImplementation0 is a free data retrieval call binding the contract method 0x7c671a21.
//
// Solidity: function getChannelImplementation() view returns(address)
func (_Registry *RegistrySession) GetChannelImplementation0() (common.Address, error) {
	return _Registry.Contract.GetChannelImplementation0(&_Registry.CallOpts)
}

// GetChannelImplementation0 is a free data retrieval call binding the contract method 0x7c671a21.
//
// Solidity: function getChannelImplementation() view returns(address)
func (_Registry *RegistryCallerSession) GetChannelImplementation0() (common.Address, error) {
	return _Registry.Contract.GetChannelImplementation0(&_Registry.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_Registry *RegistryCaller) GetFundsDestination(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getFundsDestination")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_Registry *RegistrySession) GetFundsDestination() (common.Address, error) {
	return _Registry.Contract.GetFundsDestination(&_Registry.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() view returns(address)
func (_Registry *RegistryCallerSession) GetFundsDestination() (common.Address, error) {
	return _Registry.Contract.GetFundsDestination(&_Registry.CallOpts)
}

// GetHermesAddress is a free data retrieval call binding the contract method 0x4b6bd6be.
//
// Solidity: function getHermesAddress(address _hermesOperator, uint256 _implVer) view returns(address)
func (_Registry *RegistryCaller) GetHermesAddress(opts *bind.CallOpts, _hermesOperator common.Address, _implVer *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesAddress", _hermesOperator, _implVer)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetHermesAddress is a free data retrieval call binding the contract method 0x4b6bd6be.
//
// Solidity: function getHermesAddress(address _hermesOperator, uint256 _implVer) view returns(address)
func (_Registry *RegistrySession) GetHermesAddress(_hermesOperator common.Address, _implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetHermesAddress(&_Registry.CallOpts, _hermesOperator, _implVer)
}

// GetHermesAddress is a free data retrieval call binding the contract method 0x4b6bd6be.
//
// Solidity: function getHermesAddress(address _hermesOperator, uint256 _implVer) view returns(address)
func (_Registry *RegistryCallerSession) GetHermesAddress(_hermesOperator common.Address, _implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetHermesAddress(&_Registry.CallOpts, _hermesOperator, _implVer)
}

// GetHermesAddress0 is a free data retrieval call binding the contract method 0xacc831d0.
//
// Solidity: function getHermesAddress(address _hermesOperator) view returns(address)
func (_Registry *RegistryCaller) GetHermesAddress0(opts *bind.CallOpts, _hermesOperator common.Address) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesAddress0", _hermesOperator)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetHermesAddress0 is a free data retrieval call binding the contract method 0xacc831d0.
//
// Solidity: function getHermesAddress(address _hermesOperator) view returns(address)
func (_Registry *RegistrySession) GetHermesAddress0(_hermesOperator common.Address) (common.Address, error) {
	return _Registry.Contract.GetHermesAddress0(&_Registry.CallOpts, _hermesOperator)
}

// GetHermesAddress0 is a free data retrieval call binding the contract method 0xacc831d0.
//
// Solidity: function getHermesAddress(address _hermesOperator) view returns(address)
func (_Registry *RegistryCallerSession) GetHermesAddress0(_hermesOperator common.Address) (common.Address, error) {
	return _Registry.Contract.GetHermesAddress0(&_Registry.CallOpts, _hermesOperator)
}

// GetHermesImplementation is a free data retrieval call binding the contract method 0x8cfef547.
//
// Solidity: function getHermesImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistryCaller) GetHermesImplementation(opts *bind.CallOpts, _implVer *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesImplementation", _implVer)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetHermesImplementation is a free data retrieval call binding the contract method 0x8cfef547.
//
// Solidity: function getHermesImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistrySession) GetHermesImplementation(_implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetHermesImplementation(&_Registry.CallOpts, _implVer)
}

// GetHermesImplementation is a free data retrieval call binding the contract method 0x8cfef547.
//
// Solidity: function getHermesImplementation(uint256 _implVer) view returns(address)
func (_Registry *RegistryCallerSession) GetHermesImplementation(_implVer *big.Int) (common.Address, error) {
	return _Registry.Contract.GetHermesImplementation(&_Registry.CallOpts, _implVer)
}

// GetHermesImplementation0 is a free data retrieval call binding the contract method 0x9936a87b.
//
// Solidity: function getHermesImplementation() view returns(address)
func (_Registry *RegistryCaller) GetHermesImplementation0(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesImplementation0")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetHermesImplementation0 is a free data retrieval call binding the contract method 0x9936a87b.
//
// Solidity: function getHermesImplementation() view returns(address)
func (_Registry *RegistrySession) GetHermesImplementation0() (common.Address, error) {
	return _Registry.Contract.GetHermesImplementation0(&_Registry.CallOpts)
}

// GetHermesImplementation0 is a free data retrieval call binding the contract method 0x9936a87b.
//
// Solidity: function getHermesImplementation() view returns(address)
func (_Registry *RegistryCallerSession) GetHermesImplementation0() (common.Address, error) {
	return _Registry.Contract.GetHermesImplementation0(&_Registry.CallOpts)
}

// GetHermesURL is a free data retrieval call binding the contract method 0xbf1eb88a.
//
// Solidity: function getHermesURL(address _hermesId) view returns(bytes)
func (_Registry *RegistryCaller) GetHermesURL(opts *bind.CallOpts, _hermesId common.Address) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getHermesURL", _hermesId)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetHermesURL is a free data retrieval call binding the contract method 0xbf1eb88a.
//
// Solidity: function getHermesURL(address _hermesId) view returns(bytes)
func (_Registry *RegistrySession) GetHermesURL(_hermesId common.Address) ([]byte, error) {
	return _Registry.Contract.GetHermesURL(&_Registry.CallOpts, _hermesId)
}

// GetHermesURL is a free data retrieval call binding the contract method 0xbf1eb88a.
//
// Solidity: function getHermesURL(address _hermesId) view returns(bytes)
func (_Registry *RegistryCallerSession) GetHermesURL(_hermesId common.Address) ([]byte, error) {
	return _Registry.Contract.GetHermesURL(&_Registry.CallOpts, _hermesId)
}

// GetLastImplVer is a free data retrieval call binding the contract method 0x6332b080.
//
// Solidity: function getLastImplVer() view returns(uint256)
func (_Registry *RegistryCaller) GetLastImplVer(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getLastImplVer")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLastImplVer is a free data retrieval call binding the contract method 0x6332b080.
//
// Solidity: function getLastImplVer() view returns(uint256)
func (_Registry *RegistrySession) GetLastImplVer() (*big.Int, error) {
	return _Registry.Contract.GetLastImplVer(&_Registry.CallOpts)
}

// GetLastImplVer is a free data retrieval call binding the contract method 0x6332b080.
//
// Solidity: function getLastImplVer() view returns(uint256)
func (_Registry *RegistryCallerSession) GetLastImplVer() (*big.Int, error) {
	return _Registry.Contract.GetLastImplVer(&_Registry.CallOpts)
}

// GetProxyCode is a free data retrieval call binding the contract method 0xab867213.
//
// Solidity: function getProxyCode(address _implementation) pure returns(bytes)
func (_Registry *RegistryCaller) GetProxyCode(opts *bind.CallOpts, _implementation common.Address) ([]byte, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "getProxyCode", _implementation)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetProxyCode is a free data retrieval call binding the contract method 0xab867213.
//
// Solidity: function getProxyCode(address _implementation) pure returns(bytes)
func (_Registry *RegistrySession) GetProxyCode(_implementation common.Address) ([]byte, error) {
	return _Registry.Contract.GetProxyCode(&_Registry.CallOpts, _implementation)
}

// GetProxyCode is a free data retrieval call binding the contract method 0xab867213.
//
// Solidity: function getProxyCode(address _implementation) pure returns(bytes)
func (_Registry *RegistryCallerSession) GetProxyCode(_implementation common.Address) ([]byte, error) {
	return _Registry.Contract.GetProxyCode(&_Registry.CallOpts, _implementation)
}

// HasParentRegistry is a free data retrieval call binding the contract method 0x332ff7bd.
//
// Solidity: function hasParentRegistry(address ) pure returns(bool)
func (_Registry *RegistryCaller) HasParentRegistry(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "hasParentRegistry", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasParentRegistry is a free data retrieval call binding the contract method 0x332ff7bd.
//
// Solidity: function hasParentRegistry(address ) pure returns(bool)
func (_Registry *RegistrySession) HasParentRegistry(arg0 common.Address) (bool, error) {
	return _Registry.Contract.HasParentRegistry(&_Registry.CallOpts, arg0)
}

// HasParentRegistry is a free data retrieval call binding the contract method 0x332ff7bd.
//
// Solidity: function hasParentRegistry(address ) pure returns(bool)
func (_Registry *RegistryCallerSession) HasParentRegistry(arg0 common.Address) (bool, error) {
	return _Registry.Contract.HasParentRegistry(&_Registry.CallOpts, arg0)
}

// Hermeses is a free data retrieval call binding the contract method 0x03fb422f.
//
// Solidity: function hermeses(address ) view returns(address operator, uint256 implVer, function stake, bytes url)
func (_Registry *RegistryCaller) Hermeses(opts *bind.CallOpts, arg0 common.Address) (struct {
	Operator common.Address
	ImplVer  *big.Int
	Stake    [24]byte
	Url      []byte
}, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "hermeses", arg0)

	outstruct := new(struct {
		Operator common.Address
		ImplVer  *big.Int
		Stake    [24]byte
		Url      []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Operator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.ImplVer = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Stake = *abi.ConvertType(out[2], new([24]byte)).(*[24]byte)
	outstruct.Url = *abi.ConvertType(out[3], new([]byte)).(*[]byte)

	return *outstruct, err

}

// Hermeses is a free data retrieval call binding the contract method 0x03fb422f.
//
// Solidity: function hermeses(address ) view returns(address operator, uint256 implVer, function stake, bytes url)
func (_Registry *RegistrySession) Hermeses(arg0 common.Address) (struct {
	Operator common.Address
	ImplVer  *big.Int
	Stake    [24]byte
	Url      []byte
}, error) {
	return _Registry.Contract.Hermeses(&_Registry.CallOpts, arg0)
}

// Hermeses is a free data retrieval call binding the contract method 0x03fb422f.
//
// Solidity: function hermeses(address ) view returns(address operator, uint256 implVer, function stake, bytes url)
func (_Registry *RegistryCallerSession) Hermeses(arg0 common.Address) (struct {
	Operator common.Address
	ImplVer  *big.Int
	Stake    [24]byte
	Url      []byte
}, error) {
	return _Registry.Contract.Hermeses(&_Registry.CallOpts, arg0)
}

// IsHermes is a free data retrieval call binding the contract method 0xcdd596e0.
//
// Solidity: function isHermes(address _hermesId) view returns(bool)
func (_Registry *RegistryCaller) IsHermes(opts *bind.CallOpts, _hermesId common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isHermes", _hermesId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsHermes is a free data retrieval call binding the contract method 0xcdd596e0.
//
// Solidity: function isHermes(address _hermesId) view returns(bool)
func (_Registry *RegistrySession) IsHermes(_hermesId common.Address) (bool, error) {
	return _Registry.Contract.IsHermes(&_Registry.CallOpts, _hermesId)
}

// IsHermes is a free data retrieval call binding the contract method 0xcdd596e0.
//
// Solidity: function isHermes(address _hermesId) view returns(bool)
func (_Registry *RegistryCallerSession) IsHermes(_hermesId common.Address) (bool, error) {
	return _Registry.Contract.IsHermes(&_Registry.CallOpts, _hermesId)
}

// IsRegistered is a free data retrieval call binding the contract method 0xc3c5a547.
//
// Solidity: function isRegistered(address _identity) view returns(bool)
func (_Registry *RegistryCaller) IsRegistered(opts *bind.CallOpts, _identity common.Address) (bool, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "isRegistered", _identity)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0xc3c5a547.
//
// Solidity: function isRegistered(address _identity) view returns(bool)
func (_Registry *RegistrySession) IsRegistered(_identity common.Address) (bool, error) {
	return _Registry.Contract.IsRegistered(&_Registry.CallOpts, _identity)
}

// IsRegistered is a free data retrieval call binding the contract method 0xc3c5a547.
//
// Solidity: function isRegistered(address _identity) view returns(bool)
func (_Registry *RegistryCallerSession) IsRegistered(_identity common.Address) (bool, error) {
	return _Registry.Contract.IsRegistered(&_Registry.CallOpts, _identity)
}

// LastNonce is a free data retrieval call binding the contract method 0x52631ab4.
//
// Solidity: function lastNonce() view returns(uint256)
func (_Registry *RegistryCaller) LastNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "lastNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastNonce is a free data retrieval call binding the contract method 0x52631ab4.
//
// Solidity: function lastNonce() view returns(uint256)
func (_Registry *RegistrySession) LastNonce() (*big.Int, error) {
	return _Registry.Contract.LastNonce(&_Registry.CallOpts)
}

// LastNonce is a free data retrieval call binding the contract method 0x52631ab4.
//
// Solidity: function lastNonce() view returns(uint256)
func (_Registry *RegistryCallerSession) LastNonce() (*big.Int, error) {
	return _Registry.Contract.LastNonce(&_Registry.CallOpts)
}

// MinimalHermesStake is a free data retrieval call binding the contract method 0x66cf5875.
//
// Solidity: function minimalHermesStake() view returns(uint256)
func (_Registry *RegistryCaller) MinimalHermesStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "minimalHermesStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimalHermesStake is a free data retrieval call binding the contract method 0x66cf5875.
//
// Solidity: function minimalHermesStake() view returns(uint256)
func (_Registry *RegistrySession) MinimalHermesStake() (*big.Int, error) {
	return _Registry.Contract.MinimalHermesStake(&_Registry.CallOpts)
}

// MinimalHermesStake is a free data retrieval call binding the contract method 0x66cf5875.
//
// Solidity: function minimalHermesStake() view returns(uint256)
func (_Registry *RegistryCallerSession) MinimalHermesStake() (*big.Int, error) {
	return _Registry.Contract.MinimalHermesStake(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistrySession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Registry *RegistryCallerSession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Registry *RegistryCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Registry.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Registry *RegistrySession) Token() (common.Address, error) {
	return _Registry.Contract.Token(&_Registry.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_Registry *RegistryCallerSession) Token() (common.Address, error) {
	return _Registry.Contract.Token(&_Registry.CallOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_Registry *RegistryTransactor) ClaimEthers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "claimEthers")
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_Registry *RegistrySession) ClaimEthers() (*types.Transaction, error) {
	return _Registry.Contract.ClaimEthers(&_Registry.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_Registry *RegistryTransactorSession) ClaimEthers() (*types.Transaction, error) {
	return _Registry.Contract.ClaimEthers(&_Registry.TransactOpts)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_Registry *RegistryTransactor) ClaimTokens(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "claimTokens", _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_Registry *RegistrySession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ClaimTokens(&_Registry.TransactOpts, _token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address _token) returns()
func (_Registry *RegistryTransactorSession) ClaimTokens(_token common.Address) (*types.Transaction, error) {
	return _Registry.Contract.ClaimTokens(&_Registry.TransactOpts, _token)
}

// RegisterHermes is a paid mutator transaction binding the contract method 0xd5929fe3.
//
// Solidity: function registerHermes(address _hermesOperator, uint256 _hermesStake, uint16 _hermesFee, uint256 _minChannelStake, uint256 _maxChannelStake, bytes _url) returns()
func (_Registry *RegistryTransactor) RegisterHermes(opts *bind.TransactOpts, _hermesOperator common.Address, _hermesStake *big.Int, _hermesFee uint16, _minChannelStake *big.Int, _maxChannelStake *big.Int, _url []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerHermes", _hermesOperator, _hermesStake, _hermesFee, _minChannelStake, _maxChannelStake, _url)
}

// RegisterHermes is a paid mutator transaction binding the contract method 0xd5929fe3.
//
// Solidity: function registerHermes(address _hermesOperator, uint256 _hermesStake, uint16 _hermesFee, uint256 _minChannelStake, uint256 _maxChannelStake, bytes _url) returns()
func (_Registry *RegistrySession) RegisterHermes(_hermesOperator common.Address, _hermesStake *big.Int, _hermesFee uint16, _minChannelStake *big.Int, _maxChannelStake *big.Int, _url []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterHermes(&_Registry.TransactOpts, _hermesOperator, _hermesStake, _hermesFee, _minChannelStake, _maxChannelStake, _url)
}

// RegisterHermes is a paid mutator transaction binding the contract method 0xd5929fe3.
//
// Solidity: function registerHermes(address _hermesOperator, uint256 _hermesStake, uint16 _hermesFee, uint256 _minChannelStake, uint256 _maxChannelStake, bytes _url) returns()
func (_Registry *RegistryTransactorSession) RegisterHermes(_hermesOperator common.Address, _hermesStake *big.Int, _hermesFee uint16, _minChannelStake *big.Int, _maxChannelStake *big.Int, _url []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterHermes(&_Registry.TransactOpts, _hermesOperator, _hermesStake, _hermesFee, _minChannelStake, _maxChannelStake, _url)
}

// RegisterIdentity is a paid mutator transaction binding the contract method 0xcf10c969.
//
// Solidity: function registerIdentity(address _hermesId, uint256 _stakeAmount, uint256 _transactorFee, address _beneficiary, bytes _signature) returns()
func (_Registry *RegistryTransactor) RegisterIdentity(opts *bind.TransactOpts, _hermesId common.Address, _stakeAmount *big.Int, _transactorFee *big.Int, _beneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "registerIdentity", _hermesId, _stakeAmount, _transactorFee, _beneficiary, _signature)
}

// RegisterIdentity is a paid mutator transaction binding the contract method 0xcf10c969.
//
// Solidity: function registerIdentity(address _hermesId, uint256 _stakeAmount, uint256 _transactorFee, address _beneficiary, bytes _signature) returns()
func (_Registry *RegistrySession) RegisterIdentity(_hermesId common.Address, _stakeAmount *big.Int, _transactorFee *big.Int, _beneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterIdentity(&_Registry.TransactOpts, _hermesId, _stakeAmount, _transactorFee, _beneficiary, _signature)
}

// RegisterIdentity is a paid mutator transaction binding the contract method 0xcf10c969.
//
// Solidity: function registerIdentity(address _hermesId, uint256 _stakeAmount, uint256 _transactorFee, address _beneficiary, bytes _signature) returns()
func (_Registry *RegistryTransactorSession) RegisterIdentity(_hermesId common.Address, _stakeAmount *big.Int, _transactorFee *big.Int, _beneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.RegisterIdentity(&_Registry.TransactOpts, _hermesId, _stakeAmount, _transactorFee, _beneficiary, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0xd0171d79.
//
// Solidity: function setBeneficiary(address _identity, address _newBeneficiary, bytes _signature) returns()
func (_Registry *RegistryTransactor) SetBeneficiary(opts *bind.TransactOpts, _identity common.Address, _newBeneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setBeneficiary", _identity, _newBeneficiary, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0xd0171d79.
//
// Solidity: function setBeneficiary(address _identity, address _newBeneficiary, bytes _signature) returns()
func (_Registry *RegistrySession) SetBeneficiary(_identity common.Address, _newBeneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.SetBeneficiary(&_Registry.TransactOpts, _identity, _newBeneficiary, _signature)
}

// SetBeneficiary is a paid mutator transaction binding the contract method 0xd0171d79.
//
// Solidity: function setBeneficiary(address _identity, address _newBeneficiary, bytes _signature) returns()
func (_Registry *RegistryTransactorSession) SetBeneficiary(_identity common.Address, _newBeneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.SetBeneficiary(&_Registry.TransactOpts, _identity, _newBeneficiary, _signature)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_Registry *RegistryTransactor) SetFundsDestination(opts *bind.TransactOpts, _newDestination common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setFundsDestination", _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_Registry *RegistrySession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetFundsDestination(&_Registry.TransactOpts, _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_Registry *RegistryTransactorSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetFundsDestination(&_Registry.TransactOpts, _newDestination)
}

// SetImplementations is a paid mutator transaction binding the contract method 0x85bff341.
//
// Solidity: function setImplementations(address _newChannelImplAddress, address _newHermesImplAddress) returns()
func (_Registry *RegistryTransactor) SetImplementations(opts *bind.TransactOpts, _newChannelImplAddress common.Address, _newHermesImplAddress common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "setImplementations", _newChannelImplAddress, _newHermesImplAddress)
}

// SetImplementations is a paid mutator transaction binding the contract method 0x85bff341.
//
// Solidity: function setImplementations(address _newChannelImplAddress, address _newHermesImplAddress) returns()
func (_Registry *RegistrySession) SetImplementations(_newChannelImplAddress common.Address, _newHermesImplAddress common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetImplementations(&_Registry.TransactOpts, _newChannelImplAddress, _newHermesImplAddress)
}

// SetImplementations is a paid mutator transaction binding the contract method 0x85bff341.
//
// Solidity: function setImplementations(address _newChannelImplAddress, address _newHermesImplAddress) returns()
func (_Registry *RegistryTransactorSession) SetImplementations(_newChannelImplAddress common.Address, _newHermesImplAddress common.Address) (*types.Transaction, error) {
	return _Registry.Contract.SetImplementations(&_Registry.TransactOpts, _newChannelImplAddress, _newHermesImplAddress)
}

// TransferCollectedFeeTo is a paid mutator transaction binding the contract method 0xe3252537.
//
// Solidity: function transferCollectedFeeTo(address _beneficiary) returns()
func (_Registry *RegistryTransactor) TransferCollectedFeeTo(opts *bind.TransactOpts, _beneficiary common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferCollectedFeeTo", _beneficiary)
}

// TransferCollectedFeeTo is a paid mutator transaction binding the contract method 0xe3252537.
//
// Solidity: function transferCollectedFeeTo(address _beneficiary) returns()
func (_Registry *RegistrySession) TransferCollectedFeeTo(_beneficiary common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferCollectedFeeTo(&_Registry.TransactOpts, _beneficiary)
}

// TransferCollectedFeeTo is a paid mutator transaction binding the contract method 0xe3252537.
//
// Solidity: function transferCollectedFeeTo(address _beneficiary) returns()
func (_Registry *RegistryTransactorSession) TransferCollectedFeeTo(_beneficiary common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferCollectedFeeTo(&_Registry.TransactOpts, _beneficiary)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Registry *RegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, newOwner)
}

// UpdateHermesURL is a paid mutator transaction binding the contract method 0xadd10dda.
//
// Solidity: function updateHermesURL(address _hermesId, bytes _url, bytes _signature) returns()
func (_Registry *RegistryTransactor) UpdateHermesURL(opts *bind.TransactOpts, _hermesId common.Address, _url []byte, _signature []byte) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "updateHermesURL", _hermesId, _url, _signature)
}

// UpdateHermesURL is a paid mutator transaction binding the contract method 0xadd10dda.
//
// Solidity: function updateHermesURL(address _hermesId, bytes _url, bytes _signature) returns()
func (_Registry *RegistrySession) UpdateHermesURL(_hermesId common.Address, _url []byte, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.UpdateHermesURL(&_Registry.TransactOpts, _hermesId, _url, _signature)
}

// UpdateHermesURL is a paid mutator transaction binding the contract method 0xadd10dda.
//
// Solidity: function updateHermesURL(address _hermesId, bytes _url, bytes _signature) returns()
func (_Registry *RegistryTransactorSession) UpdateHermesURL(_hermesId common.Address, _url []byte, _signature []byte) (*types.Transaction, error) {
	return _Registry.Contract.UpdateHermesURL(&_Registry.TransactOpts, _hermesId, _url, _signature)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Registry *RegistryTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Registry *RegistrySession) Receive() (*types.Transaction, error) {
	return _Registry.Contract.Receive(&_Registry.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Registry *RegistryTransactorSession) Receive() (*types.Transaction, error) {
	return _Registry.Contract.Receive(&_Registry.TransactOpts)
}

// RegistryBeneficiaryChangedIterator is returned from FilterBeneficiaryChanged and is used to iterate over the raw logs and unpacked data for BeneficiaryChanged events raised by the Registry contract.
type RegistryBeneficiaryChangedIterator struct {
	Event *RegistryBeneficiaryChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryBeneficiaryChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryBeneficiaryChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryBeneficiaryChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryBeneficiaryChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryBeneficiaryChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryBeneficiaryChanged represents a BeneficiaryChanged event raised by the Registry contract.
type RegistryBeneficiaryChanged struct {
	Identity       common.Address
	NewBeneficiary common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBeneficiaryChanged is a free log retrieval operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address indexed identity, address newBeneficiary)
func (_Registry *RegistryFilterer) FilterBeneficiaryChanged(opts *bind.FilterOpts, identity []common.Address) (*RegistryBeneficiaryChangedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "BeneficiaryChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return &RegistryBeneficiaryChangedIterator{contract: _Registry.contract, event: "BeneficiaryChanged", logs: logs, sub: sub}, nil
}

// WatchBeneficiaryChanged is a free log subscription operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address indexed identity, address newBeneficiary)
func (_Registry *RegistryFilterer) WatchBeneficiaryChanged(opts *bind.WatchOpts, sink chan<- *RegistryBeneficiaryChanged, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "BeneficiaryChanged", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryBeneficiaryChanged)
				if err := _Registry.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeneficiaryChanged is a log parse operation binding the contract event 0x768099735d1c322a05a5b9d7b76d99682a1833d3f7055e5ede25e0f2eeaa8c6d.
//
// Solidity: event BeneficiaryChanged(address indexed identity, address newBeneficiary)
func (_Registry *RegistryFilterer) ParseBeneficiaryChanged(log types.Log) (*RegistryBeneficiaryChanged, error) {
	event := new(RegistryBeneficiaryChanged)
	if err := _Registry.contract.UnpackLog(event, "BeneficiaryChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryConsumerChannelCreatedIterator is returned from FilterConsumerChannelCreated and is used to iterate over the raw logs and unpacked data for ConsumerChannelCreated events raised by the Registry contract.
type RegistryConsumerChannelCreatedIterator struct {
	Event *RegistryConsumerChannelCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryConsumerChannelCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryConsumerChannelCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryConsumerChannelCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryConsumerChannelCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryConsumerChannelCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryConsumerChannelCreated represents a ConsumerChannelCreated event raised by the Registry contract.
type RegistryConsumerChannelCreated struct {
	Identity       common.Address
	HermesId       common.Address
	ChannelAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterConsumerChannelCreated is a free log retrieval operation binding the contract event 0x2ed7bcf2ff03098102c7003d7ce2a633e4b49b8198b07de5383cdf4c0ab9228b.
//
// Solidity: event ConsumerChannelCreated(address indexed identity, address indexed hermesId, address channelAddress)
func (_Registry *RegistryFilterer) FilterConsumerChannelCreated(opts *bind.FilterOpts, identity []common.Address, hermesId []common.Address) (*RegistryConsumerChannelCreatedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}
	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "ConsumerChannelCreated", identityRule, hermesIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryConsumerChannelCreatedIterator{contract: _Registry.contract, event: "ConsumerChannelCreated", logs: logs, sub: sub}, nil
}

// WatchConsumerChannelCreated is a free log subscription operation binding the contract event 0x2ed7bcf2ff03098102c7003d7ce2a633e4b49b8198b07de5383cdf4c0ab9228b.
//
// Solidity: event ConsumerChannelCreated(address indexed identity, address indexed hermesId, address channelAddress)
func (_Registry *RegistryFilterer) WatchConsumerChannelCreated(opts *bind.WatchOpts, sink chan<- *RegistryConsumerChannelCreated, identity []common.Address, hermesId []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}
	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "ConsumerChannelCreated", identityRule, hermesIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryConsumerChannelCreated)
				if err := _Registry.contract.UnpackLog(event, "ConsumerChannelCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConsumerChannelCreated is a log parse operation binding the contract event 0x2ed7bcf2ff03098102c7003d7ce2a633e4b49b8198b07de5383cdf4c0ab9228b.
//
// Solidity: event ConsumerChannelCreated(address indexed identity, address indexed hermesId, address channelAddress)
func (_Registry *RegistryFilterer) ParseConsumerChannelCreated(log types.Log) (*RegistryConsumerChannelCreated, error) {
	event := new(RegistryConsumerChannelCreated)
	if err := _Registry.contract.UnpackLog(event, "ConsumerChannelCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryDestinationChangedIterator is returned from FilterDestinationChanged and is used to iterate over the raw logs and unpacked data for DestinationChanged events raised by the Registry contract.
type RegistryDestinationChangedIterator struct {
	Event *RegistryDestinationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryDestinationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryDestinationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryDestinationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryDestinationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryDestinationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryDestinationChanged represents a DestinationChanged event raised by the Registry contract.
type RegistryDestinationChanged struct {
	PreviousDestination common.Address
	NewDestination      common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDestinationChanged is a free log retrieval operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_Registry *RegistryFilterer) FilterDestinationChanged(opts *bind.FilterOpts, previousDestination []common.Address, newDestination []common.Address) (*RegistryDestinationChangedIterator, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return &RegistryDestinationChangedIterator{contract: _Registry.contract, event: "DestinationChanged", logs: logs, sub: sub}, nil
}

// WatchDestinationChanged is a free log subscription operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_Registry *RegistryFilterer) WatchDestinationChanged(opts *bind.WatchOpts, sink chan<- *RegistryDestinationChanged, previousDestination []common.Address, newDestination []common.Address) (event.Subscription, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryDestinationChanged)
				if err := _Registry.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDestinationChanged is a log parse operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_Registry *RegistryFilterer) ParseDestinationChanged(log types.Log) (*RegistryDestinationChanged, error) {
	event := new(RegistryDestinationChanged)
	if err := _Registry.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryHermesURLUpdatedIterator is returned from FilterHermesURLUpdated and is used to iterate over the raw logs and unpacked data for HermesURLUpdated events raised by the Registry contract.
type RegistryHermesURLUpdatedIterator struct {
	Event *RegistryHermesURLUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryHermesURLUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryHermesURLUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryHermesURLUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryHermesURLUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryHermesURLUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryHermesURLUpdated represents a HermesURLUpdated event raised by the Registry contract.
type RegistryHermesURLUpdated struct {
	HermesId common.Address
	NewURL   []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterHermesURLUpdated is a free log retrieval operation binding the contract event 0xd8c638c85547b8717e0d5ca292cff6dbe8fc02fa6e6863a047971c39511643c7.
//
// Solidity: event HermesURLUpdated(address indexed hermesId, bytes newURL)
func (_Registry *RegistryFilterer) FilterHermesURLUpdated(opts *bind.FilterOpts, hermesId []common.Address) (*RegistryHermesURLUpdatedIterator, error) {

	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "HermesURLUpdated", hermesIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryHermesURLUpdatedIterator{contract: _Registry.contract, event: "HermesURLUpdated", logs: logs, sub: sub}, nil
}

// WatchHermesURLUpdated is a free log subscription operation binding the contract event 0xd8c638c85547b8717e0d5ca292cff6dbe8fc02fa6e6863a047971c39511643c7.
//
// Solidity: event HermesURLUpdated(address indexed hermesId, bytes newURL)
func (_Registry *RegistryFilterer) WatchHermesURLUpdated(opts *bind.WatchOpts, sink chan<- *RegistryHermesURLUpdated, hermesId []common.Address) (event.Subscription, error) {

	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "HermesURLUpdated", hermesIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryHermesURLUpdated)
				if err := _Registry.contract.UnpackLog(event, "HermesURLUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHermesURLUpdated is a log parse operation binding the contract event 0xd8c638c85547b8717e0d5ca292cff6dbe8fc02fa6e6863a047971c39511643c7.
//
// Solidity: event HermesURLUpdated(address indexed hermesId, bytes newURL)
func (_Registry *RegistryFilterer) ParseHermesURLUpdated(log types.Log) (*RegistryHermesURLUpdated, error) {
	event := new(RegistryHermesURLUpdated)
	if err := _Registry.contract.UnpackLog(event, "HermesURLUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Registry contract.
type RegistryOwnershipTransferredIterator struct {
	Event *RegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipTransferred represents a OwnershipTransferred event raised by the Registry contract.
type RegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipTransferredIterator{contract: _Registry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipTransferred)
				if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Registry *RegistryFilterer) ParseOwnershipTransferred(log types.Log) (*RegistryOwnershipTransferred, error) {
	event := new(RegistryOwnershipTransferred)
	if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRegisteredHermesIterator is returned from FilterRegisteredHermes and is used to iterate over the raw logs and unpacked data for RegisteredHermes events raised by the Registry contract.
type RegistryRegisteredHermesIterator struct {
	Event *RegistryRegisteredHermes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegisteredHermesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegisteredHermes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegisteredHermes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegisteredHermesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegisteredHermesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegisteredHermes represents a RegisteredHermes event raised by the Registry contract.
type RegistryRegisteredHermes struct {
	HermesId       common.Address
	HermesOperator common.Address
	Ur             []byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRegisteredHermes is a free log retrieval operation binding the contract event 0xf06d60cc2f463635fd237ad87f1d007af54840b82e7e4561707b1be63d91c260.
//
// Solidity: event RegisteredHermes(address indexed hermesId, address hermesOperator, bytes ur)
func (_Registry *RegistryFilterer) FilterRegisteredHermes(opts *bind.FilterOpts, hermesId []common.Address) (*RegistryRegisteredHermesIterator, error) {

	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RegisteredHermes", hermesIdRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRegisteredHermesIterator{contract: _Registry.contract, event: "RegisteredHermes", logs: logs, sub: sub}, nil
}

// WatchRegisteredHermes is a free log subscription operation binding the contract event 0xf06d60cc2f463635fd237ad87f1d007af54840b82e7e4561707b1be63d91c260.
//
// Solidity: event RegisteredHermes(address indexed hermesId, address hermesOperator, bytes ur)
func (_Registry *RegistryFilterer) WatchRegisteredHermes(opts *bind.WatchOpts, sink chan<- *RegistryRegisteredHermes, hermesId []common.Address) (event.Subscription, error) {

	var hermesIdRule []interface{}
	for _, hermesIdItem := range hermesId {
		hermesIdRule = append(hermesIdRule, hermesIdItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RegisteredHermes", hermesIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegisteredHermes)
				if err := _Registry.contract.UnpackLog(event, "RegisteredHermes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisteredHermes is a log parse operation binding the contract event 0xf06d60cc2f463635fd237ad87f1d007af54840b82e7e4561707b1be63d91c260.
//
// Solidity: event RegisteredHermes(address indexed hermesId, address hermesOperator, bytes ur)
func (_Registry *RegistryFilterer) ParseRegisteredHermes(log types.Log) (*RegistryRegisteredHermes, error) {
	event := new(RegistryRegisteredHermes)
	if err := _Registry.contract.UnpackLog(event, "RegisteredHermes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryRegisteredIdentityIterator is returned from FilterRegisteredIdentity and is used to iterate over the raw logs and unpacked data for RegisteredIdentity events raised by the Registry contract.
type RegistryRegisteredIdentityIterator struct {
	Event *RegistryRegisteredIdentity // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRegisteredIdentityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRegisteredIdentity)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRegisteredIdentity)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRegisteredIdentityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRegisteredIdentityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRegisteredIdentity represents a RegisteredIdentity event raised by the Registry contract.
type RegistryRegisteredIdentity struct {
	Identity    common.Address
	Beneficiary common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegisteredIdentity is a free log retrieval operation binding the contract event 0xefaf768237c22e140a862d5d375ad5c153479fac3f8bcf8b580a1651fd62c3ef.
//
// Solidity: event RegisteredIdentity(address indexed identity, address beneficiary)
func (_Registry *RegistryFilterer) FilterRegisteredIdentity(opts *bind.FilterOpts, identity []common.Address) (*RegistryRegisteredIdentityIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RegisteredIdentity", identityRule)
	if err != nil {
		return nil, err
	}
	return &RegistryRegisteredIdentityIterator{contract: _Registry.contract, event: "RegisteredIdentity", logs: logs, sub: sub}, nil
}

// WatchRegisteredIdentity is a free log subscription operation binding the contract event 0xefaf768237c22e140a862d5d375ad5c153479fac3f8bcf8b580a1651fd62c3ef.
//
// Solidity: event RegisteredIdentity(address indexed identity, address beneficiary)
func (_Registry *RegistryFilterer) WatchRegisteredIdentity(opts *bind.WatchOpts, sink chan<- *RegistryRegisteredIdentity, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RegisteredIdentity", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRegisteredIdentity)
				if err := _Registry.contract.UnpackLog(event, "RegisteredIdentity", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisteredIdentity is a log parse operation binding the contract event 0xefaf768237c22e140a862d5d375ad5c153479fac3f8bcf8b580a1651fd62c3ef.
//
// Solidity: event RegisteredIdentity(address indexed identity, address beneficiary)
func (_Registry *RegistryFilterer) ParseRegisteredIdentity(log types.Log) (*RegistryRegisteredIdentity, error) {
	event := new(RegistryRegisteredIdentity)
	if err := _Registry.contract.UnpackLog(event, "RegisteredIdentity", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
